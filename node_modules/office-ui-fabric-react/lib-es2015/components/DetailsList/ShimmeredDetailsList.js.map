{"version":3,"file":"ShimmeredDetailsList.js","sourceRoot":"../src/","sources":["components/DetailsList/ShimmeredDetailsList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n\r\nimport { BaseComponent, css } from '../../Utilities';\r\nimport { SelectionMode } from '../../utilities/selection/interfaces';\r\nimport { IDetailsListProps, CheckboxVisibility } from './DetailsList.types';\r\nimport { DetailsList } from './DetailsList';\r\nimport { IDetailsRowProps } from './DetailsRow';\r\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType, IShimmerElement } from '../Shimmer';\r\n\r\nimport * as rowStyles from './DetailsRow.scss';\r\nimport * as listStyles from './DetailsList.scss';\r\n\r\nexport interface IShimmeredDetailsListProps extends IDetailsListProps {\r\n  shimmerLines?: number;\r\n  onRenderCustomPlaceholder?: () => React.ReactNode;\r\n}\r\n\r\nconst SHIMMER_INITIAL_ITEMS = 10;\r\nconst DEFAULT_SHIMMER_HEIGHT = 7;\r\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\r\n\r\n// This values are matching values from ./DetailsRow.css\r\nconst DEFAULT_SIDE_PADDING = 8;\r\nconst DEFAULT_EXTRA_SIDE_PADDING = 24;\r\nconst DEFAULT_ROW_HEIGHT = 42;\r\nconst COMPACT_ROW_HEIGHT = 32;\r\n\r\nexport class ShimmeredDetailsList extends BaseComponent<IShimmeredDetailsListProps, {}> {\r\n  private _shimmerItems: null[];\r\n\r\n  constructor(props: IShimmeredDetailsListProps) {\r\n    super(props);\r\n\r\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { items, listProps } = this.props;\r\n    const { shimmerLines, onRenderCustomPlaceholder, enableShimmer, ...detailsListProps } = this.props;\r\n\r\n    // Adds to the optional listProp classname a fading out overlay classname only when shimmer enabled.\r\n    const shimmeredListClassname: string = css(\r\n      listProps && listProps.className,\r\n      enableShimmer && listStyles.shimmerFadeOut\r\n    );\r\n    const newListProps = { ...listProps, className: shimmeredListClassname };\r\n\r\n    return (\r\n      <DetailsList\r\n        { ...detailsListProps }\r\n        items={ enableShimmer ? this._shimmerItems : items }\r\n        onRenderMissingItem={ this._onRenderShimmerPlaceholder }\r\n        listProps={ newListProps }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\r\n    const { onRenderCustomPlaceholder, compact } = this.props;\r\n    const { selectionMode, checkboxVisibility } = rowProps;\r\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\r\n\r\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\r\n      ? onRenderCustomPlaceholder()\r\n      : this._renderDefaultShimmerPlaceholder(rowProps);\r\n\r\n    return (\r\n      <div className={ css(showCheckbox && rowStyles.shimmerLeftBorder, !compact && rowStyles.shimmerBottomBorder) }>\r\n        <Shimmer customElementsGroup={ placeholderElements } />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\r\n    const { columns, compact } = rowProps;\r\n    const shimmerElementsRow: JSX.Element[] = [];\r\n    const gapHeight: number = compact ? COMPACT_ROW_HEIGHT : DEFAULT_ROW_HEIGHT;\r\n\r\n    columns.map((column, columnIdx) => {\r\n      const shimmerElements: IShimmerElement[] = [];\r\n      const groupWidth: number =\r\n        DEFAULT_SIDE_PADDING * 2 +\r\n        column.calculatedWidth! +\r\n        (column.isPadded ? DEFAULT_EXTRA_SIDE_PADDING : 0);\r\n\r\n      shimmerElements.push({\r\n        type: ShimmerElementType.gap,\r\n        width: DEFAULT_SIDE_PADDING,\r\n        height: gapHeight\r\n      });\r\n\r\n      if (column.isIconOnly) {\r\n        shimmerElements.push({\r\n          type: ShimmerElementType.line,\r\n          width: column.calculatedWidth!,\r\n          height: column.calculatedWidth!\r\n        });\r\n        shimmerElements.push({\r\n          type: ShimmerElementType.gap,\r\n          width: DEFAULT_SIDE_PADDING,\r\n          height: gapHeight\r\n        });\r\n      } else {\r\n        shimmerElements.push({\r\n          type: ShimmerElementType.line,\r\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\r\n          height: DEFAULT_SHIMMER_HEIGHT\r\n        });\r\n        shimmerElements.push({\r\n          type: ShimmerElementType.gap,\r\n          width:\r\n            DEFAULT_SIDE_PADDING +\r\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\r\n            (column.isPadded ? DEFAULT_EXTRA_SIDE_PADDING : 0),\r\n          height: gapHeight\r\n        });\r\n      }\r\n      shimmerElementsRow.push(\r\n        <ShimmerElementsGroup key={ columnIdx } width={ `${groupWidth}px` } shimmerElements={ shimmerElements } />\r\n      );\r\n    });\r\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave until the column resizing logic is done.\r\n    shimmerElementsRow.push(\r\n      <ShimmerElementsGroup\r\n        key={ 'endGap' }\r\n        width={ '100%' }\r\n        shimmerElements={ [{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }] }\r\n      />\r\n    );\r\n    return <div style={ { display: 'flex' } }>{ shimmerElementsRow }</div>;\r\n  }\r\n}\r\n"]}