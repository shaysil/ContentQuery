{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.0.18",
    "schemaVersion": 1000
  },
  "kind": "Package",
  "canonicalReference": "@microsoft/sp-property-pane",
  "docComment": "/**\n * SharePoint Framework property pane.\n *\n * @remarks\n *\n * Helps create the property pane for the SharePoint components such as web parts, canvas etc.,\n *\n * @packagedocumentation\n */\n",
  "name": "@microsoft/sp-property-pane",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "",
      "name": "",
      "members": [
        {
          "kind": "Enum",
          "canonicalReference": "(DynamicDataSharedDepth:enum)",
          "docComment": "/**\n * Enum for the possible values of shared depth of the dynamic data reference.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare const enum "
            },
            {
              "kind": "Reference",
              "text": "DynamicDataSharedDepth"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DynamicDataSharedDepth",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "None",
              "docComment": "/**\n * Indicates that nothing is shared.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "None"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "None",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Property",
              "docComment": "/**\n * Indicates that both the dynamic data source and the property are shared.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Property"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Property",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Source",
              "docComment": "/**\n * Indicates that the dynamic data source is shared.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Source"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Source",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IDynamicDataSharedPropertyConfiguration:interface)",
          "docComment": "/**\n * Configuration related to a shared property.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IDynamicDataSharedPropertyConfiguration"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IDynamicDataSharedPropertyConfiguration",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "filters",
              "docComment": "/**\n * Filters for the shared property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "filters"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDynamicDataSharedPropertyFilters"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "filters",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IDynamicDataSharedPropertyFilters:interface)",
          "docComment": "/**\n * Property pane dynamic data property filters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IDynamicDataSharedPropertyFilters"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IDynamicDataSharedPropertyFilters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "propertyId",
              "docComment": "/**\n * Property Id\n *\n * Usage: Use this filter when the author can only to connect to a specific property from the selected source.\n *\n * @remarks\n *\n * This is to filter which specific property is to be pre-selected in the properties dropdown(second level) on the dynamic data widget.\n *\n * When provided, the dynamic data properties dropdown is pre-selected to show the specific property, if avaialble. Otherwise the dropdown will fall back to show all the exposed properties from the source. If a property is pre-selected, the control will be disabled to ensure that authors can not change it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "propertyId"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "propertyId",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IDynamicDataSharedSourceConfiguration:interface)",
          "docComment": "/**\n * Configuration related to a shared source.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IDynamicDataSharedSourceConfiguration"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IDynamicDataSharedSourceConfiguration",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "filters",
              "docComment": "/**\n * Filters for the shared source.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "filters"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDynamicDataSharedSourceFilters"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "filters",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "sourcesLabel",
              "docComment": "/**\n * User-friendly, localized label for the sources dropdown.\n *\n * default value - 'Connect to source'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "sourcesLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sourcesLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IDynamicDataSharedSourceFilters:interface)",
          "docComment": "/**\n * Property pane dynamic data source filters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IDynamicDataSharedSourceFilters"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IDynamicDataSharedSourceFilters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "componentId",
              "docComment": "/**\n * Component Id.\n *\n * Usage: Use this filter when the author should only be able to connect to a specific type of source.\n *\n * @remarks\n *\n * This is to filter what type of source needs to be shown in the data sources dropdown (first level) on the dynamic data widget.\n *\n * When provided, the dynamic data sources dropdown in the dynamic data widget is filtered to only show the sources matching the given component id.\n *\n * Example - If the document library web part component id is supplied, then the dynamic data sources dropdown only shows document library web parts on the page which are registered dynamic sources.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "componentId"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Guid"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentId",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "sourceId",
              "docComment": "/**\n * Source Id\n *\n * Usage: Use this filter, when the author can only to connect to a specific data source.\n *\n * @remarks\n *\n * This is to filter which specific source is to be pre-selected in the data sources dropdown (first level) on the dynamic data widget.\n *\n * When provided, the dynamic data sources dropdown is pre-selected to show the source with the provided id, if available. Otherwise the dropdown will fall back to show all the existing data sources on the page. If a source is pre-selected, the control will be disabled to ensure that authors can not change it.\n *\n * The source id for a web part will be of the form WebPart.<ComponentId>.<InstanceId>\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "sourceId"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sourceId",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneButtonProps:interface)",
          "docComment": "/**\n * PropertyPane button props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneButtonProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "ariaDescription",
              "docComment": "/**\n * Detailed description of the button for the benefit of screen readers.\n *\n * Besides the compound button, other button types will need more information provided to screen reader.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ariaDescription"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescription",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ariaLabel",
              "docComment": "/**\n * The aria label of the button for the benefit of screen readers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ariaLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "buttonType",
              "docComment": "/**\n * The type of button to render. Default value is ButtonType.normal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "buttonType"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyPaneButtonType"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "buttonType",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "description",
              "docComment": "/**\n * Description of the action this button takes. Only used for compound buttons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "description"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "disabled",
              "docComment": "/**\n * Whether the button is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "disabled"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "icon",
              "docComment": "/**\n * The button icon shown in command or hero type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "icon"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "onClick",
              "docComment": "/**\n * A callback which is invoked on the button click, which takes in the existing value for the bound property and returns the new value and which is then used to update the properties bag. This update will result in the re-render of the PropertyPane with the new props.\n *\n * @privateRemarks\n *\n * This is the only place where the web part developer's is allowed to pass in the callback for an individual element. This is because, button click does not result in any property change, and hence cannot fire the 'onChange'' event for a property, and ends up becoming a no-op. To avoid this, giving the control back to the web part, so that web part can make act acordingly.\n *\n * todo: VSO# 233578:PropertyPane Button OnClick event api.\n *\n * @param value - Value associated with element's target property in the properties bag.\n *\n * @returns - New value for the target property, which will eventually be updated in the properties bag.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onClick"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "value"
                },
                {
                  "kind": "Content",
                  "text": ": any) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "text",
              "docComment": "/**\n * Display text of the element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "text"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneCheckboxProps:interface)",
          "docComment": "/**\n * PropertyPane CheckBox component props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneCheckboxProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneCheckboxProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "checked",
              "docComment": "/**\n * Whether the property pane checkbox is checked or not.\n *\n * @remarks\n *\n * The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "checked"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "disabled",
              "docComment": "/**\n * Whether the property pane checkbox is disabled or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "disabled"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "text",
              "docComment": "/**\n * Label to display next to the checkbox.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "text"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneChoiceGroupOption:interface)",
          "docComment": "/**\n * PropertyPane ChoiceGroup option props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneChoiceGroupOption"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneChoiceGroupOption",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "ariaLabel",
              "docComment": "/**\n * The aria label of the property pane choice group option for the benefit of screen readers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ariaLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "checked",
              "docComment": "/**\n * Whether the property pane choice group option is checked or not.\n *\n * Default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "checked"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "disabled",
              "docComment": "/**\n * Whether the property pane choice group option is disabled or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "disabled"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "iconProps",
              "docComment": "/**\n * The Icon component props for choice field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "iconProps"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneChoiceGroupOptionIconProps"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconProps",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "imageSize",
              "docComment": "/**\n * The width and height of the image in px for choice field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "imageSize"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        "
                },
                {
                  "kind": "Reference",
                  "text": "width"
                },
                {
                  "kind": "Content",
                  "text": ": number;\n        "
                },
                {
                  "kind": "Reference",
                  "text": "height"
                },
                {
                  "kind": "Content",
                  "text": ": number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageSize",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "imageSrc",
              "docComment": "/**\n * The src of image for choice field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "imageSrc"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageSrc",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "key",
              "docComment": "/**\n * A required key to uniquely identify the option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "selectedImageSrc",
              "docComment": "/**\n * The src of image for choice field which is selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "selectedImageSrc"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedImageSrc",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "text",
              "docComment": "/**\n * The text string for the option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "text"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneChoiceGroupOptionIconProps:interface)",
          "docComment": "/**\n * PropertyPane ChoiceGroup icon props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneChoiceGroupOptionIconProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneChoiceGroupOptionIconProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "officeFabricIconFontName",
              "docComment": "/**\n * The name of the icon to use from the Office Fabric icon set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "officeFabricIconFontName"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "officeFabricIconFontName",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneChoiceGroupProps:interface)",
          "docComment": "/**\n * PropertyPane ChoiceGroup props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneChoiceGroupProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneChoiceGroupProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "label",
              "docComment": "/**\n * Descriptive label for the choice group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "label"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "options",
              "docComment": "/**\n * The options for the choice group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneChoiceGroupOption"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneConditionalGroup:interface)",
          "docComment": "/**\n * Property pane conditional group.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneConditionalGroup"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneConditionalGroup",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "onShowPrimaryGroup",
              "docComment": "/**\n * Callback when user clicks to show primary group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onShowPrimaryGroup"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onShowPrimaryGroup",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "onShowSecondaryGroup",
              "docComment": "/**\n * Callback when user clicks to show secondary group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onShowSecondaryGroup"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onShowSecondaryGroup",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "primaryGroup",
              "docComment": "/**\n * Primary group to show\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "primaryGroup"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneGroup"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryGroup",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "secondaryGroup",
              "docComment": "/**\n * Secondary group to show\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "secondaryGroup"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneGroup"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryGroup",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "showSecondaryGroup",
              "docComment": "/**\n * Indicating whether the property pane should show primary group or the secondary group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "showSecondaryGroup"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showSecondaryGroup",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneConfiguration:interface)",
          "docComment": "/**\n * Web part configuration settings\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneConfiguration"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneConfiguration",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "currentPage",
              "docComment": "/**\n * Page to be displayed on the PropertyPane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "currentPage"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentPage",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "loadingIndicatorDelayTime",
              "docComment": "/**\n * Number of milliseconds to be delayed before the loading indicator is shown on the property pane.\n *\n * @remarks\n *\n * The default value is 500.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "loadingIndicatorDelayTime"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loadingIndicatorDelayTime",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pages",
              "docComment": "/**\n * Total number of pages on the PropertyPane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "pages"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPanePage"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pages",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "showLoadingIndicator",
              "docComment": "/**\n * Indicates whether the loading indicator should be displayed on top of the property pane or not.\n *\n * @remarks\n *\n * This feature is intended to be used when the user is waiting on a promise to resolve. If set to true, overlay loading indicator appears after 500ms (web part author can override this behavior by using overlayLoadingIndicator property).\n *\n * The reason why we are not showing it immediately is that our intent is to never show the loading indicator. But in real life async requests could take long and it becomes necessary to display a loading indicator to the end user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "showLoadingIndicator"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showLoadingIndicator",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneCustomFieldProps:interface)",
          "docComment": "/**\n * PropertyPane CustomPropertyField props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneCustomFieldProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneCustomFieldProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "context",
              "docComment": "/**\n * Instance specific context. This context is passed back to the web part in the onRender and onDispose APIs. The web part can use this context to manage state information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "context"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "key",
              "docComment": "/**\n * An UNIQUE key indicates the identity of this contorl.\n *\n * The PropertyPane uses ReactJS to render its components. ReactJS uses keys to identify a component and if it should be re-rendered or not. This is a performance feature in ReactJS. Please read the following link to understand how to pick the value of the key.\n *\n * For more information, see the {@link https://facebook.github.io/react/docs/lists-and-keys.html#keys | React documentation}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "onDispose",
              "docComment": "/**\n * This API is called when the component is unmounted from the host element.\n *\n * @param domElement - DOM element on which the custom control is mounted.\n *\n * @param context - Instance specific context. This context was passed in the constructor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onDispose"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "domElement"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "context"
                },
                {
                  "kind": "Content",
                  "text": "?: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDispose",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 9
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "onRender",
              "docComment": "/**\n * This API will be called once the custom field is mounted on the host element.\n *\n * @param domElement - DOM element on which the custom control needs to be mounted.\n *\n * @param context - Instance specific context. This context was passed in the constructor.\n *\n * @param changeCallback - Callback called when a field changes within the custom field. This will allow the property pane to be aware of the change and act accordingly.\n *\n * @param targetProperty - associated target property from the properties bag. if not provided then a custom value which is unique at the custom field level is assigned, which will be in the form of `__CustomField_<key provided when the custom field is created>`.\n *\n * @param newValue - new value of the property. newValue is ignored if targetProperty is not specified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onRender"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "domElement"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "context"
                },
                {
                  "kind": "Content",
                  "text": "?: any, "
                },
                {
                  "kind": "Reference",
                  "text": "changeCallback"
                },
                {
                  "kind": "Content",
                  "text": "?: ("
                },
                {
                  "kind": "Reference",
                  "text": "targetProperty"
                },
                {
                  "kind": "Content",
                  "text": "?: string, "
                },
                {
                  "kind": "Reference",
                  "text": "newValue"
                },
                {
                  "kind": "Content",
                  "text": "?: any) => void) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRender",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 15
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneDropdownCalloutProps:interface)",
          "docComment": "/**\n * PropertyPane dropdown callout properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDropdownCalloutProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneDropdownCalloutProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "calloutMaxHeight",
              "docComment": "/**\n * Set max height of callout When not set the callout will expand with contents up to the bottom of the screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "calloutMaxHeight"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutMaxHeight",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneDropdownOption:interface)",
          "docComment": "/**\n * PropertyPane drop down options.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDropdownOption"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneDropdownOption",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "index",
              "docComment": "/**\n * Index for this option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "index"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "key",
              "docComment": "/**\n * A key to uniquely identify this option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "text",
              "docComment": "/**\n * Text to render for this option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "text"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "type",
              "docComment": "/**\n * The type of option. If omitted, the default is PropertyPaneDropdownMenuItemType.Normal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "type"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyPaneDropdownOptionType"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneDropdownProps:interface)",
          "docComment": "/**\n * PropertyPane drop down component props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDropdownProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneDropdownProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "ariaLabel",
              "docComment": "/**\n * A description of the dropdown for the benefit of screen reader users.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ariaLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ariaPositionInSet",
              "docComment": "/**\n * Defines an element's number or position in the current set of controls. Maps to native aria-posinset attribute. It starts from 1.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ariaPositionInSet"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaPositionInSet",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "ariaSetSize",
              "docComment": "/**\n * Defines the number of items in the current set of controls. Maps to native aria-setsize attribute.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ariaSetSize"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaSetSize",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "calloutProps",
              "docComment": "/**\n * Custom properties for Dropdown's Callout used to render options.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "calloutProps"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneDropdownCalloutProps"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutProps",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "disabled",
              "docComment": "/**\n * Whether the property pane dropdown option is disabled or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "disabled"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "label",
              "docComment": "/**\n * Descriptive label for the Dropdown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "label"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "options",
              "docComment": "/**\n * Collection of options for this Dropdown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneDropdownOption"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "selectedKey",
              "docComment": "/**\n * The key of the initially selected option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "selectedKey"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneDynamicFieldProps:interface)",
          "docComment": "/**\n * PropertyPaneDynamicField props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicFieldProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneDynamicFieldProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "filters",
              "docComment": "/**\n * Filters for the property pane dynamic field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "filters"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneDynamicFieldFilters"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "filters",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "label",
              "docComment": "/**\n * User-friendly, localized label to identify the field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "label"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "propertyValueDepth",
              "docComment": "/**\n * Indicates to what depth of property values are shown on the property pane dynamic data widget.\n *\n * If not specified, then max of 2 levels of property value will be shown.\n *\n * @remarks\n *\n * It takes following values - - 0: Indicates that no property value will be shown i.e., the widget will display only source and property for this field. - 1: Indicates that a depth of one level of property value will be shown i.e., the widget will display one level after the source and property for this field. - 2: Indicates that a depth of two levels of property value will be shown i.e., the widget will display two levels after the source and property for this field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "propertyValueDepth"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "propertyValueDepth",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "sourcesLabel",
              "docComment": "/**\n * User-friendly, localized label for the sources dropdown.\n *\n * default value - 'Connect to source'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "sourcesLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sourcesLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneDynamicFieldSetProps:interface)",
          "docComment": "/**\n * PropertyPane DynamicFieldSet props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicFieldSetProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneDynamicFieldSetProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "fields",
              "docComment": "/**\n * List of property pane dynamic fields to be configured on the Dynamic Data Widget.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "fields"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneField"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneDynamicFieldProps"
                },
                {
                  "kind": "Content",
                  "text": ">[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fields",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "label",
              "docComment": "/**\n * User-friendly, localized label to identify the property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "label"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "sharedConfiguration",
              "docComment": "/**\n * Configuration shared between all the entries of the set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "sharedConfiguration"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        "
                },
                {
                  "kind": "Reference",
                  "text": "depth"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicDataSharedDepth"
                },
                {
                  "kind": "Content",
                  "text": ";\n        "
                },
                {
                  "kind": "Reference",
                  "text": "source"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDynamicDataSharedSourceConfiguration"
                },
                {
                  "kind": "Content",
                  "text": ";\n        "
                },
                {
                  "kind": "Reference",
                  "text": "property"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDynamicDataSharedPropertyConfiguration"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sharedConfiguration",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 15
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneDynamicTextFieldProps:interface)",
          "docComment": "/**\n * `PropertyPaneDynamicData` component props.\n *\n * @deprecated\n *\n * - This has been replaced by IPropertyPaneDynamicFieldProps\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicTextFieldProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Beta",
          "name": "IPropertyPaneDynamicTextFieldProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "ariaLabel",
              "docComment": "/**\n * ARIA Label for text field, if any.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ariaLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "description",
              "docComment": "/**\n * The text field input description.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "description"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "disabled",
              "docComment": "/**\n * Whether the property pane text field is enabled or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "disabled"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "errorMessage",
              "docComment": "/**\n * If set, this will be displayed as an error message.\n *\n * @remarks\n *\n * When `onGetErrorMessage` returns empty string, if this property has a value set then this will be displayed as the error message.\n *\n * Make sure to set this only if you want to see an error message displayed for the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "errorMessage"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "errorMessage",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "label",
              "docComment": "/**\n * Label for the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "label"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "onGetErrorMessage",
              "docComment": "/**\n * This method is used to get the validation error message and determine whether the input value is valid or not.\n *\n * @remarks\n *\n * When it returns string:\n *\n * - If valid, it returns empty string.\n *\n * - If invalid, it returns the error message string and an error message is displayed below the text field.\n *\n * When it returns `Promise<string>`:\n *\n * - The resolved value is display as error message.\n *\n * - The rejected, the value is thrown away.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onGetErrorMessage"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "value"
                },
                {
                  "kind": "Content",
                  "text": ": string) => string | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "onGetErrorMessage",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "placeholder",
              "docComment": "/**\n * Placeholder text to be displayed in the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "placeholder"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "placeholder",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "validateOnFocusIn",
              "docComment": "/**\n * Run validation when the PropertyPaneTextField is focused.\n *\n * @remarks\n *\n * The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "validateOnFocusIn"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "validateOnFocusIn",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "validateOnFocusOut",
              "docComment": "/**\n * Run validation when the `PropertyPaneTextField` is out of focus or on blur.\n *\n * @remarks\n *\n * The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "validateOnFocusOut"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "validateOnFocusOut",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "value",
              "docComment": "/**\n * Value to be displayed in the text field when the value of the targetProperty in the manifest's property bag is empty or contains null value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "value"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneField:interface)",
          "docComment": "/**\n * PropertyPane field.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TProperties"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneField",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "properties",
              "docComment": "/**\n * Strongly typed properties object. Specific to each field type.\n *\n * @remarks\n *\n * Example: Checkbox has ICheckboxProps, TextField has ITextField props.\n *\n * @privateRemarks\n *\n * - These props are from the office-ui-fabric-react. These props may not be extensive as the fabric-react ones. This is intentional. - We are not including any callbacks as part of the props, as this might end up breaking the internal flow and cause unwanted problems. - Currently discussions are going on whether to include styling elements or not. Based on the output of the discussions, changes to the styling related props will take place.\n *\n * We are including only those which are supported by the web part framework.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "properties"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TProperties"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "properties",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "shouldFocus",
              "docComment": "/**\n * Whether this control should be focused.\n *\n * @remarks\n *\n * The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "shouldFocus"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldFocus",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "targetProperty",
              "docComment": "/**\n * Target property from the web part's property bag.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "targetProperty"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "targetProperty",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "type",
              "docComment": "/**\n * Type of the PropertyPane field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "type"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyPaneFieldType"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneGroup:interface)",
          "docComment": "/**\n * PropertyPane group. Group is part of the PropertyPanePage.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneGroup"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneGroup",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "groupFields",
              "docComment": "/**\n * List of PropertyPane fields.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "groupFields"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneField"
                },
                {
                  "kind": "Content",
                  "text": "<any>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groupFields",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "groupName",
              "docComment": "/**\n * Display name for the group.\n *\n * @remarks\n *\n * For performance reasons, it's highly recommended to keep this name unique within the property pane page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "groupName"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groupName",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isCollapsed",
              "docComment": "/**\n * Indicates whether the PropertyPane group is collapsed or not.\n *\n * @remarks\n *\n * The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "isCollapsed"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCollapsed",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneLabelProps:interface)",
          "docComment": "/**\n * PropertyPaneLabel component props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneLabelProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneLabelProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "required",
              "docComment": "/**\n * Whether the associated form field is required or not.\n *\n * @remarks\n *\n * If true, a red asterisk is displayed to the right of the label. Default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "required"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "text",
              "docComment": "/**\n * Display text fot the label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "text"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneLinkProps:interface)",
          "docComment": "/**\n * PropertyPaneLink component props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneLinkProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneLinkProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "disabled",
              "docComment": "/**\n * Whether the property pane link is disabled or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "disabled"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "href",
              "docComment": "/**\n * Location to which the link is targeted to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "href"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "href",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "popupWindowProps",
              "docComment": "/**\n * The props of pop up window.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "popupWindowProps"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPopupWindowProps"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "popupWindowProps",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "target",
              "docComment": "/**\n * This attribute specifies where to display the linked resource.\n *\n * @remarks\n *\n * Following values can be used:\n *\n * _self - (default) Load the response in the current page.\n *\n * _blank - Load the response into a new unnamed tab.\n *\n * _parent - Load the response in the parent of the current page. If no parent exists, then this option behaves same as \"_self\"\n *\n * _top - Load the response into the original window.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "target"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "text",
              "docComment": "/**\n * Display text for the link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "text"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPanePage:interface)",
          "docComment": "/**\n * PropertyPanePage interface.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPanePage"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPanePage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "displayGroupsAsAccordion",
              "docComment": "/**\n * Indicates whether the groups on the PropertyPanePage are displayed as accordion or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "displayGroupsAsAccordion"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "displayGroupsAsAccordion",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "groups",
              "docComment": "/**\n * List of groups to be displayed on the PropertyPane page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "groups"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneGroup"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPaneConditionalGroup"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groups",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "header",
              "docComment": "/**\n * PropertyPane page header.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "header"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyPanePageHeader"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "header",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPanePageHeader:interface)",
          "docComment": "/**\n * PropertyPane header. This header remains same for all the pages.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPanePageHeader"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPanePageHeader",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "description",
              "docComment": "/**\n * Header to display.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "description"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "image",
              "docComment": "/**\n * Image url for the background image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "image"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "image",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneSliderProps:interface)",
          "docComment": "/**\n * PropertyPaneSliderProps component props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneSliderProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneSliderProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "ariaLabel",
              "docComment": "/**\n * A description of the Slider for the benefit of screen readers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ariaLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "disabled",
              "docComment": "/**\n * Whether or not the Slider is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "disabled"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "label",
              "docComment": "/**\n * Description label of the Slider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "label"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "max",
              "docComment": "/**\n * The max value of the Slider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "max"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "max",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "min",
              "docComment": "/**\n * The min value of the Slider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "min"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "showValue",
              "docComment": "/**\n * Whether to show the value on the right of the Slider.\n *\n * @remarks\n *\n * If you want to show the value by yourself, you may want to set this value to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "showValue"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showValue",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "step",
              "docComment": "/**\n * The difference between the two adjacent values of the Slider. Defaults to 1.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "step"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "step",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "value",
              "docComment": "/**\n * The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events.\n *\n * Defaults to min.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "value"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "valueFormat",
              "docComment": "/**\n * Callback to format the Slider value.\n *\n * For example, if '(value) => `${value}%`' is specified, the value of the Slider has % after it.\n *\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "valueFormat"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "value"
                },
                {
                  "kind": "Content",
                  "text": ": number) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "valueFormat",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneTextFieldProps:interface)",
          "docComment": "/**\n * PropertyPaneTextField component props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneTextFieldProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneTextFieldProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "ariaLabel",
              "docComment": "/**\n * Aria Label for text field, if any.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ariaLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "deferredValidationTime",
              "docComment": "/**\n * Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\n *\n * @remarks\n *\n * The default value is 200.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "deferredValidationTime"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "deferredValidationTime",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "description",
              "docComment": "/**\n * The text field input description.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "description"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "disabled",
              "docComment": "/**\n * Whether the property pane text field is enabled or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "disabled"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "errorMessage",
              "docComment": "/**\n * If set, this will be displayed as an error message.\n *\n * @remarks\n *\n * When onGetErrorMessage returns empty string, if this property has a value set then this will be displayed as the error message.\n *\n * So, make sure to set this only if you want to see an error message displayed for the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "errorMessage"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "errorMessage",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "label",
              "docComment": "/**\n * Label for the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "label"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "logName",
              "docComment": "/**\n * Name used to log `PropertyPaneTextField` value changes for engagement tracking.\n *\n * @remarks\n *\n * The messages will be logged with a format such as `<moduleName>.<controlName>`.\n *\n * For example, if `{moduleName: 'ImageWebPart', controlName: 'OverlayText'}` is specified, the engagement log might contain:\n *\n * 1. The action type:\n *\n * `Add`: change from initial/unset state to customized content. (first edit)\n *\n * `Clear`: reset the content of caption element to initial/unset state.\n *\n * `Edit`: any edition that changes the content apart from add and clear\n *\n * 2. The text length after each edit\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "logName"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        "
                },
                {
                  "kind": "Reference",
                  "text": "moduleName"
                },
                {
                  "kind": "Content",
                  "text": ": string;\n        "
                },
                {
                  "kind": "Reference",
                  "text": "controlName"
                },
                {
                  "kind": "Content",
                  "text": ": string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "logName",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "maxLength",
              "docComment": "/**\n * Maximum number of characters that the PropertyPaneTextField can have.\n *\n * @remarks\n *\n * If the value is set to a negative number, an exception will be thrown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maxLength"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxLength",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "multiline",
              "docComment": "/**\n * Whether or not the text field is a multiline text field.\n *\n * @remarks\n *\n * The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "multiline"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "multiline",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "onGetErrorMessage",
              "docComment": "/**\n * The method is used to get the validation error message and determine whether the input value is valid or not.\n *\n * @remarks\n *\n * When it returns string:\n *\n * - If valid, it returns empty string.\n *\n * - If invalid, it returns the error message string and an error message is displayed below the text field.\n *\n * When it returns `Promise<string>`:\n *\n * - The resolved value is display as error message.\n *\n * - The rejected, the value is thrown away.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onGetErrorMessage"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "value"
                },
                {
                  "kind": "Content",
                  "text": ": string) => string | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onGetErrorMessage",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "placeholder",
              "docComment": "/**\n * placeholder text to be displayed in the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "placeholder"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "placeholder",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "resizable",
              "docComment": "/**\n * Whether or not the multiline text field is resizable.\n *\n * @remarks\n *\n * The default value is true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "resizable"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resizable",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rows",
              "docComment": "/**\n * Specifies the visible height of a text area(multiline text TextField), in lines.\n *\n * @remarks\n *\n * This prop is used only when the multiline prop is set to true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "rows"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rows",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "underlined",
              "docComment": "/**\n * Whether or not the text field is underlined.\n *\n * @remarks\n *\n * The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "underlined"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "underlined",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "validateOnFocusIn",
              "docComment": "/**\n * Run validation when the PropertyPaneTextField is focused.\n *\n * @remarks\n *\n * The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "validateOnFocusIn"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "validateOnFocusIn",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "validateOnFocusOut",
              "docComment": "/**\n * Run validation when the PropertyPaneTextField is out of focus or on blur.\n *\n * @remarks\n *\n * The default value is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "validateOnFocusOut"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "validateOnFocusOut",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "value",
              "docComment": "/**\n * Value to be displayed in the text field when the value of the targetProperty in the manifest's property bag is empty or contains null value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "value"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "(IPropertyPaneToggleProps:interface)",
          "docComment": "/**\n * PropertyPaneToggle component props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneToggleProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneToggleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "checked",
              "docComment": "/**\n * Checked state of the toggle.\n *\n * @remarks\n *\n * If you are maintaining state yourself, use this property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "checked"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "disabled",
              "docComment": "/**\n * Optional disabled flag.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "disabled"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "key",
              "docComment": "/**\n * A key to uniquely identify the field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "label",
              "docComment": "/**\n * A label for the toggle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "label"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "offAriaLabel",
              "docComment": "/**\n * Optional offAriaLabel flag. Text for screen-reader to announce when toggle is OFF.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "offAriaLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "offText",
              "docComment": "/**\n * Test display when toggle is OFF.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "offText"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offText",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "onAriaLabel",
              "docComment": "/**\n * Optional onAriaLabel flag. Text for screen-reader to announce when toggle is ON.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onAriaLabel"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "onText",
              "docComment": "/**\n * Text to display when toggle is ON.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onText"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onText",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneButton:0)",
          "docComment": "/**\n * Helper method to create a Button on the PropertyPane.\n *\n * @param targetProperty - Target property the Button is associated to.\n *\n * @param properties - Strongly typed Button properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneButton"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneButtonProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneButtonProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneButton"
        },
        {
          "kind": "Enum",
          "canonicalReference": "(PropertyPaneButtonType:enum)",
          "docComment": "/**\n * Enum for all the supported button types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneButtonType"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PropertyPaneButtonType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "Command",
              "docComment": "/**\n * Optional actions.\n *\n * @remarks\n *\n * Typically used in a command bar at the top of a view, panel and inside an inline command bar. Examples: Command bar at the top of OneDrive, Outlook, SharePoint. Inline command bar on the top of SharePoint web parts.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Command"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "Command",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Compound",
              "docComment": "/**\n * Always used as a set with both Standard and Primary compound buttons.\n *\n * @remarks\n *\n * Typically used in a confirmation dialog. Examples: A confirmation dialog when a user discards a form or task with a possible significant time investment such as an email or a complex form\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Compound"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "Compound",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Hero",
              "docComment": "/**\n * Hero button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Hero"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Hero",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Icon",
              "docComment": "/**\n * Same usage as Command button, when real estate does not allow for icons + labels or as secondary actions within the command bar.\n *\n * @remarks\n *\n * Typically used in Command bar in small and medium responsive web breakpoints. Also used on objects. Examples: OneDrive small and medium responsive web breakpoint Command Bars and view icons within the Command Bar. In SharePoint and OneDrive, Cards with social actions and images which allow users to access the image picker. In SharePoint, formatting experiences such as formatting a story within the Authoring experience. In Calendar, in the bottom of an event creation Callout when clicking inside an empty time range.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Icon"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "Icon",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Normal",
              "docComment": "/**\n * Optional completion action.\n *\n * @remarks\n *\n * Typically used at the end of a form or task when paired with the Primary button OR as a standalone button to undo an action. Examples: \"Done\" button which closes a container but doesn't make a server call or an \"Undo\" button when a user is uploading a file in OneDrive.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Normal"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Normal",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Primary",
              "docComment": "/**\n * Preferred completion action when paired with a Standard button.\n *\n * @remarks\n *\n * Typically used at the end of a task or form. Examples: \"Create\", \"Save\", \"Send\" which makes a server call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Primary"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Primary",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneCheckbox:0)",
          "docComment": "/**\n * Helper method to create a Checkbox on the PropertyPane.\n *\n * @param targetProperty - Target property the checkbox is associated to.\n *\n * @param properties - Strongly typed Checkbox properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneCheckbox"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneCheckboxProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneCheckboxProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneCheckbox"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneChoiceGroup:0)",
          "docComment": "/**\n * Helper method to create a Choice Group on the PropertyPane.\n *\n * @param targetProperty - Target property the choice group is associated to.\n *\n * @param properties - Strongly typed Choice Group properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneChoiceGroup"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneChoiceGroupProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneChoiceGroupProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneChoiceGroup"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneCustomField:0)",
          "docComment": "/**\n * Helper method to create a custom field on the PropertyPane.\n *\n * @remarks\n *\n * The purpose of the custom field is to help the web part developer to add a custom control to the PropertyPane. The PropertyPane supports a host of inbuilt field types. While this list meets the demands of most web parts, but there are exceptional cases when web parts have special needs and need a special control. The custom field helps fill that gap.\n *\n * @param targetProperty - target property for this field. This parameter is being deprecated in future releases.\n *\n * @param properties - Strongly typed Custom field properties.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneCustomField"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneCustomFieldProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneCustomFieldProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Beta",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "PropertyPaneCustomField"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneDropdown:0)",
          "docComment": "/**\n * Helper method to create a Dropdown on the PropertyPane.\n *\n * @param targetProperty - Target property the dropdown is associated to.\n *\n * @param properties - Strongly typed Dropdown properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneDropdown"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDropdownProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDropdownProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneDropdown"
        },
        {
          "kind": "Enum",
          "canonicalReference": "(PropertyPaneDropdownOptionType:enum)",
          "docComment": "/**\n * Specifies the type of option in a dropdown menu rendered by {@link PropertyPaneDropdown}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneDropdownOptionType"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PropertyPaneDropdownOptionType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "Divider",
              "docComment": "/**\n * Render a divider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Divider"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Divider",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Header",
              "docComment": "/**\n * Render menu item as a header.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Header"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Header",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Normal",
              "docComment": "/**\n * Render normal menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Normal"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Normal",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneDynamicField:0)",
          "docComment": "/**\n * Helper method to create a Dynamic Data widget on the PropertyPane for a dynamic field.\n *\n * @param targetProperty - Target property the Dynamic Data widget is associated to.\n *\n * @param options - Options to enable customized values for callback, filters etc., for the dynamic field.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneDynamicField"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicFieldProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicFieldProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneDynamicField"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneDynamicFieldSet:0)",
          "docComment": "/**\n * Helper method to create a Dynamic Data widget on the Property Pane for a set of dynamic fields with a common data source.\n *\n * These fields can possibly share the same property based on the associated filters.\n *\n * @param properties - Contains entries and options, described as below: entries - A set of entries to be configured by the widget. Each entry includes the target property and, optionally, the label to show. options - Options enabling customized values for callback, filters etc., for the given set of dynamic fields.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneDynamicFieldSet"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicFieldSetProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicFieldSetProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "PropertyPaneDynamicFieldSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneDynamicTextField:0)",
          "docComment": "/**\n * Helper method to create a Dynamic TextField on the PropertyPane.\n *\n * @deprecated\n *\n * - This has been replaced by PropertyPaneDynamicField\n *\n * @param targetProperty - Target property the dynamic textfield is associated to.\n *\n * @param properties - Properties of the PropertyPaneDynamicTextField.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneDynamicTextField"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicTextFieldProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicTextFieldProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Beta",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneDynamicTextField"
        },
        {
          "kind": "Enum",
          "canonicalReference": "(PropertyPaneFieldType:enum)",
          "docComment": "/**\n * Enum for all the supported PropertyPane field types.\n *\n * Names should be consistent with those in office-ui-fabric-react, be careful to get letter casing correct.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneFieldType"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PropertyPaneFieldType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "Button",
              "docComment": "/**\n * Button field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Button"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "releaseTag": "Public",
              "name": "Button",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "CheckBox",
              "docComment": "/**\n * Checkbox field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "CheckBox"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "CheckBox",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "ChoiceGroup",
              "docComment": "/**\n * Choice Group field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ChoiceGroup"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "releaseTag": "Public",
              "name": "ChoiceGroup",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Custom",
              "docComment": "/**\n * Custom field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Custom"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Custom",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Dropdown",
              "docComment": "/**\n * Dropdown field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Dropdown"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "Dropdown",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "DynamicField",
              "docComment": "/**\n * Dynamic data field.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "DynamicField"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "14"
                }
              ],
              "releaseTag": "Public",
              "name": "DynamicField",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "DynamicFieldSet",
              "docComment": "/**\n * A set of dynamic fields.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "DynamicFieldSet"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "releaseTag": "Public",
              "name": "DynamicFieldSet",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "DynamicTextField",
              "docComment": "/**\n * Dynamic Text Field\n *\n * @deprecated\n *\n * - Please use DynamicField\n *\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "DynamicTextField"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "15"
                }
              ],
              "releaseTag": "Beta",
              "name": "DynamicTextField",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Heading",
              "docComment": "/**\n * Heading field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Heading"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "releaseTag": "Public",
              "name": "Heading",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "HorizontalRule",
              "docComment": "/**\n * Horizontal Rule field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "HorizontalRule"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "releaseTag": "Public",
              "name": "HorizontalRule",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Label",
              "docComment": "/**\n * Label field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Label"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Public",
              "name": "Label",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Link",
              "docComment": "/**\n * Link field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Link"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "releaseTag": "Public",
              "name": "Link",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Slider",
              "docComment": "/**\n * Slider field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Slider"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Public",
              "name": "Slider",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "TextField",
              "docComment": "/**\n * TextField field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "TextField"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "TextField",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "Toggle",
              "docComment": "/**\n * Toggle field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Toggle"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "Toggle",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneHorizontalRule:0)",
          "docComment": "/**\n * Helper method to create a Horizontal Rule on the PropertyPane.\n *\n * @param properties - Strongly typed Horizontal Rule properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneHorizontalRule"
            },
            {
              "kind": "Content",
              "text": "(): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [],
          "name": "PropertyPaneHorizontalRule"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneLabel:0)",
          "docComment": "/**\n * Helper method to create a Label on the PropertyPane.\n *\n * @param targetProperty - Target property the label is associated to.\n *\n * @param properties - Strongly typed Label properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneLabel"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneLabelProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneLabelProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneLabel"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneLink:0)",
          "docComment": "/**\n * Helper method to create a Link on the PropertyPane.\n *\n * @param targetProperty - Target property the Link is associated to.\n *\n * @param properties - Strongly typed Link properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneLink"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneLinkProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneLinkProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneSlider:0)",
          "docComment": "/**\n * Helper method to create a Slider on the PropertyPane.\n *\n * @param targetProperty - Target property the slider is associated to.\n *\n * @param properties - Strongly typed Slider properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneSlider"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneSliderProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneSliderProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneSlider"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneTextField:0)",
          "docComment": "/**\n * Helper method to create a TextField on the PropertyPane.\n *\n * @param targetProperty - Target property the textfield is associated to.\n *\n * @param properties - Strongly typed TextField properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneTextField"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneTextFieldProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneTextFieldProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneTextField"
        },
        {
          "kind": "Function",
          "canonicalReference": "(PropertyPaneToggle:0)",
          "docComment": "/**\n * Helper method to create a Toggle on the PropertyPane.\n *\n * @param targetProperty - Target property the toggle is associated to.\n *\n * @param properties - Strongly typed Toggle properties.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "PropertyPaneToggle"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "targetProperty"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "properties"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneToggleProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneField"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneToggleProps"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "targetProperty",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "PropertyPaneToggle"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "IPropertyPaneDynamicFieldFilters",
          "docComment": "/**\n * Property pane dynamic field filters which is an intersection of both source and property filters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "IPropertyPaneDynamicFieldFilters"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "IDynamicDataSharedSourceFilters"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "IDynamicDataSharedPropertyFilters"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IPropertyPaneDynamicFieldFilters"
        }
      ]
    }
  ]
}
