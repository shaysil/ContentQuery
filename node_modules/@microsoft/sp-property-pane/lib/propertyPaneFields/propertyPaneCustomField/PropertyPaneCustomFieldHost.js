import * as tslib_1 from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { _EngagementLogger, _LogEntry, _LogSource, _LogType } from '@microsoft/sp-diagnostics';
var CUSTOMFIELD_TARGETPROPERTY_PREFIX = '__CustomField_';
var PropertyPaneCustomFieldHost =  (function (_super) {
    tslib_1.__extends(PropertyPaneCustomFieldHost, _super);
    function PropertyPaneCustomFieldHost() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyPaneCustomFieldHost.prototype.componentDidMount = function () {
        this._domElement = ReactDOM.findDOMNode(this);
        this.props.onRender(this._domElement, this.props.context, this._onChangedCallback.bind(this));
    };
    PropertyPaneCustomFieldHost.prototype.componentDidUpdate = function () {
        if (this._domElement) {
            this.props.onRender(this._domElement, this.props.context, this._onChangedCallback.bind(this));
        }
    };
    PropertyPaneCustomFieldHost.prototype.componentWillUnmount = function () {
        if (this.props.onDispose && this._domElement) {
            this.props.onDispose(this._domElement, this.props.context);
            var didUnmount = ReactDOM.unmountComponentAtNode(this._domElement);
            this._domElement = undefined;
            var logEntry = new _LogEntry(PropertyPaneCustomFieldHost._logSource.id, 'TryUnmountReactComponent', _LogType.Event, {
                didUnmount: didUnmount.toString()
            });
            _EngagementLogger.logEventWithLogEntry(logEntry);
        }
    };
    PropertyPaneCustomFieldHost.prototype.render = function () {
        return (React.createElement("div", { className: 'ms-CustomFieldHost' }));
    };
    PropertyPaneCustomFieldHost.prototype._onChangedCallback = function (targetProperty, value) {
        if (!targetProperty) {
            targetProperty = CUSTOMFIELD_TARGETPROPERTY_PREFIX + this.props.key;
            value = undefined;
        }
        this.props.onChanged(targetProperty, value);
    };
    PropertyPaneCustomFieldHost._logSource = _LogSource.create('PropertyPaneCustomFieldHost');
    return PropertyPaneCustomFieldHost;
}(React.Component));
export default PropertyPaneCustomFieldHost;
