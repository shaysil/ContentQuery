import { DynamicProperty } from '@microsoft/sp-component-base';
import { Validate } from '@microsoft/sp-core-library';
import * as lodash from '@microsoft/sp-lodash-subset';
import { PropertyPaneFieldType } from '../propertyPaneFields/propertyPaneField/IPropertyPaneField';
export function generateGroupFieldKey(keys, groupField) {
    var key = '';
    if (groupField.type === PropertyPaneFieldType.Custom) {
        Validate.isNonemptyString(groupField.properties.key, 'Custom field key');
        var customField = groupField;
        key = customField.type + "-" + customField.properties.key;
    }
    else { 
        key = groupField.type + "-" + (groupField.targetProperty || '');
    }
    var keyIndex = keys[key] || 0;
    keys[key] = keyIndex + 1;
    key += "-" + keyIndex;
    return key;
}
export function getFixedUpPropValue(propertyPaneField, properties, dynamicConfiguration) {
    var fixedUpPropValue = lodash.get(properties, propertyPaneField.targetProperty);
    if (propertyPaneField.type === PropertyPaneFieldType.DynamicFieldSet) { 
        var entries_1 = [];
        propertyPaneField.properties.fields.forEach(function (field) {
            var propValue = lodash.get(properties, field.targetProperty); 
            entries_1.push({
                targetProperty: field.targetProperty,
                value: getFixedUpDynamicProperty(dynamicConfiguration, propValue),
                properties: field.properties
            });
        });
        fixedUpPropValue = entries_1;
    }
    else if (propertyPaneField.type === PropertyPaneFieldType.DynamicField) { 
        var entry = {
            targetProperty: propertyPaneField.targetProperty,
            value: getFixedUpDynamicProperty(dynamicConfiguration, fixedUpPropValue),
            properties: propertyPaneField.properties
        };
        fixedUpPropValue = entry;
    }
    else { 
        if (fixedUpPropValue instanceof DynamicProperty) {
            fixedUpPropValue = fixedUpPropValue.tryGetValue(); 
        }
    }
    return fixedUpPropValue;
}
export function getFixedUpDynamicProperty(dynamicConfiguration, propValue 
) {
    var isDynamicProperty = (propValue instanceof DynamicProperty);
    if (!isDynamicProperty) {
        var tempPropValue = propValue; 
        propValue = new DynamicProperty(dynamicConfiguration.dynamicDataProvider, dynamicConfiguration.defaultCallback);
        propValue.setValue(tempPropValue); 
    }
    return propValue;
}
