import * as tslib_1 from "tslib";
import { autobind, Label } from '@microsoft/office-ui-fabric-react-bundle';
import { Dropdown } from 'office-ui-fabric-react/lib/components/Dropdown/Dropdown';
import * as React from 'react';
import Strings from '../../loc/Strings.resx';
import { PropertyPaneFieldType } from '../../propertyPaneFields/propertyPaneField/IPropertyPaneField';
import Styles from '../DynamicDataWidget.module.scss';
import DynamicDataWidgetProperty from '../dynamicDataWidgetProperty/DynamicDataWidgetProperty';
var DynamicDataWidgetSource =  (function (_super) {
    tslib_1.__extends(DynamicDataWidgetSource, _super);
    function DynamicDataWidgetSource(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            selectedSourceId: _this._getSelectedSourceId()
        };
        return _this;
    }
    DynamicDataWidgetSource.prototype.render = function () {
        this._selectedSource = this.props.dynamicDataProvider.tryGetSource(this._getSelectedSourceId());
        return (React.createElement("div", null,
            this._renderSourceDropdown(),
            this._selectedSource && this._renderWidgetProperties()));
    };
    DynamicDataWidgetSource.prototype._getSelectedSourceId = function () {
        var selectedSourceId = this._getSourceIdFilter();
        var entries = this.props.entries;
        if (!selectedSourceId) {
            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                var entry = entries_1[_i];
                if (entry.value._getSourceId()) {
                    selectedSourceId = entry.value._getSourceId();
                    break;
                }
                else {
                    selectedSourceId = '';
                }
            }
        }
        return selectedSourceId;
    };
    DynamicDataWidgetSource.prototype._renderSourceDropdown = function () {
        var _this = this;
        var selectedSourceId = this.state.selectedSourceId;
        var sourceIdFilter = this._getSourceIdFilter();
        if (sourceIdFilter) {
            selectedSourceId = sourceIdFilter;
        }
        var sourceLabel = '';
        if (this.props.type === PropertyPaneFieldType.DynamicField) {
            sourceLabel = this.props.fieldProperties.sourcesLabel ||
                Strings.DynamicDataSourcesDropdownLabel;
        }
        else {
            var sharedConfiguration = this.props.fieldProperties.sharedConfiguration;
            sourceLabel = (sharedConfiguration &&
                sharedConfiguration.source &&
                sharedConfiguration.source.sourcesLabel) || Strings.DynamicDataSourcesDropdownLabel;
        }
        return (React.createElement("div", null, !sourceIdFilter &&
            React.createElement("div", null,
                React.createElement(Dropdown, { label: sourceLabel, onChanged: function (option) {
                        _this.setState({
                            selectedSourceId: option.key
                        });
                    }, options: this._getDataSourcesDropdownOptions(selectedSourceId), selectedKey: selectedSourceId }))));
    };
    DynamicDataWidgetSource.prototype._getSourceIdFilter = function () {
        var _a = this.props, type = _a.type, entries = _a.entries;
        var sourceIdFilter;
        if (type === PropertyPaneFieldType.DynamicField) {
            var entry = entries[0];
            var filters = entry.properties.filters;
            sourceIdFilter = filters && filters.sourceId;
        }
        else { 
            var sharedConfiguration = this.props.fieldProperties.sharedConfiguration;
            sourceIdFilter = sharedConfiguration &&
                sharedConfiguration.source &&
                sharedConfiguration.source.filters &&
                sharedConfiguration.source.filters.sourceId;
        }
        if (sourceIdFilter) {
            var dynamicDataProvider = this.props.dynamicDataProvider;
            var sources = dynamicDataProvider.getAvailableSources();
            var filteredSources = sources.filter(function (source) { return source.id === sourceIdFilter; });
            if (filteredSources) {
                this._selectedSource = filteredSources[0];
                return sourceIdFilter;
            }
        }
        return '';
    };
    DynamicDataWidgetSource.prototype._getDataSourcesDropdownOptions = function (selectedSourceId) {
        var _this = this;
        var options = [];
        var sources = this._getAvailableSources();
        this._selectedSource = undefined;
        sources.forEach(function (source) {
            options.push({ key: source.id, text: source.metadata.title });
            if (source.id === selectedSourceId) {
                _this._selectedSource = source;
            }
        });
        return options;
    };
    DynamicDataWidgetSource.prototype._getAvailableSources = function () {
        var sources = [];
        if (this.props.type === PropertyPaneFieldType.DynamicField) {
            var filters = this.props.entries[0].properties.filters;
            if (filters && filters.componentId) {
                sources = this.props.dynamicDataProvider.getAvailableSourcesByComponentId(filters.componentId);
            }
        }
        else { 
            var sharedConfiguration = this.props.fieldProperties.sharedConfiguration;
            var dynamicDataProvider = this.props.dynamicDataProvider;
            if (sharedConfiguration &&
                sharedConfiguration.source &&
                sharedConfiguration.source.filters &&
                sharedConfiguration.source.filters.componentId) {
                sources = dynamicDataProvider.getAvailableSourcesByComponentId(sharedConfiguration.source.filters.componentId);
            }
        }
        return sources.length > 0 ? sources : this.props.dynamicDataProvider.getAvailableSources();
    };
    DynamicDataWidgetSource.prototype._renderWidgetProperties = function () {
        var _this = this;
        var widgetProperties = [];
        if (this._isPropertyShared()) {
            widgetProperties.push(this._renderWidgetProperty(widgetProperties.length, this.props.entries));
        }
        else {
            this.props.entries.forEach(function (entry) {
                widgetProperties.push(_this._renderWidgetProperty(widgetProperties.length, [entry]));
            });
        }
        return (React.createElement("div", null, widgetProperties));
    };
    DynamicDataWidgetSource.prototype._isPropertyShared = function () {
        if (this.props.entries.length === 1) {
            return true;
        }
        else {
            var sharedConfiguration = this.props.fieldProperties.sharedConfiguration;
            return !!(sharedConfiguration && sharedConfiguration.depth === 2 );
        }
    };
    DynamicDataWidgetSource.prototype._renderWidgetProperty = function (counter, entries) {
        var currentKey = this.props.parentKey + '-dynamicDataWidgetProperty' + counter;
        return (React.createElement("div", { key: currentKey },
            (this.props.entries.length > 1 && !this._isPropertyShared()) &&
                React.createElement(Label, { className: Styles.entryLabel }, entries[0].properties.label),
            React.createElement(DynamicDataWidgetProperty, tslib_1.__assign({}, this.props, { parentKey: currentKey, selectedSource: this._selectedSource, entries: entries }))));
    };
    tslib_1.__decorate([
        autobind
    ], DynamicDataWidgetSource.prototype, "_getSelectedSourceId", null);
    tslib_1.__decorate([
        autobind
    ], DynamicDataWidgetSource.prototype, "_getSourceIdFilter", null);
    return DynamicDataWidgetSource;
}(React.Component));
export default DynamicDataWidgetSource;
