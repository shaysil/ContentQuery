import * as tslib_1 from "tslib";
import { Label } from '@microsoft/office-ui-fabric-react-bundle';
import { Text } from '@microsoft/sp-core-library';
import { Dropdown } from 'office-ui-fabric-react/lib/components/Dropdown/Dropdown';
import * as React from 'react';
import Strings from '../../loc/Strings.resx';
import { PropertyPaneFieldType } from '../../propertyPaneFields/propertyPaneField/IPropertyPaneField';
import Styles from '../DynamicDataWidget.module.scss';
import DynamicDataWidgetEntry from '../dynamicDataWidgetEntry/DynamicDataWidgetEntry';
var DynamicDataWidgetProperty =  (function (_super) {
    tslib_1.__extends(DynamicDataWidgetProperty, _super);
    function DynamicDataWidgetProperty(props) {
        var _this = _super.call(this, props) || this;
        _this._selectedPropertyText = '';
        _this.state = {
            selectedPropertyId: _this._getSelectedPropertyId()
        };
        return _this;
    }
    DynamicDataWidgetProperty.prototype.componentWillReceiveProps = function (newProps) {
        if (this.props.selectedSource.id !== newProps.selectedSource.id) {
            this.setState({
                selectedPropertyId: this._getPropertyIdFilter(newProps.selectedSource) || ''
            });
        }
    };
    DynamicDataWidgetProperty.prototype.render = function () {
        var propertyIdFilter = this._getPropertyIdFilter();
        return (React.createElement("div", null,
            !propertyIdFilter && this._renderPropertyDropdown(),
            this._renderWidgetEntries()));
    };
    DynamicDataWidgetProperty.prototype._renderPropertyDropdown = function () {
        var _this = this;
        var selectedPropertyId = this.state.selectedPropertyId;
        return (React.createElement(Dropdown, { label: Text.format(Strings.DynamicDataPropertiesDropdownLabel, this.props.selectedSource.metadata.title), onChanged: function (option) {
                _this.setState({
                    selectedPropertyId: option.key
                });
            }, options: this._getPropertyDropdownOptions(), selectedKey: selectedPropertyId }));
    };
    DynamicDataWidgetProperty.prototype._renderWidgetEntries = function () {
        var _this = this;
        var widgetEntries = [];
        this.props.entries.forEach(function (entry) {
            var _a = entry.properties, propertyValueDepth = _a.propertyValueDepth, label = _a.label;
            var currentKey = _this.props.parentKey + '-dynamicDataWidgetEntry' + widgetEntries.length;
            widgetEntries.push(React.createElement("div", { key: currentKey },
                _this.state.selectedPropertyId &&
                    _this.props.entries.length > 1 &&
                    (propertyValueDepth !== 0) &&
                    React.createElement(Label, { className: Styles.entryLabel }, label),
                React.createElement(DynamicDataWidgetEntry, tslib_1.__assign({}, entry, { parentKey: currentKey, selectedSource: _this.props.selectedSource, selectedPropertyText: _this._selectedPropertyText, selectedPropertyId: _this.state.selectedPropertyId, dynamicDataProvider: _this.props.dynamicDataProvider, onChange: _this.props.onChange, propertyValueDepth: propertyValueDepth }))));
        });
        return widgetEntries;
    };
    DynamicDataWidgetProperty.prototype._getPropertyIdFilter = function (selectedSource) {
        var _this = this;
        var propertyIdFilter;
        if (this.props.type === PropertyPaneFieldType.DynamicField) {
            var filters = this.props.fieldProperties.filters;
            propertyIdFilter = filters && filters.propertyId;
        }
        else {
            var sharedConfiguration = this.props.fieldProperties.sharedConfiguration;
            propertyIdFilter = sharedConfiguration &&
                sharedConfiguration.property &&
                sharedConfiguration.property.filters &&
                sharedConfiguration.property.filters.propertyId;
        }
        if (propertyIdFilter) {
            selectedSource = selectedSource || this.props.selectedSource;
            var result_1 = '';
            var propertyDefs = selectedSource.getPropertyDefinitions();
            propertyDefs.forEach(function (propertyDef) {
                if (propertyDef.id === propertyIdFilter) {
                    result_1 = propertyIdFilter;
                    _this._selectedPropertyText = propertyDef.title;
                }
            });
            propertyIdFilter = result_1;
        }
        return propertyIdFilter;
    };
    DynamicDataWidgetProperty.prototype._getPropertyDropdownOptions = function () {
        var selectedPropertyId = this.state.selectedPropertyId;
        var propertyDefinitions = this.props.selectedSource.getPropertyDefinitions();
        var options = [];
        for (var _i = 0, propertyDefinitions_1 = propertyDefinitions; _i < propertyDefinitions_1.length; _i++) {
            var propertyDef = propertyDefinitions_1[_i];
            options.push({ key: propertyDef.id, text: propertyDef.title });
            if (propertyDef.id === selectedPropertyId) {
                this._selectedPropertyText = propertyDef.title;
            }
        }
        return options;
    };
    DynamicDataWidgetProperty.prototype._getSelectedPropertyId = function () {
        var _this = this;
        var selectedSourceId = this.props.selectedSource.id;
        var source = this.props.dynamicDataProvider.tryGetSource(selectedSourceId);
        var selectedPropertyId = this._getPropertyIdFilter();
        if (!selectedPropertyId) {
            if (this.props.type === PropertyPaneFieldType.DynamicField) {
                selectedPropertyId = this.props.entries[0].value._getProperty();
            }
            else { 
                var entries = this.props.entries;
                for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                    var entry = entries_1[_i];
                    if (entries[0].value._getProperty() !== entry.value._getProperty()) {
                        selectedPropertyId = '';
                        break;
                    }
                    else {
                        selectedPropertyId = entries[0].value._getProperty();
                    }
                }
            }
        }
        selectedPropertyId = selectedPropertyId && selectedPropertyId.split(/\[|\]/)[0];
        var result = '';
        var propertyDefs = source.getPropertyDefinitions();
        propertyDefs.forEach(function (propertyDef) {
            if (propertyDef.id === selectedPropertyId) {
                result = selectedPropertyId;
                _this._selectedPropertyText = propertyDef.title;
            }
        });
        return result;
    };
    return DynamicDataWidgetProperty;
}(React.Component));
export default DynamicDataWidgetProperty;
