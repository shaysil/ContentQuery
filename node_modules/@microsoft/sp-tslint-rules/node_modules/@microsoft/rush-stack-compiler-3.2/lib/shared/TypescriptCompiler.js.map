{"version":3,"file":"TypescriptCompiler.js","sourceRoot":"","sources":["../../src/shared/TypescriptCompiler.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAG7B,2CAAwC;AACxC,2CAAwC;AACxC,mEAAgE;AAYhE;;GAEG;AACH,MAAa,kBAAmB,SAAQ,6CAAiD;IAKvF,YAAY,IAAyC,EAAE,IAAgC,EAAE,IAAwB;QAC/G,KAAK,CACH,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EACpC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAc,EAChD,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAyB,CACxC,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAS,CAC7B,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,SAAS,EACd;YACE,WAAW,EAAE,qBAAS,CAAC,qBAAqB;YAC5C,WAAW,EAAE,qBAAS,CAAC,qBAAqB;YAC5C,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;SACxC,CACF,CAAC;IACJ,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YAC5B,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,IAAI,EAAE;YACxC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;gBACvB,uBAAuB;gBACvB,MAAM,SAAS,GAA2B,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACtE,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;oBAChC,MAAM,WAAW,GAAW,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;oBACpD,IAAI,CAAC,CAAC,WAAW,EAAE;wBACjB,IAAI,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;4BACnC,sDAAsD;4BACtD,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;yBAC5C;6BAAM;4BACL,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;yBACvC;qBACF;iBACF;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AA1CD,gDA0CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { ITerminalProvider } from '@microsoft/node-core-library';\r\n\r\nimport { CmdRunner } from './CmdRunner';\r\nimport { ToolPaths } from './ToolPaths';\r\nimport { RushStackCompilerBase } from './RushStackCompilerBase';\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface ITypescriptCompilerOptions {\r\n  /**\r\n   * Option to pass custom arguments to the tsc command.\r\n   */\r\n  customArgs?: string[];\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport class TypescriptCompiler extends RushStackCompilerBase<ITypescriptCompilerOptions> {\r\n  private _cmdRunner: CmdRunner;\r\n\r\n  constructor(rootPath: string, terminalProvider: ITerminalProvider);\r\n  constructor(taskOptions: ITypescriptCompilerOptions, rootPath: string, terminalProvider: ITerminalProvider);\r\n  constructor(arg1: ITypescriptCompilerOptions | string, arg2: string | ITerminalProvider, arg3?: ITerminalProvider) {\r\n    super(\r\n      typeof arg1 === 'string' ? {} : arg1,\r\n      typeof arg2 === 'string' ? arg2 : arg1 as string,\r\n      arg3 ? arg3 : arg2 as ITerminalProvider\r\n    );\r\n    this._cmdRunner = new CmdRunner(\r\n      this._standardBuildFolders,\r\n      this._terminal,\r\n      {\r\n        packagePath: ToolPaths.typescriptPackagePath,\r\n        packageJson: ToolPaths.typescriptPackageJson,\r\n        packageBinPath: path.join('bin', 'tsc')\r\n      }\r\n    );\r\n  }\r\n\r\n  public invoke(): Promise<void> {\r\n    return this._cmdRunner.runCmd({\r\n      args: this._taskOptions.customArgs || [],\r\n      onData: (data: Buffer) => {\r\n        // Log lines separately\r\n        const dataLines: (string | undefined)[] = data.toString().split('\\n');\r\n        for (const dataLine of dataLines) {\r\n          const trimmedLine: string = (dataLine || '').trim();\r\n          if (!!trimmedLine) {\r\n            if (trimmedLine.match(/\\serror\\s/i)) {\r\n              // If the line looks like an error, log it as an error\r\n              this._terminal.writeErrorLine(trimmedLine);\r\n            } else {\r\n              this._terminal.writeLine(trimmedLine);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}