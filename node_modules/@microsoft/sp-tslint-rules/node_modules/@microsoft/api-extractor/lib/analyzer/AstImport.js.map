{"version":3,"file":"AstImport.js","sourceRoot":"","sources":["../../src/analyzer/AstImport.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAmB3D;;;GAGG;AACH,MAAa,SAAS;IAqCpB,YAAmB,OAA0B;QAC3C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,KAAK,CAAC;QAE9C,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED;;;OAGG;IACH,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,MAAM,CAAC,OAA0B;QAC7C,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO,GAAG,OAAO,CAAC,UAAU,IAAI,CAAC;SAClC;aAAM;YACL,OAAO,GAAG,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;SACtD;IACH,CAAC;CACF;AA/DD,8BA+DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { AstSymbol } from './AstSymbol';\r\n\r\n/**\r\n * Constructor parameters for AstImport\r\n *\r\n * @privateremarks\r\n * Our naming convention is to use I____Parameters for constructor options and\r\n * I____Options for general function options.  However the word \"parameters\" is\r\n * confusingly similar to the terminology for function parameters modeled by API Extractor,\r\n * so we use I____Options for both cases in this code base.\r\n */\r\nexport interface IAstImportOptions {\r\n  readonly modulePath: string;\r\n  readonly exportName: string;\r\n  readonly starImport?: boolean;\r\n}\r\n\r\n/**\r\n * For a symbol that was imported from an external package, this tracks the import\r\n * statement that was used to reach it.\r\n */\r\nexport class AstImport {\r\n  /**\r\n   * The name of the external package (and possibly module path) that this definition\r\n   * was imported from.\r\n   *\r\n   * Example: \"@microsoft/node-core-library/lib/FileSystem\"\r\n   */\r\n  public readonly modulePath: string;\r\n\r\n  /**\r\n   * If modulePath is defined, then this specifies the export name for the definition.\r\n   *\r\n   * Example: \"IBuildConfig\"\r\n   */\r\n  public readonly exportName: string;\r\n\r\n  /**\r\n   * For statements of the form `import * as x from \"y\";`, `starImport` will be true,\r\n   * and `exportName` will be the namespace identifier (e.g. `x` in this example).\r\n   */\r\n  public readonly starImport: boolean;\r\n\r\n  /**\r\n   * If this import statement refers to an API from an external package that is tracked by API Extractor\r\n   * (according to `PackageMetadataManager.isAedocSupportedFor()`), then this property will return the\r\n   * corresponding AstSymbol.  Otherwise, it is undefined.\r\n   */\r\n  public astSymbol: AstSymbol | undefined;\r\n\r\n  /**\r\n   * If modulePath and exportName are defined, then this is a dictionary key\r\n   * that combines them with a colon (\":\").\r\n   *\r\n   * Example: \"@microsoft/node-core-library/lib/FileSystem:FileSystem\"\r\n   */\r\n  public readonly key: string;\r\n\r\n  public constructor(options: IAstImportOptions) {\r\n    this.modulePath = options.modulePath;\r\n    this.exportName = options.exportName;\r\n    this.starImport = options.starImport || false;\r\n\r\n    this.key = AstImport.getKey(options);\r\n  }\r\n\r\n  /**\r\n   * Allows `AstEntity.localName` to be used as a convenient generalization of `AstSymbol.localName` and\r\n   * `AstImport.exportName`.\r\n   */\r\n  public get localName(): string {\r\n    return this.exportName;\r\n  }\r\n\r\n  /**\r\n   * Calculates the lookup key used with `AstImport.key`\r\n   */\r\n  public static getKey(options: IAstImportOptions): string {\r\n    if (options.starImport) {\r\n      return `${options.modulePath}:*`;\r\n    } else {\r\n      return `${options.modulePath}:${options.exportName}`;\r\n    }\r\n  }\r\n}\r\n"]}