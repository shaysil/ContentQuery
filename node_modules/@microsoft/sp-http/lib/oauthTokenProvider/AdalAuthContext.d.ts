import * as AuthenticationContext from 'adal-angular';
/**
 * Class that wraps the ADAL's authentication class
 * @internal
 */
export default class AdalAuthContext {
    readonly servicePrincipalId: string;
    private readonly _aadUserId;
    private _authContext;
    /**
   * This function will fire an event if the AAD error code can be resolved with a full page redirect.
   */
    private static _handleInteractionRequiredFailures;
    /**
     * Returns true if the failure is expected. Expected failures that can be resolved will fire an event.
     */
    private static _isExpectedIdTokenFetchFailure;
    /**
     * Returns true if the error can be resolved with a user interaction, such as performing Multi-Factor Authentication.
     */
    private static _isInteractionRequiredTokenRetrievalError;
    constructor(authContext: IAuthenticationContextInternal, aadUserId?: string);
    getToken(resourceEndpoint: string): Promise<string>;
    private _getIdToken;
    private _getAccessToken;
    /**
     * Returns an id token if a valid cached token is found
     */
    private _tryGetCachedIdToken;
    private _fetchIdToken;
    /**
     * Wraps the ADAL.js callback code with a promise.
     */
    private _fetchIdTokenSilent;
    /**
     * Returns an access token if a valid cached token exists
     */
    private _tryGetCachedAccessToken;
    /**
     * See the following link for details about handling conditional access policies.
     * https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-conditional-access-developer
     */
    private _fetchAccessToken;
    /**
     * Wraps the ADAL.js callback code with a promise.
     */
    private _fetchAccessTokenSilent;
    /**
     * Adal creates an iframe without the sandbox attribute.
     *  Adal assumes it's being used as a singleton but this will not work for our scenario.
     */
    private _patchAdalAuthContext;
    /**
     * Adds the hidden iframe for silent token renewal. This code is a security fix to ADAL.js's iframe
     * rendering code. IE11 doesn't support dynamically setting attributes on an iFrame element, so
     * we must patch the original implementation. Original code is in ADAL.js addAdalFrame.
     * https://github.com/AzureAD/azure-activedirectory-library-for-js/ for source code
     */
    private _addAdalFrame;
}
/**
 * Represents the exported module from the adal-angular npm package.
 * @internal
 */
export interface IAdalJsModule {
    inject: (configuration: AuthenticationContext.Options) => AuthenticationContext;
}
/**
 * Interface for interacting with internals of ADAL.js
 * @internal
 */
export interface IAuthenticationContextInternal extends AuthenticationContext {
    _loginInProgress: boolean;
    CONSTANTS: any | {
        ID_TOKEN: string;
        STORAGE: {
            ERROR: string;
            LOGIN_REQUEST: string;
            LOGIN_ERROR: string;
            NONCE_IDTOKEN: string;
            STATE_LOGIN: string;
        };
    };
    RESPONSE_TYPE: any | {
        TOKEN: string;
        ID_TOKEN_TOKEN: string;
    };
    _singletonInstance: AuthenticationContext | undefined;
    _user: AuthenticationContext.UserInfo;
    _addAdalFrame(iframeId: string): HTMLIFrameElement | undefined;
    _createUser(hash: string): AuthenticationContext.UserInfo;
    handleWindowCallback(hash?: string): void;
    _getItem(storageConstant: string): string;
    _getNavigateUrl(responseType: string, resourceEndpoint: string | undefined): string;
    _saveItem(storageConstant: string, object: string, preserve?: boolean): boolean;
    _renewToken(resource: string, callback: (message: string, token: string) => void, responseType: string): void;
    _renewIdToken(callback: (message: string, token: string) => void, responseType?: string): void;
}
