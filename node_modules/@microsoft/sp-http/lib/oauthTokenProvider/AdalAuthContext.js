import { _SPEventManager } from '@microsoft/sp-core-library';
import AadTokenProvider, { TokenAcquisitionEventArgs } from './AadTokenProvider';
import AadConstants from './AadConstants';
import { _QosMonitor } from '@microsoft/sp-diagnostics';
import strings from '../SPHttpStrings.resx';
var AdalAuthContext =  (function () {
    function AdalAuthContext(authContext, aadUserId) {
        this.servicePrincipalId = authContext.config.clientId;
        this._aadUserId = aadUserId || '';
        this._patchAdalAuthContext(authContext);
        this._authContext = authContext;
    }
    AdalAuthContext._handleInteractionRequiredFailures = function (authContext, errorMessage, resource, isFetchingAccessToken) {
        if (AdalAuthContext._isInteractionRequiredTokenRetrievalError(errorMessage)) {
            var urlNavigate = isFetchingAccessToken ?
                authContext._getNavigateUrl(authContext.RESPONSE_TYPE.TOKEN, resource) :
                authContext._getNavigateUrl(authContext.CONSTANTS.ID_TOKEN, undefined);
            urlNavigate += '&prompt=select_account';
            _SPEventManager.instance.raiseEvent(AadTokenProvider._tokenAcquisitionEventId, new TokenAcquisitionEventArgs(strings.additionalCredentialsWarning, urlNavigate));
            return true;
        }
        return false;
    };
    AdalAuthContext._isExpectedIdTokenFetchFailure = function (authContext, message) {
        if (AdalAuthContext._handleInteractionRequiredFailures(authContext, message, undefined, false) ||
            message.indexOf(AadConstants.UNMANAGED_DEVICE_ERROR_CODE) < 0) {
            return true;
        }
        return false;
    };
    AdalAuthContext._isInteractionRequiredTokenRetrievalError = function (errorMessage) {
        var errorCodes = errorMessage.match(/(AADSTS)\w+/g) || [];
        for (var _i = 0, errorCodes_1 = errorCodes; _i < errorCodes_1.length; _i++) {
            var errorCode = errorCodes_1[_i];
            if (AadConstants.RESOLVABLE_ERROR_CODES.has(errorCode)) {
                return true;
            }
        }
        return false;
    };
    AdalAuthContext.prototype.getToken = function (resourceEndpoint) {
        var _this = this;
        return this._getIdToken()
            .then(function () { return _this._getAccessToken(resourceEndpoint); });
    };
    AdalAuthContext.prototype._getIdToken = function () {
        if (this._tryGetCachedIdToken()) {
            return Promise.resolve();
        }
        else {
            return this._fetchIdToken();
        }
    };
    AdalAuthContext.prototype._getAccessToken = function (resourceEndpoint) {
        var cachedAccessToken = this._tryGetCachedAccessToken(resourceEndpoint);
        if (cachedAccessToken) {
            return Promise.resolve(cachedAccessToken);
        }
        else {
            return this._fetchAccessToken(resourceEndpoint);
        }
    };
    AdalAuthContext.prototype._tryGetCachedIdToken = function () {
        var validCachedToken;
        try {
            var cachedToken = this._authContext.getCachedToken(this.servicePrincipalId);
            if (cachedToken && this._aadUserId) {
                var user = this._authContext._createUser(cachedToken);
                if (user &&
                    user.profile &&
                    user.profile.oid === this._aadUserId &&
                    user.profile.aud === this._authContext.config.clientId) {
                    this._authContext._user = user;
                    validCachedToken = cachedToken;
                }
            }
        }
        catch (e) {
        }
        return validCachedToken;
    };
    AdalAuthContext.prototype._fetchIdToken = function () {
        var _this = this;
        var acquireIdTokenMonitor = new _QosMonitor('AadTokenProvider.AcquireIdTokenSilent');
        var acquireIdTokenFirstAttemptMonitor = new _QosMonitor('AadTokenProvider.AcquireIdTokenFirstAttempt');
        var didFirstAttemptSucceed = false;
        return this._fetchIdTokenSilent(this.servicePrincipalId, this._authContext.config.redirectUri)
            .then(function (token) {
            didFirstAttemptSucceed = true;
            _this._authContext._user = _this._authContext._createUser(token);
            acquireIdTokenFirstAttemptMonitor.writeSuccess();
        })
            .catch(function (e) {
            if (AdalAuthContext._isExpectedIdTokenFetchFailure(_this._authContext, e.message)) {
                acquireIdTokenFirstAttemptMonitor.writeExpectedFailure(e.message);
                return Promise.reject(e);
            }
            else {
                acquireIdTokenFirstAttemptMonitor.writeUnexpectedFailure(e.message);
                return _this._fetchIdTokenSilent(_this.servicePrincipalId, _this._authContext.config.redirectUri);
            }
        })
            .then(function (token) {
            if (!didFirstAttemptSucceed) {
                _this._authContext._user = _this._authContext._createUser(token);
            }
            acquireIdTokenMonitor.writeSuccess();
        })
            .catch(function (e) {
            if (AdalAuthContext._isExpectedIdTokenFetchFailure(_this._authContext, e.message)) {
                acquireIdTokenMonitor.writeExpectedFailure(e.message);
            }
            else {
                acquireIdTokenMonitor.writeUnexpectedFailure(e.message);
            }
            throw e;
        });
    };
    AdalAuthContext.prototype._fetchIdTokenSilent = function (servicePrincipalId, redirectUri) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._authContext._renewIdToken(function (message, token) {
                if (!token) {
                    reject(new Error(message));
                }
                else {
                    resolve(token);
                }
            });
        });
    };
    AdalAuthContext.prototype._tryGetCachedAccessToken = function (resourceEndpoint) {
        var cachedToken;
        try {
            cachedToken = this._authContext.getCachedToken(resourceEndpoint);
        }
        catch (e) {
        }
        return cachedToken;
    };
    AdalAuthContext.prototype._fetchAccessToken = function (resourceEndpoint) {
        var _this = this;
        var acquireAccessTokenQosMonitor = new _QosMonitor('AadTokenProvider.AcquireAccessToken');
        return this._fetchAccessTokenSilent(resourceEndpoint)
            .then(function (token) {
            acquireAccessTokenQosMonitor.writeSuccess();
            return token;
        })
            .catch(function (e) {
            if (AdalAuthContext._handleInteractionRequiredFailures(_this._authContext, e.message, resourceEndpoint, true)) {
                acquireAccessTokenQosMonitor.writeExpectedFailure(e.message);
            }
            else if (e.message.indexOf(AadConstants.APP_DID_NOT_CONSENT_ERROR_CODE) < 0 ||
                e.message.indexOf(AadConstants.UNMANAGED_DEVICE_ERROR_CODE) < 0) {
                acquireAccessTokenQosMonitor.writeExpectedFailure(e.message);
            }
            else {
                acquireAccessTokenQosMonitor.writeUnexpectedFailure(e.message);
            }
            throw e;
        });
    };
    AdalAuthContext.prototype._fetchAccessTokenSilent = function (resourceEndpoint) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._authContext.acquireToken(resourceEndpoint, function (message, token) {
                if (!token) {
                    reject(new Error(message));
                }
                else {
                    resolve(token);
                }
            });
        });
    };
    AdalAuthContext.prototype._patchAdalAuthContext = function (authContext) {
        var _this = this;
        Object.getPrototypeOf(authContext)._singletonInstance = undefined;
        authContext._addAdalFrame = function (iframeId) {
            return _this._addAdalFrame(authContext, iframeId);
        };
    };
    AdalAuthContext.prototype._addAdalFrame = function (authContext, iframeId) {
        if (typeof iframeId === 'undefined') {
            return;
        }
        authContext.info('Add adal frame to document:' + iframeId);
        var adalFrame = document.getElementById(iframeId);
        var sandboxAttributes = 'allow-same-origin allow-scripts allow-forms allow-pointer-lock';
        if (!adalFrame) {
            if (document.createElement && document.documentElement &&
                (window.opera || window.navigator.userAgent.indexOf('MSIE 5.0') === -1)) {
                var ifr = document.createElement('iframe');
                ifr.setAttribute('id', iframeId);
                ifr.setAttribute('aria-hidden', 'true');
                ifr.setAttribute('sandbox', sandboxAttributes);
                ifr.style.visibility = 'hidden';
                ifr.style.position = 'absolute';
                ifr.style.width = ifr.style.height = ifr.style.border = '0';
                adalFrame = document.getElementsByTagName('body')[0].appendChild(ifr);
            }
            else if (document.body && document.body.insertAdjacentHTML) {
                document.body.insertAdjacentHTML('beforeEnd', '<iframe sandbox="' + sandboxAttributes + '" name="' +
                    iframeId + '" id="' + iframeId + '" style="display:none"></iframe>');
            }
            if (window.frames && window.frames[iframeId]) {
                adalFrame = window.frames[iframeId];
            }
        }
        return adalFrame;
    };
    return AdalAuthContext;
}());
export default AdalAuthContext;
