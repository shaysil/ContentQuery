/**
 * SharePoint Framework support for building client-side extensions.
 *
 * @packagedocumentation
 */

import { BaseComponent } from '@microsoft/sp-component-base';
import { BaseComponentContext } from '@microsoft/sp-component-base';
import { _IComponentContextParameters } from '@microsoft/sp-component-base';
import { IDisposable } from '@microsoft/sp-core-library';
import { ServiceScope } from '@microsoft/sp-core-library';

/**
 * The base class for all client-side extensions.
 *
 * @public
 */
export declare abstract class BaseExtension<TProperties> extends BaseComponent {
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponent.context}
     */
    protected readonly context: ExtensionContext;
    private _initPromise;
    private _properties;
    /** @internal */
    constructor();
    /**
     * @internal
     */
    _init(context: ExtensionContext, propertiesJson: string | undefined): Promise<void>;
    /**
     * This method can be overriden by different extension types (e.g. app customizers) to do specific initialization.
     *
     * @internal
     */
    protected _initializeExtensionType(): void;
    /**
     * Extension properties is a JavaScript object that are passed in by the application that initializes the extension.
     *
     * @remarks
     * Properties can be used in the extension code to define configurable behaviors. The application has control over
     * what properties to provide to an instance of the extension, however the most common way would be to have it
     * stored on the server as JSON and pass it as is to the extension on initialization.
     *
     * @readonly
     */
    protected readonly properties: TProperties;
    /**
     * This event method is called when the client-side extension is first activated on the page.
     */
    protected onInit(): Promise<void>;
    private _deserializeProperties;
}

/**
 * The base class for context objects for client-side extensions.
 *
 * @public
 */
export declare class ExtensionContext extends BaseComponentContext {
    /** @internal */
    constructor(parameters: _IExtensionContextParameters);
}

/**
 * `ExtensionManager` manages a collection of extensions and provides APIs to create, dispose
 * and access its managed extensions.
 *
 * @remarks
 * Any application that needs to use extensions, should use `ExtensionManager` to create those extensions
 * by passing in their `componentId` and properties. `ExtensionManager` takes care of loading modules and
 * creating the instances for the extensions and provides APIs to manage the created extensions.
 *
 * @internal
 */
export declare class _ExtensionManager<TExtension extends BaseExtension<{}>> implements IDisposable {
    private static _logSource;
    private _serviceScope;
    private _expectedType;
    private _extensions;
    private _isDisposed;
    /**
     * Creates a new instance of `ExtensionManager`.
     *
     * @remarks
     * If you construct an instance of this class, you must dispose it by calling `ExtensionManager.dispose()`;
     * otherwise resource leaks may occur.
     *
     * @param serviceScope - The serviceScope provided by the caller application
     * @param expectedType - for validation purposes, a base class that the resulting object
     *   is expected to extend
     */
    constructor(serviceScope: ServiceScope, expectedType: Function);
    /**
     * Creates an extension instance by loading its module based on the provided componentId and then creates an instance
     * of the extension by passing in the provided properties JSON and context creator.
     *
     * @remarks
     * The provided componentId is a Guid that identifies the module containing the extension (as its default export).
     * The module loader of SharePoint Framework will load the module if its manifest is found on the page
     * (for example, if the extension is installed) and create an instace of the extension and initialize it using
     * the provided contextCreator and propertiesJson. Since this process is asynchronous, the manager returns a promise
     * that resolves once the extension instance is ready.
     *
     * The extension will be disposed by `ExtensionManager.dispose()`.
     *
     * @param componentId - the client-side component ID for the extension.
     * @param propertiesJson - a text string containing an optional JSON object.
     * @param contextCreator - a callback function that constructs an appropriate ExtensionContext
     */
    createExtension(componentId: string, propertiesJson: string | undefined, contextCreator: (extensionContextParameters: _IExtensionContextParameters) => ExtensionContext): Promise<TExtension>;
    /**
     * Disposes any extensions that were created via `createExtension()`.
     * This is performed by calling `BaseExtension.dispose()` for each extension.
     */
    dispose(): void;
    /** {@inheritDoc @microsoft/sp-core-library#IDisposable.isDisposed} */
    readonly isDisposed: boolean;
    /**
     * Disposes all extensions created using this extensions manager.
     */
    disposeExtensions(): void;
    /**
     * Creates a new extra data object the `Extension.Create` QoS monitor.
     */
    private _createQosExtraData;
}

/**
 * Constructor parameters for `ExtensionContext`.
 *
 * @internal
 */
export declare interface _IExtensionContextParameters extends _IComponentContextParameters {
}

export { }
