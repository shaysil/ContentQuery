import { Version } from '@microsoft/sp-core-library';
var LegacyThirdPartyFabricCoreLoader =  (function () {
    function LegacyThirdPartyFabricCoreLoader() {
    }
    LegacyThirdPartyFabricCoreLoader.load = function (isComponentInternal) {
        if (!isComponentInternal && !LegacyThirdPartyFabricCoreLoader.isLoaded) {
            return import(
 './chunks/legacy-third-party-fabric-core/index').then(function () {
                LegacyThirdPartyFabricCoreLoader.isLoaded = true;
                return;
            });
        }
        else {
            return Promise.resolve();
        }
    };
    LegacyThirdPartyFabricCoreLoader.forceLoad = function (manifest) {
        try {
            if (LegacyThirdPartyFabricCoreLoader._shouldLoad(manifest)) {
                return import(
 './chunks/legacy-third-party-fabric-core/index').then(function () {
                    LegacyThirdPartyFabricCoreLoader.isLoaded = true;
                    return;
                });
            }
            else {
                return Promise.resolve();
            }
        }
        catch (error) {
            return Promise.reject(error);
        }
    };
    LegacyThirdPartyFabricCoreLoader._shouldLoad = function (manifest) {
        if (manifest.isInternal || LegacyThirdPartyFabricCoreLoader.isLoaded) {
            return false;
        }
        if (manifest.loadLegacyFabricCss === undefined) {
            var resource = manifest.loaderConfig.scriptResources['@microsoft/sp-core-library'];
            if (resource && resource.version) {
                var version = Version.parse(resource.version);
                return (version.major === 1 && version.minor < 8);
            }
            else {
                return true;
            }
        }
        return manifest.loadLegacyFabricCss;
    };
    LegacyThirdPartyFabricCoreLoader.isLoaded = false;
    return LegacyThirdPartyFabricCoreLoader;
}());
export default LegacyThirdPartyFabricCoreLoader;
