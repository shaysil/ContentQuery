{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.0.18",
    "schemaVersion": 1000
  },
  "kind": "Package",
  "canonicalReference": "@microsoft/decorators",
  "docComment": "/**\n * A conservative set of decorators intended for use in both NodeJS and web browser projects.\n *\n * @remarks\n *\n * This package provides a small set of decorators that enable more rigorous specification of API contracts when using the TypeScript language. The intent is to better document expected behaviors and catch common mistakes. This package is not intended to be a general toolkit of language extensions or helpful macros.\n *\n * @packagedocumentation\n */\n",
  "name": "@microsoft/decorators",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "(override:0)",
          "docComment": "/**\n * This decorator is applied to a class's member function or property. It indicates that the definition overrides another defintion (of the same name) from the base class. The base class definition must be marked as \\@virtual. This decorator is currently used for documentation purposes only. In the future, it may be enforced at runtime.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "override"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "target"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Object"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "propertyKey"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string | symbol"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "descriptor"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "TypedPropertyDescriptor"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "propertyKey",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            },
            {
              "parameterName": "descriptor",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              }
            }
          ],
          "name": "override"
        },
        {
          "kind": "Function",
          "canonicalReference": "(sealed:0)",
          "docComment": "/**\n * This decorator is applied to a class (but NOT member function or property). It indicates that subclasses must not inherit from this class. This decorator is currently used for documentation purposes only. In the future, it may be enforced at runtime.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "sealed"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "target"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Function"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "sealed"
        },
        {
          "kind": "Function",
          "canonicalReference": "(virtual:0)",
          "docComment": "/**\n * This decorator is applied to a class's member function or property. It indicates that the definition may optionally be overridden in a child class. Conversely, if the \\@virtual decorator is NOT applied to a definition, then child classes may NOT override it. This decorator is currently used for documentation purposes only. In the future, it may be enforced at runtime.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "virtual"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "target"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Object"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "propertyKey"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string | symbol"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "descriptor"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "TypedPropertyDescriptor"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "propertyKey",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            },
            {
              "parameterName": "descriptor",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              }
            }
          ],
          "name": "virtual"
        }
      ]
    }
  ]
}
