import * as lodash from '@microsoft/sp-lodash-subset';
import { _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { Validate } from '@microsoft/sp-core-library';
import iframedPropertyPaneStyles from './IframedPropertyPane.module.scss';
import { ReservedIframeQueryParamKeys } from './ReservedIframeQueryParamKeys';
var LOG_SOURCE = _LogSource.create('IframedWebPartController');
var WEBPART_IFRAME_ID_PREFIX = 'dom-isolated-webpart';
var PROPERTYPANE_IFRAME_ID = 'dom-isolated-property-pane';
var IFRAMED_PROPERTYPANE_CONTAINER_ID = 'spIFramePropertyPaneContainer';
var IframedWebPartController =  (function () {
    function IframedWebPartController(host) {
        this._iframeSrcUrl = undefined;
        this._iframedWebparts = new Map();
        this._host = host;
        this._ppIframeElement = undefined;
        this._updateWebPartData = this._updateWebPartData.bind(this);
        this._updateWebPartDisplayMode = this._updateWebPartDisplayMode.bind(this);
        this._iframeEventListener = this._iframeEventListener.bind(this);
        window.addEventListener('message', this._iframeEventListener);
    }
    IframedWebPartController.prototype.deleteWebPart = function (instanceId) {
        Validate.isNonemptyString(instanceId, 'instanceId');
        var metadata = this._iframedWebparts.get(instanceId);
        var iframePropertyPaneElement = document.getElementById(PROPERTYPANE_IFRAME_ID);
        if (iframePropertyPaneElement && iframePropertyPaneElement.contentWindow) {
            var messageToPropertyPane = {
                instanceId: instanceId,
                action: "iframeDeleteWebPart" 
            };
            iframePropertyPaneElement.contentWindow.postMessage(messageToPropertyPane, metadata.url);
        }
        this.requestPropertyPaneAction(2 );
        this._iframedWebparts.delete(instanceId);
    };
    IframedWebPartController.prototype.getAllInstanceIds = function () {
        var instanceIds = [];
        this._iframedWebparts.forEach(function (value, key) {
            instanceIds.push(key);
        });
        return instanceIds;
    };
    IframedWebPartController.prototype.notifyContainerResize = function (instanceId) {
    };
    IframedWebPartController.prototype.startDirtyBitTimer = function (instanceId) {
    };
    IframedWebPartController.prototype.loadWebPart = function (domainUrl, pageContext, webPartManagerContext) {
        this._iframeSrcUrl = this._generateIframeSrcUrl(domainUrl, pageContext, webPartManagerContext);
        Validate.isNotNullOrUndefined(webPartManagerContext.webPartData, 'webPartData');
        var metadata = {
            origin: domainUrl,
            url: this._iframeSrcUrl,
            webPartData: webPartManagerContext.webPartData,
            webPartElementId: WEBPART_IFRAME_ID_PREFIX + "-" + webPartManagerContext.instanceId,
            displayMode: webPartManagerContext.displayMode,
            addedFromPersistedData: !!webPartManagerContext.addedFromPersistedData
        };
        if (!this._iframedWebparts.has(webPartManagerContext.instanceId)) {
            if (!webPartManagerContext.addedFromPersistedData) {
                metadata.webPartData.dataVersion = '1.0';
                metadata.webPartData.instanceId = webPartManagerContext.instanceId;
            }
            this._iframedWebparts.set(webPartManagerContext.instanceId, metadata);
        }
        webPartManagerContext.domElement.innerHTML = "<div>\n      <iframe\n        id=" + metadata.webPartElementId + "\n        src=" + this._addFilteredQueryParamsFromHostPage(metadata.url) + "\n        class=" + iframedPropertyPaneStyles.iframeWebPart + "\n        scrolling=\"no\"\n      ></iframe>\n    </div>";
    };
    IframedWebPartController.prototype.requestPropertyPaneAction = function (propertyPaneState, instanceId) {
        Validate.isNotNullOrUndefined(propertyPaneState, 'propertyPaneState');
        switch (propertyPaneState) {
            case 1 :
                Validate.isNonemptyString(instanceId, 'instanceId');
                if (!this._ppIframeElement) { 
                    this._createPropertyPaneElement(instanceId);
                }
                this._showPropertyPane(instanceId);
                break;
            case 2 :
                if (this._ppIframeElement) {
                    this._hidePropertyPane(instanceId);
                }
                break;
            case 3 :
                Validate.isNonemptyString(instanceId, 'instanceId');
                if (this._iframedPropertyPaneContainer &&
                    this._iframedPropertyPaneContainer.classList.contains(iframedPropertyPaneStyles.showPane)) {
                    this._hidePropertyPane(instanceId);
                }
                else {
                    if (!this._iframedPropertyPaneContainer) {
                        this._createPropertyPaneElement(instanceId);
                    }
                    this._showPropertyPane(instanceId);
                }
                break;
            case 4 :
                break;
        }
    };
    IframedWebPartController.prototype.serialize = function (instanceId) {
        Validate.isNonemptyString(instanceId, 'instanceId');
        var metadata = this._iframedWebparts.get(instanceId);
        return metadata.webPartData;
    };
    IframedWebPartController.prototype.setDisplayMode = function (displayMode, instanceId) {
        Validate.isNotNullOrUndefined(displayMode, 'displayMode');
        Validate.isNonemptyString(instanceId, 'instanceId');
        var messageToRenderedWebPart = {
            instanceId: instanceId,
            action: "iframeSetDisplayMode" ,
            displayMode: displayMode
        };
        var metadata = this._iframedWebparts.get(instanceId);
        metadata.displayMode = displayMode;
        var iframeWebPartElement = document.getElementById(metadata.webPartElementId);
        if (iframeWebPartElement && iframeWebPartElement.contentWindow) {
            iframeWebPartElement.contentWindow.postMessage(messageToRenderedWebPart, metadata.url);
        }
    };
    IframedWebPartController.prototype._generateIframeSrcUrl = function (domainUrl, pageContext, webPartManagerContext) {
        var iframeSrcUrl = domainUrl + "/_layouts/15/webpart.aspx?";
        if (webPartManagerContext.addedFromPersistedData) {
            iframeSrcUrl += ReservedIframeQueryParamKeys.List + "=%7B";
            iframeSrcUrl += pageContext.list.id;
            iframeSrcUrl += "%7D&" + ReservedIframeQueryParamKeys.Id + "=";
            iframeSrcUrl += pageContext.listItem.id;
            iframeSrcUrl += "&" + ReservedIframeQueryParamKeys.WebPartInstanceId + "=";
            iframeSrcUrl += webPartManagerContext.instanceId;
        }
        else {
            iframeSrcUrl += ReservedIframeQueryParamKeys.NewWebPartInstanceId + "=";
            iframeSrcUrl += webPartManagerContext.instanceId;
        }
        iframeSrcUrl += "&" + ReservedIframeQueryParamKeys.ParentWindowOrigin + "=";
        iframeSrcUrl += window.location.origin;
        iframeSrcUrl += "&" + ReservedIframeQueryParamKeys.ComponentId + "=";
        iframeSrcUrl += webPartManagerContext.manifest.id;
        iframeSrcUrl += "&" + ReservedIframeQueryParamKeys.HostedInCanvas;
        return iframeSrcUrl;
    };
    IframedWebPartController.prototype._createPropertyPaneElement = function (instanceId) {
        if (!this._pageContentElement) {
            this._pageContentElement = document.getElementById('spPageChromeAppDiv');
        }
        if (!this._iframedPropertyPaneContainer) {
            this._iframedPropertyPaneContainer = document.createElement('div');
            this._iframedPropertyPaneContainer.id = IFRAMED_PROPERTYPANE_CONTAINER_ID;
            this._iframedPropertyPaneContainer.className = iframedPropertyPaneStyles.spIFramePropertyPaneContainer;
        }
        var metadata = this._iframedWebparts.get(instanceId);
        this._iframeSrcUrl = metadata.url;
        this._iframeSrcUrl += "&" + ReservedIframeQueryParamKeys.OpenPropertyPane + "=true";
        this._iframedPropertyPaneContainer.innerHTML = "\n      <iframe\n        id=" + PROPERTYPANE_IFRAME_ID + "\n        src=" + this._addFilteredQueryParamsFromHostPage(this._iframeSrcUrl) + "\n        class=" + iframedPropertyPaneStyles.iframePropertyPane + "\n      ></iframe>";
        var parent = this._pageContentElement.parentElement;
        parent.appendChild(this._iframedPropertyPaneContainer);
        this._ppIframeElement = document.getElementById(PROPERTYPANE_IFRAME_ID);
    };
    IframedWebPartController.prototype._iframeEventListener = function (event) {
        if (this._iframedWebparts.has(event.data.instanceId)) {
            var metadata = this._iframedWebparts.get(event.data.instanceId);
            var currentOrigin = new URL(event.origin).origin;
            if (currentOrigin.toLowerCase() === event.origin.toLowerCase()) {
                var eventData = event.data;
                Validate.isNotNullOrUndefined(eventData.action, 'action');
                switch (eventData.action) {
                    case "iframeRequestDisplayMode" :
                        this._updateWebPartDisplayMode(eventData.instanceId);
                        break;
                    case "iframeSetDimensions" :
                        Validate.isNotNullOrUndefined(eventData.height, 'height');
                        var iframeWebPartElement = document.getElementById(metadata.webPartElementId);
                        Validate.isNotNullOrUndefined(iframeWebPartElement, 'iframedWebPartElement');
                        iframeWebPartElement.style.height = eventData.height + "px";
                        break;
                    case "iframeUpdateWebPartData" :
                        Validate.isNotNullOrUndefined(eventData.webPartData, 'webPartData');
                        this._updateWebPartData(eventData.instanceId, eventData.webPartData, "iframeUpdateWebPartData" );
                        break;
                    case "iframeUpdatePropertyPaneData" :
                        Validate.isNotNullOrUndefined(eventData.webPartData, 'webPartData');
                        this._updateWebPartData(eventData.instanceId, eventData.webPartData, "iframeUpdatePropertyPaneData" );
                        break;
                    case "iframePropertyPaneLifeCycle" :
                        switch (eventData.propertyPaneLifeCycleEvent) {
                            case 4 :
                                this._hidePropertyPane(event.data.instanceId);
                        }
                        break;
                    case "webPartRenderedInPropertyPaneIframe" :
                        var data = {
                            instanceId: event.data.instanceId,
                            action: "iframeRequestPropertyPaneAction" ,
                            propertyPaneAction: 5 ,
                            webPartData: metadata.webPartData
                        };
                        this._ppIframeElement.contentWindow.postMessage(data, metadata.url);
                        break;
                    default:
                        break;
                }
            }
        }
    };
    IframedWebPartController.prototype._updateWebPartDisplayMode = function (instanceId) {
        var metadata = this._iframedWebparts.get(instanceId);
        var messageToIframe = {
            instanceId: instanceId,
            displayMode: metadata.displayMode,
            action: "iframeSetDisplayMode" 
        };
        var iframeWebPartElement = document.getElementById(metadata.webPartElementId);
        if (iframeWebPartElement && iframeWebPartElement.contentWindow) {
            iframeWebPartElement.contentWindow.postMessage(messageToIframe, metadata.url);
        }
    };
    IframedWebPartController.prototype._updateWebPartData = function (instanceId, webPartData, action) {
        var metadata = this._iframedWebparts.get(instanceId);
        if (!lodash.isEqual(webPartData, metadata.webPartData)) {
            metadata.webPartData = webPartData;
            this._iframedWebparts.set(instanceId, metadata);
            this._host.setDirty(instanceId);
            var message = {
                instanceId: instanceId,
                webPartData: webPartData,
                action: "iframeSetWebPartData" 
            };
            switch (action) {
                case "iframeUpdatePropertyPaneData" :
                    var iframePropertyPaneElement = document.getElementById(PROPERTYPANE_IFRAME_ID);
                    if (iframePropertyPaneElement && iframePropertyPaneElement.contentWindow) {
                        iframePropertyPaneElement.contentWindow.postMessage(message, metadata.url);
                    }
                    break;
                case "iframeUpdateWebPartData" :
                    var iframeWebPartElement = document.getElementById(metadata.webPartElementId);
                    if (iframeWebPartElement && iframeWebPartElement.contentWindow) {
                        iframeWebPartElement.contentWindow.postMessage(message, metadata.url);
                    }
                    break;
                default:
                    _TraceLogger.logError(LOG_SOURCE, new Error('Invalid parameter "action"'));
                    break;
            }
        }
    };
    IframedWebPartController.prototype._hidePropertyPane = function (webPartInstanceId) {
        if (this._iframedPropertyPaneContainer) {
            if (webPartInstanceId) {
                var eventData = {
                    instanceId: webPartInstanceId,
                    action: "iframeRequestPropertyPaneAction" ,
                    propertyPaneAction: 2 
                };
                var metadata = this._iframedWebparts.get(webPartInstanceId);
                if (this._ppIframeElement && this._ppIframeElement.contentWindow) {
                    this._ppIframeElement.contentWindow.postMessage(eventData, metadata.url);
                }
            }
            this._iframedPropertyPaneContainer.classList.remove(iframedPropertyPaneStyles.showPane);
            this._iframedPropertyPaneContainer.classList.add(iframedPropertyPaneStyles.hidePane);
            this._pageContentElement.classList.remove(iframedPropertyPaneStyles.shrinkContent);
        }
    };
    IframedWebPartController.prototype._showPropertyPane = function (webPartInstanceId) {
        var _this = this;
        if (webPartInstanceId && this._iframedWebparts.has(webPartInstanceId)) {
            var metadata_1 = this._iframedWebparts.get(webPartInstanceId);
            this._ppIframeElement.src = metadata_1.url + "&openPropertyPane=true";
            var eventData_1 = {
                instanceId: webPartInstanceId,
                action: "iframeRequestPropertyPaneAction" ,
                propertyPaneAction: 1 
            };
            if (this._ppIframeElement &&
                this._ppIframeElement.contentWindow &&
                this._ppIframeElement.contentDocument) {
                this._ppIframeElement.contentDocument.onload = (function () {
                    _this._ppIframeElement.contentWindow.postMessage(eventData_1, metadata_1.url);
                }).bind(this);
            }
        }
        this._iframedPropertyPaneContainer.classList.add(iframedPropertyPaneStyles.showPane);
        this._iframedPropertyPaneContainer.classList.remove(iframedPropertyPaneStyles.hidePane);
        this._pageContentElement.classList.add(iframedPropertyPaneStyles.shrinkContent);
    };
    IframedWebPartController.prototype._addFilteredQueryParamsFromHostPage = function (url) {
        var reservedKeys = Object
            .keys(ReservedIframeQueryParamKeys)
            .map(function (key) { return ReservedIframeQueryParamKeys[key]; });
        var searchParams = new URL(window.location.href).searchParams;
        for (var _i = 0, reservedKeys_1 = reservedKeys; _i < reservedKeys_1.length; _i++) {
            var param = reservedKeys_1[_i];
            if (searchParams.has(param)) {
                searchParams.delete(param);
            }
        }
        return url + "&" + searchParams.toString();
    };
    return IframedWebPartController;
}());
export default IframedWebPartController;
