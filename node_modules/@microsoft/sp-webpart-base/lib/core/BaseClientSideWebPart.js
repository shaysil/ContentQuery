'use strict';
import * as tslib_1 from "tslib";
import { _PerformanceLogger } from '@ms/sp-telemetry';
import { _EngagementLogger, _LogEntry, _LogSource, _LogType, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _SPKillSwitch, DisplayMode, Environment, Guid, Text } from '@microsoft/sp-core-library';
import { SPWebPartError, SPWebPartErrorCode } from './error/SPWebPartError';
import ClassicPageUtils from './classicPages/ClassicPageUtils';
import ViewportLoader from './ViewportLoader';
import BaseWebPart from './BaseWebPart';
import KillSwitches from './../common/KillSwitches';
import strings from './loc/Strings.resx';
import baseStyles from './styles/cswp-base.module.scss';
var BaseClientSideWebPart =  (function (_super) {
    tslib_1.__extends(BaseClientSideWebPart, _super);
    function BaseClientSideWebPart() {
        var _this = _super.call(this) || this;
        _this._logSource = _LogSource.create('BaseClientSideWebPart');
        _this._internalIsInViewport = false;
        _this._asyncRenderQosMonitor = new _QosMonitor("WebPartAsyncRender");
        if (_this.constructor['name'] === 'BaseClientSideWebPart') { 
            throw SPWebPartError.create(SPWebPartErrorCode.BaseConstructError);
        }
        _this._firstTimeRenderPromises = [];
        return _this;
    }
    Object.defineProperty(BaseClientSideWebPart.prototype, "domElement", {
        get: function () { return this.context.domElement; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "width", {
        get: function () {
            if (this._width === undefined) {
                var width = window.getComputedStyle(this.domElement).width;
                this._width = width ? parseFloat(width) : 0;
            }
            return this._width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedOnce", {
        get: function () { return this._renderedOnce; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedFromPersistedData", {
        get: function () { return this._renderedFromPersistedData; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "canOpenPopupOnRender", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "isRenderAsync", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    BaseClientSideWebPart.prototype._internalOnAfterResize = function () {
        this._width = undefined;
        this.onAfterResize(this.width);
    };
    BaseClientSideWebPart.prototype._calculateMinimumHeight = function () {
        if (this.context && this.context.manifest && this.context.manifest.isInternal) {
            _TraceLogger.logVerbose(this._logSource, "Web part " + this.context.webPartTag + " should override _calculateMinimumHeight()");
        }
        return undefined;
    };
    BaseClientSideWebPart.prototype.renderCompleted = function () {
        this._renderCompleted();
    };
    BaseClientSideWebPart.prototype.onDisplayModeChanged = function (oldDisplayMode) {
        var _this = this;
        _super.prototype.onDisplayModeChanged.call(this, oldDisplayMode);
        if (oldDisplayMode === this.displayMode) {
            return;
        }
        if (!_SPKillSwitch.isActivated(Guid.parse('222961df-4439-412b-9e41-2e659ae18ab6'), '5/11/2018', 'FirstRenderPromises')) {
            Promise.all(this._firstTimeRenderPromises).then(function () { _this._renderWithAccessibleTitle(); });
        }
        else {
            this._renderWithAccessibleTitle();
        }
    };
    BaseClientSideWebPart.prototype.onDispose = function () {
        if (!this.context.host.isViewportLoadingDisabled && !this._internalIsInViewport) {
            ViewportLoader.instance.unregister(this);
        }
    };
    BaseClientSideWebPart.prototype.onAfterResize = function (newWidth) {
    };
    BaseClientSideWebPart.prototype.renderError = function (error) {
        this.context.statusRenderer.clearLoadingIndicator(this.domElement);
        this.context.statusRenderer.renderError(this.domElement, error);
        _TraceLogger.logError(this._logSource, error);
    };
    BaseClientSideWebPart.prototype.clearError = function () {
        this.context.statusRenderer.clearError(this.domElement);
    };
    BaseClientSideWebPart.prototype._refresh = function () {
        this._renderWithAccessibleTitle();
    };
    BaseClientSideWebPart.prototype._dynamicPropertyRefresh = function () {
        if (this.renderedOnce) {
            this.render();
        }
    };
    BaseClientSideWebPart.prototype._internalSetDisplayMode = function (newDisplayMode) {
        if (this.displayMode !== newDisplayMode) {
            this._width = undefined;
        }
        _super.prototype._internalSetDisplayMode.call(this, newDisplayMode);
    };
    BaseClientSideWebPart.prototype._internalInitialize = function (webPartContext, addedFromPersistedData, mode) {
        _super.prototype._internalInitialize.call(this, webPartContext, addedFromPersistedData, mode);
        this._renderedOnce = false;
        this['__type'] = 'BaseClientSideWebPart'; 
        this.render = this.render.bind(this);
        this.onDispose = this.onDispose.bind(this);
        this.renderError = this.renderError.bind(this);
        this.clearError = this.clearError.bind(this);
        this.renderCompleted = this.renderCompleted.bind(this);
    };
    BaseClientSideWebPart.prototype._internalFirstTimeRender = function (scrollableParent, qosMonitor) {
        var _this = this;
        if (this._renderPromiseResolver) {
            throw SPWebPartError.create(SPWebPartErrorCode.FirstTimeRenderCalledMoreThanOnce, this.context.webPartTag);
        }
        _TraceLogger.logVerboseData({
            source: this._logSource,
            message: Text.format(strings.StartedFirstTimeRender, this.context.webPartTag),
            serviceScope: this.context.serviceScope
        });
        return new Promise(function (resolve, reject) {
            if (!_this.properties && qosMonitor) {
                qosMonitor.writeUnexpectedFailure('PropertyBagNull');
                throw SPWebPartError.create(SPWebPartErrorCode.PropertyBagNull, _this.context.webPartTag);
            }
            var minHeight = _this._calculateMinimumHeight();
            if (minHeight) {
                _this.domElement.style.minHeight = minHeight + "px";
            }
            _this._renderPromiseResolver = resolve;
            _this._renderPromiseRejecter = reject;
            if (!_this.context.host.isViewportLoadingDisabled) {
                _PerformanceLogger.markComponent(_this.context.webPartTag, 'loadingDelayed');
                _this._internalDelayedRender(scrollableParent);
            }
            else {
                _this._internalRenderInViewPort();
            }
        });
    };
    BaseClientSideWebPart.prototype._internalDelayedRender = function (scrollableParent) {
        ViewportLoader.instance.register(this, scrollableParent);
        if (!this._internalIsInViewport) {
            _TraceLogger.logVerboseData({
                source: this._logSource,
                message: "Web part " + this.context.webPartTag + " is not in initial viewport, rendering delayed.",
                serviceScope: this.context.serviceScope
            });
        }
    };
    BaseClientSideWebPart.prototype._internalRenderInViewPort = function () {
        var _this = this;
        if (!this.context.host.isViewportLoadingDisabled) {
            _PerformanceLogger.markComponent(this.context.webPartTag, 'inViewportLoading');
            _TraceLogger.logVerboseData({
                source: this._logSource,
                message: "Actually started first time render for web part " + this.context.webPartTag + ".",
                serviceScope: this.context.serviceScope
            });
        }
        if (!this._renderPromiseResolver || !this._renderPromiseRejecter) {
            throw SPWebPartError.create(SPWebPartErrorCode.RenderPromiseUndefined, this.context.webPartTag);
        }
        var initPromise = this.onInit();
        if (!initPromise) {
            var error = SPWebPartError.create(SPWebPartErrorCode.OnInitReturnedNullPromise, this.context.webPartTag);
            this._renderPromiseRejecter(error);
            this._clearRenderPromises();
            return;
        }
        this._firstTimeRenderPromises.push(initPromise);
        initPromise
            .then(function () { return _this._yieldToEventLoop(); })
            .then(function () {
            _TraceLogger.logVerboseData({
                source: _this._logSource,
                message: Text.format(strings.OnInitCompleted, _this.context.webPartTag),
                serviceScope: _this.context.serviceScope
            });
            _PerformanceLogger.markComponent(_this.context.webPartTag, 'init');
            var getDataPromise = Promise.resolve();
            getDataPromise = _this._internalGetData();
            if (!getDataPromise) {
                throw SPWebPartError.create(SPWebPartErrorCode.GetDataReturnedNullPromise, _this.context.webPartTag);
            }
            _this._firstTimeRenderPromises.push(getDataPromise);
            getDataPromise
                .then(function () { return _this._yieldToEventLoop(); })
                .then(function () {
                _PerformanceLogger.markComponent(_this.context.webPartTag, 'getDataComplete');
                _this.context.statusRenderer.clearLoadingIndicator(_this.domElement);
                _this._renderWithAccessibleTitle();
                _PerformanceLogger.markComponent(_this.context.webPartTag, 'syncRender');
                if (!_this.isRenderAsync) {
                    _this._tryToLogLoadRenderDone();
                    _this._resolveOnRenderPromise();
                }
                else {
                    _this._startAsyncRenderGuardTimer();
                }
            });
        }).catch(function (e) {
            if (_this._renderPromiseRejecter) {
                _this._renderPromiseRejecter(e);
                _this._clearRenderPromises();
            }
        });
    };
    BaseClientSideWebPart.prototype._renderWithAccessibleTitle = function () {
        _PerformanceLogger.devMark("webpart(" + this.context.webPartTag + ")._renderWithAccessibleTitle");
        this.render();
        if (this.displayMode === DisplayMode.Edit) {
            var accessibleContext = this.accessibleTitle || this._getDefaultAccessibleTitle();
            if (accessibleContext) {
                var contextualLabelId = "cswpAccessibleLabelContextual_" + this.context.instanceId;
                var accessibleDiv = this.domElement.querySelector("#" + contextualLabelId);
                var isNewLabelElement = !accessibleDiv;
                if (isNewLabelElement) {
                    accessibleDiv = document.createElement('div');
                    accessibleDiv.id = contextualLabelId;
                    accessibleDiv.className = baseStyles.screenReaderOnly;
                    accessibleDiv.setAttribute('aria-hidden', 'true');
                }
                accessibleDiv.textContent = accessibleContext;
                if (isNewLabelElement) {
                    this.domElement.appendChild(accessibleDiv);
                }
            }
            ClassicPageUtils.disableAutomaticPostbacks(this.domElement, Environment.type);
        }
        this.domElement.style.minHeight = null; 
    };
    BaseClientSideWebPart.prototype._startAsyncRenderGuardTimer = function () {
        var _this = this;
        this._clearAsyncRenderGuardTimer();
        this._asyncRenderGuardTimer = window.setTimeout(function () {
            _this._asyncRenderTimeout();
        }, 25000);
    };
    BaseClientSideWebPart.prototype._renderCompleted = function () {
        if (this._asyncRenderGuardTimer) {
            this._tryToLogLoadRenderDone();
            this._clearAsyncRenderGuardTimer();
            this._asyncRenderQosMonitor.writeSuccess({
                'alias': this.context.manifest.alias,
                'webPartId': this.context.manifest.id
            });
            this._resolveOnRenderPromise();
        }
    };
    BaseClientSideWebPart.prototype._asyncRenderTimeout = function () {
        if (this._asyncRenderGuardTimer) {
            this._clearAsyncRenderGuardTimer();
            var error = SPWebPartError.create(SPWebPartErrorCode.RenderCompletedCallNotCalled, this.context.webPartTag);
            _TraceLogger.logErrorData({
                source: this._logSource,
                error: error,
                serviceScope: this.context.serviceScope
            });
            this._asyncRenderQosMonitor.writeUnexpectedFailure('Timeout', error, {
                'alias': this.context.manifest.alias,
                'webPartId': this.context.manifest.id,
                'instanceId': this.instanceId
            });
            this._resolveOnRenderPromise();
        }
    };
    BaseClientSideWebPart.prototype._clearAsyncRenderGuardTimer = function () {
        if (this._asyncRenderGuardTimer) {
            window.clearTimeout(this._asyncRenderGuardTimer);
            this._asyncRenderGuardTimer = undefined;
        }
    };
    BaseClientSideWebPart.prototype._resolveOnRenderPromise = function () {
        this._renderedOnce = true;
        var message = Text.format(this.isRenderAsync ? strings.CompletedAsyncRender : strings.CompletedSyncRender, this.context.webPartTag);
        _TraceLogger.logVerboseData({
            source: this._logSource,
            message: message,
            serviceScope: this.context.serviceScope
        });
        _PerformanceLogger.devMark("webpart(" + this.context.webPartTag + ").complete");
        if (this._renderPromiseResolver) {
            this._renderPromiseResolver();
        }
        this._clearRenderPromises();
    };
    BaseClientSideWebPart.prototype._clearRenderPromises = function () {
        this._renderPromiseResolver = undefined;
        this._renderPromiseRejecter = undefined;
        this.domElement.style.minHeight = null; 
    };
    BaseClientSideWebPart.prototype._tryToLogLoadRenderDone = function () {
        if (!KillSwitches.isLogWebPartLoadRenderDoneKillSwitchActivated() && !this._renderedOnce) {
            var logEntry = new _LogEntry('BaseClientSideWebPart', 'RenderDone', _LogType.Event, {
                alias: "WebPart." + this.manifest.alias + "." + this.manifest.id,
                isInternal: (!!this.manifest.isInternal).toString(),
                displayMode: String(this.displayMode),
                isFirstRender: (!this._renderedFromPersistedData).toString(),
                isAsyncRender: this.isRenderAsync.toString()
            });
            _EngagementLogger.logEventWithLogEntry(logEntry);
        }
    };
    BaseClientSideWebPart.prototype._isSPDPaintStarvationFixKillSwitchActivated = function () {
        return _SPKillSwitch.isActivated(Guid.parse('c63a9c71-8035-47c6-b57b-09d203db6b6a'), '01/24/2019', 'Fix paint starvation problem for SPD App');
    };
    BaseClientSideWebPart.prototype._yieldToEventLoop = function (arg) {
        if (!this._isSPDPaintStarvationFixKillSwitchActivated() &&
            navigator.userAgent.indexOf('SharePointDesktop') !== -1) {
            _TraceLogger.logVerbose(this._logSource, 'yielding execution to event loop');
            return new Promise(function (resolve) { return setTimeout(function () { return resolve(arg); }, 0); });
        }
        else {
            return Promise.resolve(arg);
        }
    };
    return BaseClientSideWebPart;
}(BaseWebPart));
export default BaseClientSideWebPart;
