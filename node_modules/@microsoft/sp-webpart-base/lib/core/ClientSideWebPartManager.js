'use strict';
import * as tslib_1 from "tslib";
import * as loadThemedStyles from '@ms/sp-load-themed-styles';
import * as lodash from '@microsoft/sp-lodash-subset';
import { SPComponentLoader } from '@microsoft/sp-loader';
import { SPHttpClient } from '@microsoft/sp-http';
import { _PageMetricsLogger, _PerformanceLogger } from '@ms/sp-telemetry';
import { _EngagementLogger, _LogEntry, _LogSource, _LogType, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _ComponentBaseKillSwitches, _LegacyThirdPartyFabricCoreLoader } from '@microsoft/sp-component-base';
import { _SPEventManager, _SPFlight, DisplayMode, Environment, EnvironmentType, SPEvent, Guid, Text, UrlQueryParameterCollection, UrlUtilities, Validate } from '@microsoft/sp-core-library';
import { PageContext } from '@microsoft/sp-page-context';
import BaseClientSideWebPart from './BaseClientSideWebPart';
import ClientSideWebPartStatusRenderer from './ClientSideWebPartStatusRenderer';
import { executeWithoutFailing } from '../utils/ExecuteWithoutFailing';
import { WebPartIsolationLevel } from './IWebPartData';
import { SPWebPartError, SPWebPartErrorCode } from './error/SPWebPartError';
import WebPartContext from './WebPartContext';
import ClassicPageUtils from './classicPages/ClassicPageUtils';
import ViewportLoader from './ViewportLoader';
import WebPartMetrics from './WebPartMetrics';
import strings from './loc/Strings.resx';
import IframedWebPartControllerLoader from './loaders/IframedWebPartControllerLoader';
import PropertyPaneLoader from '../PropertyPaneLoader';
var THUMBNAIL_MAX_URL_LENGTH = 255; 
var SPPPLAT_IFRAMED_WEBPART_CONTROLLER_FLIGHT_ID = 1147;
var ClientSideWebPartManager =  (function () {
    function ClientSideWebPartManager(host) {
        this._webparts = new Map();
        this._logSource = _LogSource.create('ClientSideWebPartManager');
        this._loadWebPartRequests = 0;
        this._statusRenderer = new ClientSideWebPartStatusRenderer();
        this._iframedWebpartInstanceIds = new Set();
        this._propertyPaneConsumerQueue = new Map();
        this._webPartRenderedCount = 0;
        this._displayMode = DisplayMode.Read;
        Validate.isNotNullOrUndefined(host, 'host');
        this._host = host;
        this._pageContext = host.serviceScope.consume(PageContext.serviceKey);
        this._onContainerResize = this._onContainerResize.bind(this);
        this._onPropertyPaneNotifications = this._onPropertyPaneNotifications.bind(this);
        this.requestPropertyPaneAction = this.requestPropertyPaneAction.bind(this);
        this.isPropertyPaneRenderedByWebPart = this.isPropertyPaneRenderedByWebPart.bind(this);
        this.isPropertyPaneOpen = this.isPropertyPaneOpen.bind(this);
        this._instantiateWebPart = this._instantiateWebPart.bind(this);
        this._handleErrorLoadingWebpart = this._handleErrorLoadingWebpart.bind(this);
        this._handleModulePromiseRejection = this._handleModulePromiseRejection.bind(this);
        this._onFirstTimeWebpartRender = this._onFirstTimeWebpartRender.bind(this);
        this._getViewportRenderedEndTime = this._getViewportRenderedEndTime.bind(this);
        this._onAllWebpartsAdded = this._onAllWebpartsAdded.bind(this);
        if (ClientSideWebPartManager._webPartManagerList.length === 0) {
            this._initialzeOnResizeEventHandler();
        }
        ClientSideWebPartManager._webPartManagerList.push(this);
    }
    ClientSideWebPartManager._addPerfProperty = function (key, value, addToExistingValue) {
        if (addToExistingValue === void 0) { addToExistingValue = false; }
        if (addToExistingValue) {
            var previousValue = _PerformanceLogger.getPerformanceProperty(key);
            if (previousValue && !isNaN(previousValue)) {
                value = value + previousValue;
            }
        }
        _PerformanceLogger.setPerformanceProperty(key, value);
    };
    Object.defineProperty(ClientSideWebPartManager, "isMaintenanceMode", {
        get: function () {
            var urlParams = new UrlQueryParameterCollection(window.location.href);
            return urlParams.getValue('maintenanceMode') === 'true';
        },
        enumerable: true,
        configurable: true
    });
    ClientSideWebPartManager.prototype.loadWebPart = function (context) {
        var _this = this;
        this._loadWebPartRequests++;
        var instanceRequestCount = this._loadWebPartRequests;
        var loadModulePromise = undefined;
        var loadWebPartPromise = new Promise(function (resolve, reject) {
            _this._validateInput(context);
            if (_SPFlight.isEnabled(SPPPLAT_IFRAMED_WEBPART_CONTROLLER_FLIGHT_ID) &&
                context.webpartLoadExtraLogInfo.pageLayoutType &&
                context.webpartLoadExtraLogInfo.pageLayoutType !== 'MinimalWebPartContainer' &&
                (context.manifest.isolationLevel === WebPartIsolationLevel.DomIsolation ||
                    !!context.manifest.isolatedDomain)) {
                _this._iframedWebpartInstanceIds.add(context.instanceId);
                var domainUrl_1 = _this._ensureUrl(context.manifest.isolatedDomain, _this._pageContext.site.absoluteUrl);
                return IframedWebPartControllerLoader().then(function (iframedWebPartControllerModule) {
                    if (!_this._iframedWebPartController) {
                        _this._iframedWebPartController = new iframedWebPartControllerModule(_this._host);
                    }
                    resolve(_this._iframedWebPartController.loadWebPart(domainUrl_1, _this._pageContext, context));
                }).catch(function (error) {
                    reject(error);
                });
            }
            else {
                var qosMonitor_1 = _this._createLoadQosMonitor(context.manifest);
                var webPartTag_1 = _this._createWebPartTag(context.manifest, context.instanceId);
                _TraceLogger.logVerboseData({
                    source: _this._logSource,
                    message: Text.format(strings.LoadWebpartCalled, _this._loadWebPartRequests, context.totalWebparts, context.manifest.alias + "." + context.instanceId),
                    serviceScope: _this._host.serviceScope
                });
                _PerformanceLogger.devMark("ClientSideWebPartManager.loadWebPart(" + webPartTag_1 + ").start");
                if (context.displayMode === undefined) {
                    context.displayMode = DisplayMode.Read;
                }
                _this._displayMode = context.displayMode;
                _PageMetricsLogger.recordMetric(WebPartMetrics.webParts);
                var webpartLoadExtraData = context.webpartLoadExtraLogInfo;
                webpartLoadExtraData.alias = _this._createWebPartTag(context.manifest, context.manifest.id);
                var logEntry = new _LogEntry('ClientSideWebPartManager', 'WebPartLoad', _LogType.Event, webpartLoadExtraData);
                _EngagementLogger.logEventWithLogEntry(logEntry);
                if (!_this._validateManifest(context.manifest, context.displayMode, webPartTag_1)) {
                    var error = SPWebPartError.create(SPWebPartErrorCode.ManifestInvalid, webPartTag_1);
                    _this.renderError(context.domElement, error);
                    reject(error);
                }
                var manifest_1 = context.manifest; 
                var instanceId_1 = context.instanceId;
                var domElement_1 = context.domElement;
                var title = context.webPartData && context.webPartData.title
                    ? context.webPartData.title
                    : (manifest_1.title && manifest_1.title.default 
                        ? manifest_1.title.default 
                        : manifest_1.preconfiguredEntries[0].title.default);
                if (manifest_1.isInternal && _this._statusRenderer._displayLoadingIndicator) {
                    _this._statusRenderer._displayLoadingIndicator(domElement_1, title, webPartTag_1);
                }
                else {
                    _this._statusRenderer.displayLoadingIndicator(domElement_1, title);
                }
                _PerformanceLogger.startMarkForComponent(webPartTag_1);
                loadModulePromise = _this._loadWebPartModules(context, webPartTag_1, qosMonitor_1);
                loadModulePromise.then(function (baseComponent) {
                    _PerformanceLogger.devMark("ClientSideWebPartManager.loadWebPart(" + webPartTag_1 + ").end");
                    try {
                        _this._initializeWebPart({
                            context: context,
                            moduleLibrary: baseComponent,
                            webPartTag: webPartTag_1,
                            qosMonitor: qosMonitor_1
                        });
                    }
                    catch (error) {
                        reject(error);
                        return;
                    }
                    return _this._renderWebPart({
                        context: context,
                        webPartTag: webPartTag_1,
                        qosMonitor: qosMonitor_1,
                        instanceRequestCount: instanceRequestCount
                    })
                        .then(function () {
                        _PerformanceLogger.endMarkForComponent(webPartTag_1);
                        _this._onFirstTimeWebpartRender(manifest_1, webPartTag_1, qosMonitor_1);
                        resolve();
                    }).catch(reject); 
                })
                    .then(function () { return _this._loadLegacyFabricCssIfRequired(context, qosMonitor_1); })
                    .catch(function (err) {
                    _this._handleModulePromiseRejection(manifest_1, instanceId_1, domElement_1, webPartTag_1, err, qosMonitor_1);
                    reject(err);
                });
            }
        });
        if (Environment.type !== EnvironmentType.ClassicSharePoint &&
            context.totalWebparts &&
            context.totalWebparts === instanceRequestCount) {
            ClientSideWebPartManager._addPerfProperty('allWebPartsAdded', _PerformanceLogger.now());
            var addedPromise = loadModulePromise ||
                Promise.reject('No module promise');
            addedPromise.then(function () {
                _TraceLogger.logVerboseData({
                    source: _this._logSource,
                    message: "All " + context.totalWebparts + " web parts requested to load, has been processed",
                    serviceScope: _this._host.serviceScope
                });
                _this._onAllWebpartsAdded(context);
            }, function () { return _this._onAllWebpartsAdded(context || { totalWebparts: 1 }); });
        }
        return loadWebPartPromise.then(function () { return _this._onWebPartRendered(context, _PerformanceLogger.now()); }, function (error) {
            _this._onWebPartRendered(context, _PerformanceLogger.now());
            return Promise.reject(error);
        });
    };
    ClientSideWebPartManager.prototype.setPropertyPaneConsumer = function (id, control) {
        Validate.isNonemptyString(id, 'id');
        Validate.isNotNullOrUndefined(control, 'control');
        this._webparts.set(id, control);
        this._registerWebPartAsPropertyPaneConsumer(id);
    };
    ClientSideWebPartManager.prototype.fetchWebPartManifests = function () {
        var _this = this;
        if (!this._toolboxManifestsPromise && (
        !this._pageContext.web ||
            !this._pageContext.web.serverRelativeUrl ||
            Environment.type === EnvironmentType.Local ||
            Environment.type === EnvironmentType.Test)) {
            this._toolboxManifestsPromise = Promise.resolve();
        }
        if (!this._toolboxManifestsPromise) {
            var requestCorrelationId_1;
            var qosMonitor_2 = new _QosMonitor('ClientSideWebPartManager.FetchWebParts');
            var requestUrl_1 = UrlUtilities.removeEndSlash(this._pageContext.web.serverRelativeUrl) + "/_api/web/GetClientSideWebParts";
            this._host.serviceScope.whenFinished(function () {
                var httpClient = _this._host.serviceScope.consume(SPHttpClient.serviceKey);
                _this._toolboxManifestsPromise = httpClient.get(requestUrl_1, SPHttpClient.configurations.v1)
                    .then(function (response) {
                    requestCorrelationId_1 = response.correlationId ? response.correlationId.toString() : undefined;
                    if (response.ok) {
                        return response.json();
                    }
                    else {
                        throw SPWebPartError.create(SPWebPartErrorCode.ManifestDownloadFailed);
                    }
                })
                    .then(function (value) {
                    var manifests = value.value.map(function (manifestObject) { return JSON.parse(manifestObject.Manifest); });
                    _this._disambiguateWebPartManifestLocales(manifests);
                    SPComponentLoader.registerManifests(manifests);
                    _TraceLogger.logVerboseData({
                        source: _this._logSource,
                        message: strings.CompletedLoadingWebPartManifests,
                        serviceScope: _this._host.serviceScope
                    });
                    qosMonitor_2.writeSuccess();
                })
                    .catch(function (error) {
                    _this._toolboxManifestsPromise = undefined;
                    _TraceLogger.logErrorData({
                        source: _this._logSource,
                        error: error,
                        serviceScope: _this._host.serviceScope
                    });
                    qosMonitor_2.writeUnexpectedFailure('Rejected', error, {
                        correlationId: requestCorrelationId_1
                    });
                    throw error;
                });
            });
        }
        return this._toolboxManifestsPromise;
    };
    ClientSideWebPartManager.prototype.getWebPartManifests = function () {
        var manifests = SPComponentLoader._getManifestReferences();
        var result = []; 
        if (manifests) {
            for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
                var manifest = manifests_1[_i];
                if (manifest && manifest.componentType === 'WebPart') {
                    result.push(manifest); 
                }
            }
        }
        return result;
    };
    ClientSideWebPartManager.prototype.setDisplayMode = function (displayMode, instanceId) {
        this._setDisplayMode(displayMode, instanceId);
    };
    ClientSideWebPartManager.prototype._setDisplayMode = function (displayMode, instanceId) {
        var _this = this;
        this._displayMode = displayMode;
        if (this._displayMode === DisplayMode.Read) {
            this._closeIsolatedPropertyPaneIfRequired();
        }
        var setDisplayModePromise = this._loadPropertyPaneModule();
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                webPart._internalSetDisplayMode(displayMode);
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                Validate.isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                _this._iframedWebPartController.setDisplayMode(displayMode, id);
            }
        });
        this._startDirtyBitTimer(displayMode);
        return setDisplayModePromise;
    };
    ClientSideWebPartManager.prototype.serialize = function (instanceId) {
        var _this = this;
        var sd = new Map();
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                sd.set(id, webPart._internalSerialize());
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                Validate.isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                sd.set(id, _this._iframedWebPartController.serialize(id));
            }
        });
        return sd;
    };
    ClientSideWebPartManager.prototype.setWebPartData = function (webPartData, instanceId) {
        Validate.isNotNullOrUndefined(webPartData, 'web part data');
        Validate.isNonemptyString(instanceId, 'web part instance id');
        var wp = this._webparts.get(instanceId);
        if (wp) {
            wp._internalSetWebPartData(webPartData);
            _SPEventManager.instance.raiseEvent(this._getDataUpdatedEventName(webPartData.instanceId), {});
        }
    };
    ClientSideWebPartManager.prototype.dispose = function () {
        this.disposeWebparts();
        var currentIdx = ClientSideWebPartManager._webPartManagerList.indexOf(this);
        if (currentIdx >= 0) {
            ClientSideWebPartManager._webPartManagerList.splice(currentIdx, 1);
        }
    };
    ClientSideWebPartManager.prototype.disposeWebparts = function (instanceId) {
        var _this = this;
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                _this._deleteWebPart(id);
                executeWithoutFailing(function () { webPart._internalDispose(); }, _this._logSource);
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                Validate.isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                _this._iframedWebPartController.deleteWebPart(id);
            }
        });
    };
    ClientSideWebPartManager.prototype.tryGeneratePreviewImageUrl = function (instanceIds) {
        var _this = this;
        var previewImageUrl = undefined;
        var previewFromAlias = undefined;
        this._executeForIdsOrAll(instanceIds, function (instanceId, webPart) {
            if (webPart) {
                if (!previewImageUrl) {
                    var webParthThumbnail = webPart.previewImageUrl;
                    if (webParthThumbnail) {
                        previewFromAlias = webPart.context.manifest.alias;
                        if (webParthThumbnail.length < THUMBNAIL_MAX_URL_LENGTH) {
                            previewImageUrl = webPart.previewImageUrl;
                        }
                        else {
                            _TraceLogger.logVerboseData({
                                source: _this._logSource,
                                eventName: 'tryGeneratePreviewImageUrl',
                                message: previewFromAlias + " attempted preview URL of " + webPart.previewImageUrl.length + " chars."
                            });
                        }
                    }
                }
            }
            else if (_this._iframedWebpartInstanceIds.has(instanceId)) {
                return undefined;
            }
        });
        if (!previewImageUrl && previewFromAlias) {
            var pathLengthError = new Error('tryGeneratePreviewImageUrl PathLengthError.');
            _TraceLogger.logError(this._logSource, pathLengthError);
            throw pathLengthError;
        }
        return previewImageUrl;
    };
    ClientSideWebPartManager.prototype.requestPropertyPaneAction = function (instanceId, propertyPaneAction, renderedByWebPart) {
        if (propertyPaneAction === void 0) { propertyPaneAction = 4 ; }
        var qosMonitor = new _QosMonitor('ClientSideWebPartManager.requestPropertyPaneAction');
        if (this._iframedWebpartInstanceIds.has(instanceId)) { 
            if (this._propertyPane && this._propertyPane.isOpen()) {
                this._propertyPane.requestAction(instanceId, 2 , renderedByWebPart);
            }
            this._iframedWebPartController.requestPropertyPaneAction(propertyPaneAction, instanceId);
        }
        else { 
            if (this._iframedWebPartController) {
                this._iframedWebPartController.requestPropertyPaneAction(2 );
            }
            if (this._propertyPane) {
                this._propertyPane.requestAction(instanceId, propertyPaneAction,  renderedByWebPart);
            }
        }
    };
    ClientSideWebPartManager.prototype.isPropertyPaneRenderedByWebPart = function () {
        return this._propertyPane && this._propertyPane.isRenderedByConsumer();
    };
    ClientSideWebPartManager.prototype.isPropertyPaneOpen = function () {
        return this._propertyPane && this._propertyPane.isOpen();
    };
    ClientSideWebPartManager.prototype.onWebPartDelete = function (instanceId) {
        this.disposeWebparts(instanceId);
    };
    ClientSideWebPartManager.prototype.renderError = function (domElement, error) {
        var _this = this;
        executeWithoutFailing(function () {
            _this._statusRenderer.renderError(domElement, error);
            _TraceLogger.logErrorData({
                source: _this._logSource,
                error: error,
                serviceScope: _this._host.serviceScope
            });
        }, this._logSource);
    };
    ClientSideWebPartManager.prototype.notifyWebPartContainerResize = function (instanceId) {
        var _this = this;
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                webPart._internalOnAfterResize();
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                Validate.isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                _this._iframedWebPartController.notifyContainerResize(id);
            }
        });
    };
    ClientSideWebPartManager.prototype._getWebPartContext = function (context) {
        var webPartTag = this._createWebPartTag(context.manifest, context.instanceId);
        var parameters = tslib_1.__assign({}, (this._host.getAdditionalContextProperties && this._host.getAdditionalContextProperties()), { parentServiceScope: context.serviceScope || this._host.serviceScope, manifest: this._getManifestInstance(context), instanceId: context.instanceId, webPartTag: webPartTag, domElement: context.domElement, statusRenderer: this._statusRenderer, isPropertyPaneRenderedByWebPart: this.isPropertyPaneRenderedByWebPart, isPropertyPaneOpen: this.isPropertyPaneOpen, formFactor: context.formFactor || 0 , host: this._host, requestPropertyPaneAction: this.requestPropertyPaneAction, loggingTag: webPartTag, _dataUpdatedEvent: new SPEvent(this._getDataUpdatedEventName(context.instanceId)) });
        var webPartContext = new WebPartContext(parameters);
        return webPartContext;
    };
    ClientSideWebPartManager.prototype._loadWebPartModules = function (context, webPartTag, qosMonitor) {
        _TraceLogger.logVerboseData({
            source: this._logSource,
            message: Text.format(strings.StartedLoadingWebPart, webPartTag),
            serviceScope: this._host.serviceScope
        });
        var modulePromise = SPComponentLoader.loadComponent(context.manifest);
        var moduleLoadPromises = [];
        moduleLoadPromises.push(modulePromise);
        this._loadDynamicComponentDependencies(context.webPartData, webPartTag, moduleLoadPromises);
        return Promise.all(moduleLoadPromises)
            .then(function (moduleLibraries) {
            _PerformanceLogger.devMark("ClientSideWebPartManager.loadWebPart(" + webPartTag + ").end");
            return Promise.resolve(moduleLibraries[0]);
        })
            .catch(function (error) {
            return modulePromise;
        });
    };
    ClientSideWebPartManager.prototype._onWebPartRendered = function (context, renderEndTime) {
        this._webPartRenderedCount++;
        if (context.onAllWebPartsRendered) {
            if (Environment.type !== EnvironmentType.ClassicSharePoint &&
                context.totalWebparts &&
                context.totalWebparts === this._webPartRenderedCount) {
                window.setTimeout(function () { return context.onAllWebPartsRendered(renderEndTime); }, 0);
            }
        }
    };
    ClientSideWebPartManager.prototype._disambiguateWebPartManifestLocales = function (manifests) {
        var currentLocale = this._pageContext.cultureInfo.currentUICultureName
            ? this._pageContext.cultureInfo.currentUICultureName.toLowerCase()
            : undefined;
        if (currentLocale) {
            var disambiguateLocale_1 = function (values) {
                var foundMatch = undefined;
                for (var locale in values) {
                    if (locale && locale.toLowerCase() === currentLocale && values[locale]) {
                        foundMatch = values[locale];
                        break;
                    }
                }
                return {
                    default: foundMatch || values.default
                };
            };
            manifests.forEach(function (manifest) {
                if (manifest.componentType === 'WebPart') {
                    var wpManifest = manifest;
                    wpManifest.preconfiguredEntries.forEach(function (entry) {
                        entry.title = disambiguateLocale_1(entry.title);
                        entry.description = disambiguateLocale_1(entry.description);
                        if (entry.group) {
                            entry.group = disambiguateLocale_1(entry.group);
                        }
                    });
                }
            });
        }
    };
    ClientSideWebPartManager.prototype._validateInput = function (context) {
        Validate.isNotNullOrUndefined(context, 'web part manager context');
        Validate.isNotNullOrUndefined(context.domElement, 'web part element');
        Validate.isNotNullOrUndefined(context.instanceId, 'web part instanceId');
        Validate.isNotNullOrUndefined(context.manifest, 'web part manifest');
        Validate.isTrue(!this._webparts.get(context.instanceId), "Duplicate web part instanceId is not allowed: " + context.instanceId);
    };
    ClientSideWebPartManager.prototype._validateManifest = function (manifest,  mode, webPartTag) {
        if (!manifest) {
            if (mode === DisplayMode.Read) {
                throw SPWebPartError.create(SPWebPartErrorCode.ManifestNull, webPartTag);
            }
            else {
                return false;
            }
        }
        var cm = lodash.cloneDeep(manifest);
        Validate.isTrue(cm.manifestVersion == 2, 'Only version 2 manifests are currently supported');
        Validate.isTrue(!!cm.id, 'web part id cannot be null or undefined');
        Validate.isNotNullOrUndefined(Guid.tryParse(cm.id), 'web part id has to be a GUID');
        Validate.isTrue(!!cm.version, 'webp art version cannot be null or undefined');
        return true;
    };
    ClientSideWebPartManager.prototype._executeForIdsOrAll = function (instanceIds, callback) {
        var _this = this;
        if (instanceIds) {
            instanceIds.forEach(function (instanceId) {
                var webPart = _this._webparts.get(instanceId);
                callback(instanceId, webPart);
            });
        }
        else {
            this._webparts.forEach(function (webPart, instanceId) {
                if (_this._instanceOfBase(webPart)) {
                    callback(instanceId, webPart);
                }
            });
            if (this._iframedWebPartController) {
                this._iframedWebPartController.getAllInstanceIds().forEach(function (instanceId) {
                    callback(instanceId);
                });
            }
        }
    };
    ClientSideWebPartManager.prototype._instanceOfBase = function (wpi) {
        return wpi && (wpi instanceof BaseClientSideWebPart || wpi['__type'] === 'BaseClientSideWebPart');
    };
    ClientSideWebPartManager.prototype._getLoadedModuleList = function (moduleLibrary) {
        var loadedModulesString = '';
        for (var m in moduleLibrary) {
            if (moduleLibrary.hasOwnProperty(m)) {
                if (loadedModulesString) {
                    loadedModulesString += ',';
                }
                loadedModulesString += "" + m;
            }
        }
        return loadedModulesString;
    };
    ClientSideWebPartManager.prototype._startDirtyBitTimer = function (mode) {
        var _this = this;
        if (mode === DisplayMode.Read) {
            if (this._dirtyBitTimer && Environment.type !== EnvironmentType.ClassicSharePoint) {
                window.clearInterval(this._dirtyBitTimer);
                this._dirtyBitTimer = undefined;
            }
        }
        else if (!this._dirtyBitTimer) {
            this._dirtyBitTimer = window.setInterval(function () {
                _this._executeForIdsOrAll(undefined, function (_instanceId, wp) {
                    if (wp) {
                        wp._internalSetDirtyBit();
                    }
                    else if (_this._iframedWebpartInstanceIds.has(_instanceId)) {
                        _this._iframedWebPartController.startDirtyBitTimer(_instanceId);
                    }
                });
            }, 1000);
        }
    };
    ClientSideWebPartManager.prototype._createSuccessExtraData = function (alias, isInternal, manifestId, moduleLoadTime, initTime, renderTime) {
        var successExtraData = {
            alias: alias,
            isInternal: isInternal,
            manifestId: manifestId,
            moduleLoadTime: Math.floor(moduleLoadTime),
            initTime: Math.floor(initTime),
            renderTime: Math.floor(renderTime)
        };
        return successExtraData;
    };
    ClientSideWebPartManager.prototype._createUnexpectedFailureExtraData = function (alias, instanceId, isInternal, manifestId) {
        var unexpectedFailureExtraData = {
            alias: alias,
            instanceId: instanceId,
            isInternal: isInternal,
            manifestId: manifestId
        };
        return unexpectedFailureExtraData;
    };
    ClientSideWebPartManager.prototype._createLoadQosMonitor = function (manifest) {
        return new _QosMonitor("WebPart.Load", true);
    };
    ClientSideWebPartManager.prototype._createWebPartTag = function (manifest, instanceId) {
        return "WebPart." + manifest.alias + "." + (manifest.isInternal ? 'internal' : 'external') + "." + instanceId;
    };
    ClientSideWebPartManager.prototype._deleteWebPart = function (id) {
        Validate.isNotNullOrUndefined(id, 'id');
        if (this._propertyPane) {
            this._propertyPane.onConsumerDelete(id);
        }
        var wpi = this._webparts.get(id);
        if (wpi && this._instanceOfBase(wpi)) {
            _TraceLogger.logVerboseData({
                source: this._logSource,
                message: Text.format(strings.WebpartDeleteRequested, wpi.context.webPartTag),
                serviceScope: this._host.serviceScope
            });
            this._loadWebPartRequests--;
            this._webPartRenderedCount--;
            if (this._loadWebPartRequests < 0) {
                _TraceLogger.logErrorData({
                    source: this._logSource,
                    error: new Error(strings.UnexpectedLoadRequestNegativeCount),
                    serviceScope: this._host.serviceScope
                });
            }
        }
        this._webparts.delete(id);
    };
    ClientSideWebPartManager.prototype._getManifestInstance = function (context) {
        var manifest = context.manifest;
        var manifestClone = lodash.cloneDeep(manifest);
        delete manifestClone.preconfiguredEntries;
        return manifestClone;
    };
    ClientSideWebPartManager.prototype._getArrayOrUndefined = function (instanceId) {
        return instanceId ? [instanceId] : undefined;
    };
    ClientSideWebPartManager.prototype._initialzeOnResizeEventHandler = function () {
        window.addEventListener('resize', lodash.debounce(this._onContainerResize, 1000));
        window.addEventListener('message', this._onPropertyPaneNotifications);
    };
    ClientSideWebPartManager.prototype._onContainerResize = function () {
        ClientSideWebPartManager._webPartManagerList.forEach(function (wpm) {
            wpm._webparts.forEach(function (wp) { wp._internalOnAfterResize(); });
        });
    };
    ClientSideWebPartManager.prototype._onPropertyPaneNotifications = function (event) {
        if (event && event.origin === window.location.origin) {
            switch (event.data) {
                case 'Property pane will open':
                    this._closeIsolatedPropertyPaneIfRequired();
                    break;
                case 'Property pane toggled':
                    this._onContainerResize();
                    break;
            }
        }
    };
    ClientSideWebPartManager.prototype._onAllWebpartsAdded = function (context, startTime) {
        var _this = this;
        var timeout = 2000;
        var endTime = this._getViewportRenderedEndTime();
        if (endTime || (startTime && (_PerformanceLogger.now() - startTime) > timeout)) {
            var qosViewportLoad = new _QosMonitor("Viewport.Load", true);
            if (endTime === undefined) {
                qosViewportLoad.writeExpectedFailure('Timed out waiting viewport web parts');
                endTime = _PerformanceLogger.now();
            }
            else {
                qosViewportLoad.writeSuccess();
            }
            window.setTimeout(function () { _this._onViewportWebpartsLoaded(context, endTime); }, 0);
        }
        else {
            window.setTimeout(function () { return _this._onAllWebpartsAdded(context, startTime ? startTime : _PerformanceLogger.now()); }, 100);
        }
    };
    ClientSideWebPartManager.prototype._onViewportWebpartsLoaded = function (context, endTime) {
        Validate.isNotNullOrUndefined(endTime, 'endTime');
        if (Environment.type !== EnvironmentType.ClassicSharePoint) {
            this._registerWebpartsInViewport();
            _TraceLogger.logVerboseData({
                source: this._logSource,
                message: 'All Web parts in the viewports are rendered at ' + endTime,
                serviceScope: this._host.serviceScope
            });
        }
        if (context.onViewportWebPartsRendered) {
            context.onViewportWebPartsRendered(endTime);
        }
        if (context.totalWebparts || Environment.type === EnvironmentType.ClassicSharePoint) {
            ViewportLoader.instance.loadOutsideViewPort();
        }
    };
    ClientSideWebPartManager.prototype._getViewportRenderedEndTime = function () {
        var _this = this;
        var isAllInViewportRendered = true;
        var endTime = undefined;
        var noWebPartInInitialViewport = true;
        this._webparts.forEach(function (wpi) {
            if (_this._instanceOfBase(wpi)
                && !_PerformanceLogger.shouldSkipComponent(wpi.context.webPartTag)
                && ViewportLoader.isInIntialViewport(wpi)) {
                noWebPartInInitialViewport = false;
                isAllInViewportRendered = isAllInViewportRendered ? wpi._renderedOnce : isAllInViewportRendered;
                if (isAllInViewportRendered) { 
                    var curEndTime = _PerformanceLogger.getComponentEndTime(wpi.context.webPartTag);
                    if (curEndTime && (!endTime || curEndTime > endTime)) {
                        endTime = curEndTime;
                    }
                }
            }
        });
        if (noWebPartInInitialViewport) {
            return _PerformanceLogger.now();
        }
        else {
            return isAllInViewportRendered ? endTime : undefined;
        }
    };
    ClientSideWebPartManager.prototype._registerWebpartsInViewport = function () {
        var _this = this;
        var externalWebpartsInViewport = 0; 
        var internalWebpartsInViewport = 0; 
        var totalInternalWebParts = 0; 
        var totalExternalWebParts = 0; 
        this._webparts.forEach(function (wpi) {
            if (_this._instanceOfBase(wpi)) {
                wpi.context.manifest.isInternal ? totalInternalWebParts++ : totalExternalWebParts++;
                if (ViewportLoader.isInIntialViewport(wpi)) {
                    _PageMetricsLogger.recordMetric(WebPartMetrics.webPartsCountedInViewport);
                    _PerformanceLogger.addComponent(wpi.context.webPartTag);
                    wpi.context.manifest.isInternal ? internalWebpartsInViewport++ : externalWebpartsInViewport++;
                    _TraceLogger.logVerboseData({
                        source: _this._logSource,
                        message: "Web part " + wpi.context.webPartTag + " is added into EUPL calculation.",
                        serviceScope: _this._host.serviceScope
                    });
                }
                else if (wpi._internalIsInViewport) {
                    _PageMetricsLogger.recordMetric(WebPartMetrics.webPartsLoadedNotInViewport);
                }
            }
        });
        var sumCount = true;
        ClientSideWebPartManager._addPerfProperty('totalInternalWebParts', totalInternalWebParts, sumCount);
        ClientSideWebPartManager._addPerfProperty('totalExternalWebParts', totalExternalWebParts, sumCount);
        ClientSideWebPartManager._addPerfProperty('externalWebPartsInViewport', externalWebpartsInViewport, sumCount);
        ClientSideWebPartManager._addPerfProperty('internalWebPartsInViewport', internalWebpartsInViewport, sumCount);
    };
    ClientSideWebPartManager.prototype._instantiateWebPart = function (moduleLibrary, webPartTag) {
        var wp = moduleLibrary; 
        if (wp && wp.default) {
            wp = wp.default;
        }
        if (!wp) {
            throw SPWebPartError.create(SPWebPartErrorCode.ModuleNotLoaded, webPartTag, this._getLoadedModuleList(moduleLibrary));
        }
        if (typeof (wp) !== 'function' && wp.default) {
            wp = wp.default;
        }
        if (typeof (wp) !== 'function') {
            throw SPWebPartError.createWithLogProperties(SPWebPartErrorCode.IncorrectBoostrapModule, { actualType: typeof (wp), wp: wp }, webPartTag);
        }
        var typedWebPartClass = wp;
        var wpi = new typedWebPartClass();
        if (!wpi._internalInitialize) {
            throw SPWebPartError.createWithLogProperties(SPWebPartErrorCode.MissingExpectedWebPartMemberError, { actualType: typeof (wp), wp: wp }, webPartTag, '_internalInitialize');
        }
        return wpi;
    };
    ClientSideWebPartManager.prototype._handleErrorLoadingWebpart = function (manifest,  instanceId, domElement, ex, qosMonitor) {
        var _this = this;
        var wpi = this._webparts.get(instanceId);
        if (wpi) {
            executeWithoutFailing(function () { _this._statusRenderer.clearLoadingIndicator(domElement); }, this._logSource);
            executeWithoutFailing(function () { wpi._internalDispose(); }, this._logSource);
            executeWithoutFailing(function () { _this._webparts.delete(instanceId); }, this._logSource);
        }
        executeWithoutFailing(function () {
            var extraData = _this._createUnexpectedFailureExtraData(manifest.alias, instanceId, manifest.isInternal, manifest.id);
            qosMonitor.writeUnexpectedFailure('UnhandledLoadError', ex, extraData);
        }, this._logSource);
        this.renderError(domElement, ex);
    };
    ClientSideWebPartManager.prototype._handleModulePromiseRejection = function (manifest,  instanceId, domElement, webPartTag, error, qosMonitor) {
        var _this = this;
        executeWithoutFailing(function () {
            var extraData = _this._createUnexpectedFailureExtraData(manifest.alias, instanceId, manifest.isInternal, manifest.id);
            qosMonitor.writeUnexpectedFailure('ScriptLoad', error, extraData);
        }, this._logSource);
        this.renderError(domElement, error);
    };
    ClientSideWebPartManager.prototype._onFirstTimeWebpartRender = function (manifest,  webPartTag, qosMonitor) {
        var start = _PerformanceLogger.readComponentBreakdown(webPartTag, 'start');
        var moduleLoaded = _PerformanceLogger.readComponentBreakdown(webPartTag, 'modulesLoaded');
        var inViewportLoaded = _PerformanceLogger.readComponentBreakdown(webPartTag, 'inViewportLoading');
        var initialized = _PerformanceLogger.readComponentBreakdown(webPartTag, 'init');
        var end = _PerformanceLogger.readComponentBreakdown(webPartTag, 'end');
        var extraData = this._createSuccessExtraData(manifest.alias, manifest.isInternal, manifest.id, moduleLoaded - start, initialized - inViewportLoaded, end - initialized);
        qosMonitor.writeSuccess(extraData);
        ClassicPageUtils.removeFabricLinks();
        _TraceLogger.logVerboseData({
            source: this._logSource,
            message: Text.format(strings.ModulesLoadedForWebPart, webPartTag),
            serviceScope: this._host.serviceScope
        });
    };
    ClientSideWebPartManager.prototype._getDataUpdatedEventName = function (webPartInstanceId) {
        return "WebPart_" + webPartInstanceId + "_dataUpdated";
    };
    ClientSideWebPartManager.prototype._initializeWebPart = function (options) {
        var context = options.context, moduleLibrary = options.moduleLibrary, webPartTag = options.webPartTag, qosMonitor = options.qosMonitor;
        try {
            _PerformanceLogger.markComponentModuleLoaded(webPartTag);
            _TraceLogger.logVerboseData({
                source: this._logSource,
                message: Text.format(strings.ModulesLoadedForWebPart, webPartTag),
                serviceScope: this._host.serviceScope
            });
            if (!moduleLibrary) {
                throw SPWebPartError.create(SPWebPartErrorCode.ModuleUndefined, webPartTag);
            }
            var wpi = this._instantiateWebPart(moduleLibrary, webPartTag);
            wpi._internalInitialize(this._getWebPartContext(context), 
            context.addedFromPersistedData, context.displayMode);
            if (!this._instanceOfBase(wpi)) {
                throw SPWebPartError.create(SPWebPartErrorCode.NonBaseWebPart, webPartTag);
            }
            this._webparts.set(context.instanceId, wpi);
            this._registerWebPartAsPropertyPaneConsumer(context.instanceId);
            this._startDirtyBitTimer(context.displayMode);
            var webPartData = lodash.cloneDeep(context.webPartData);
            if (webPartData) {
                wpi._internalDeserialize(webPartData);
            }
        }
        catch (error) {
            this._handleErrorLoadingWebpart(context.manifest, context.instanceId, context.domElement, error, qosMonitor);
            throw error;
        }
    };
    ClientSideWebPartManager.prototype._renderWebPart = function (options) {
        var _this = this;
        var context = options.context, webPartTag = options.webPartTag, qosMonitor = options.qosMonitor, instanceRequestCount = options.instanceRequestCount;
        try {
            var wpi_1 = this._webparts.get(context.instanceId);
            loadThemedStyles.flush();
            return this._loadPropertyPaneModule().then(function () {
                var webpartFirstRenderPromise = wpi_1._internalFirstTimeRender(
                context.scrollableParent, qosMonitor);
                if ((Environment.type === EnvironmentType.ClassicSharePoint) && ViewportLoader.isInIntialViewport(wpi_1)) {
                    _PerformanceLogger.addComponent(webPartTag);
                    _TraceLogger.logVerboseData({
                        source: _this._logSource,
                        message: "Web part " + webPartTag + " is added into EUPL calculation.",
                        serviceScope: _this._host.serviceScope
                    });
                }
                if (instanceRequestCount === 1 &&
                    Environment.type === EnvironmentType.ClassicSharePoint &&
                    !_this._host.isViewportLoadingDisabled) {
                    _this._onAllWebpartsAdded(context);
                }
                return webpartFirstRenderPromise;
            }).catch(function (error) { throw error; });
        }
        catch (ex) {
            this._handleErrorLoadingWebpart(context.manifest, context.instanceId, context.domElement, ex, qosMonitor);
            return Promise.reject(ex);
        }
    };
    ClientSideWebPartManager.prototype._loadDynamicComponentDependencies = function (webPartData, webPartTag, moduleLoadPromises) {
        if (webPartData
            && webPartData.serverProcessedContent
            && webPartData.serverProcessedContent.componentDependencies) {
            var componentDependencies = webPartData.serverProcessedContent.componentDependencies;
            if (componentDependencies) {
                for (var compDependency in componentDependencies) {
                    if (compDependency && componentDependencies[compDependency]) {
                        var componentId = componentDependencies[compDependency];
                        if (!Guid.tryParse(componentId)) {
                            var error = new Error("Web part (" + webPartTag + ") dynamic dependency " + componentId + " is not a valid guid");
                            _TraceLogger.logErrorData({ source: this._logSource, error: error, serviceScope: this._host.serviceScope });
                        }
                        else {
                            moduleLoadPromises.push(SPComponentLoader.loadComponentById(componentId));
                            _TraceLogger.logVerboseData({
                                source: this._logSource,
                                message: "Web part (" + webPartTag + ") loading dynamic dependency " + componentId + " started.",
                                serviceScope: this._host.serviceScope
                            });
                        }
                    }
                }
            }
        }
    };
    ClientSideWebPartManager.prototype._registerWebPartAsPropertyPaneConsumer = function (instanceId) {
        if (instanceId) {
            var wp = undefined;
            for (var _i = 0, _a = ClientSideWebPartManager._webPartManagerList; _i < _a.length; _i++) {
                var manager = _a[_i];
                wp = manager._webparts.get(instanceId);
                if (wp) {
                    if (this._propertyPane) {
                        this._propertyPane.registerConsumer(instanceId, wp);
                    }
                    else {
                        this._propertyPaneConsumerQueue.set(instanceId, wp);
                    }
                    break;
                }
            }
        }
    };
    ClientSideWebPartManager.prototype._ensureUrl = function (isolatedDomain, absoluteUrl) {
        if (!isolatedDomain) {
            return absoluteUrl;
        }
        var slashAdded = false;
        if (absoluteUrl.charAt(absoluteUrl.length - 1) !== '/') {
            absoluteUrl = absoluteUrl + '/';
            slashAdded = true;
        }
        absoluteUrl = absoluteUrl.replace(ClientSideWebPartManager._domainRegex, "https://" + isolatedDomain + "/");
        if (slashAdded) {
            absoluteUrl = absoluteUrl.substr(0, absoluteUrl.length - 1);
        }
        return absoluteUrl;
    };
    ClientSideWebPartManager.prototype._loadPropertyPaneModule = function () {
        var _this = this;
        if ((this._displayMode === DisplayMode.Edit ||
            Environment.type === EnvironmentType.ClassicSharePoint) &&
            !this._propertyPane) {
            var propertyPaneQosMonitor_1 = new _QosMonitor('ClientSideWebPartManager._loadPropertyPaneModule');
            this._propertyPaneLoader = this._host.serviceScope.consume(PropertyPaneLoader.serviceKey);
            return this._propertyPaneLoader.propertyPane
                .then(function (propertyPane) {
                _this._propertyPane = propertyPane;
                _this._registerPendingPropertyPaneConsumers();
            })
                .catch(function (error) {
                _TraceLogger.logErrorData({
                    source: _this._logSource,
                    error: error
                });
                propertyPaneQosMonitor_1.writeUnexpectedFailure('UnhandledError', error);
                throw error;
            });
        }
        else {
            return Promise.resolve();
        }
    };
    ClientSideWebPartManager.prototype._registerPendingPropertyPaneConsumers = function () {
        var _this = this;
        this._propertyPaneConsumerQueue.forEach(function (consumer, instanceId) {
            _this._propertyPane.registerConsumer(instanceId, consumer);
        });
    };
    ClientSideWebPartManager.prototype._closeIsolatedPropertyPaneIfRequired = function () {
        ClientSideWebPartManager._webPartManagerList.forEach(function (cswpm) {
            if (cswpm._iframedWebPartController) {
                cswpm._iframedWebPartController.requestPropertyPaneAction(2 );
            }
        });
    };
    ClientSideWebPartManager.prototype._loadLegacyFabricCssIfRequired = function (context, qosMonitor) {
        var _this = this;
        var manifest = context.manifest;
        if (!_ComponentBaseKillSwitches.isStopLoadingLegacyFabricCSSKillSwitchActivated()) {
            return _LegacyThirdPartyFabricCoreLoader.forceLoad(manifest)
                .then(function () { return Promise.resolve(); })
                .catch(function (error) {
                _TraceLogger.logErrorData({
                    source: _this._logSource,
                    error: error,
                    serviceScope: _this._host.serviceScope
                });
                qosMonitor.writeUnexpectedFailure('Error loading legacy-third-party-fabric-core.', error);
                Promise.reject(error);
            });
        }
        else {
            return _LegacyThirdPartyFabricCoreLoader.load(context.manifest.isInternal)
                .then(function () { return Promise.resolve(); })
                .catch(function (error) {
                _TraceLogger.logErrorData({
                    source: _this._logSource,
                    error: error,
                    serviceScope: _this._host.serviceScope
                });
                qosMonitor.writeUnexpectedFailure('Error loading legacy-third-party-fabric-core.', error);
                Promise.reject(error);
            });
        }
    };
    ClientSideWebPartManager._webPartManagerList = [];
    ClientSideWebPartManager._domainRegex = new RegExp('^https://[^/]*/');
    return ClientSideWebPartManager;
}());
export default ClientSideWebPartManager;
