/**
 * SharePoint Framework support for building web parts.
 *
 * @remarks
 * This package defines the APIs used by developers to create a custom web part.
 * A web part is a reusable visual object that a page author can add to their content,
 * and customize using a property pane.  Examples of web parts include an embedded
 * video player, a map, a group calendar, a chart, etc.
 *
 * @packagedocumentation
 */

import { BaseComponent } from '@microsoft/sp-component-base';
import { BaseComponentContext } from '@microsoft/sp-component-base';
import { DisplayMode } from '@microsoft/sp-core-library';
import { GraphHttpClient } from '@microsoft/sp-http';
import { HttpClient } from '@microsoft/sp-http';
import { IClientSideWebPartManifest } from '@microsoft/sp-module-interfaces';
import { IClientSideWebPartManifestInstance } from '@microsoft/sp-module-interfaces';
import { _IComponentContextParameters } from '@microsoft/sp-component-base';
import { IPropertyPaneConsumer } from '@microsoft/sp-property-pane';
import { IPropertyPaneData } from '@microsoft/sp-property-pane';
import * as microsoftTeams from '@microsoft/teams-js';
import { PageContext } from '@microsoft/sp-page-context';
import { PropertyPaneAction as PropertyPaneAction_2 } from '@microsoft/sp-property-pane';
import { _PropertyPaneController } from '@microsoft/sp-property-pane';
import { PropertyPaneLifeCycleEvent } from '@microsoft/sp-property-pane';
import { ServiceKey } from '@microsoft/sp-core-library';
import { ServiceScope } from '@microsoft/sp-core-library';
import { SPEvent } from '@microsoft/sp-core-library';
import { SPEventArgs } from '@microsoft/sp-core-library';
import { SPHttpClient } from '@microsoft/sp-http';
import * as SPPropertyPane from '@microsoft/sp-property-pane';
import { Version } from '@microsoft/sp-core-library';

/**
 * This abstract class implements the the base functionality for a client-side web part. Every client-side web part
 * needs to inherit from this class.
 *
 * @remarks
 * Along with the base functionality, this class provides some APIs that can be
 * used by the web part. These APIs fall in two catagories.
 *
 * The first category of APIs provide data and functionality. Example, the web part context (i.e. this.context). This
 * API should be used to access contextual data relevant to this web part instance.
 *
 * The second category of APIs provide a base implementation for the web part lifecycle and can be overridden for an
 * updated implementation. The render() API is the only API that is mandatory to be implemented/overridden by a web
 * part. All other life cycle APIs have a base implementation and can be overridden based on the needs of the web part.
 * Please refer to the documentation of the individual APIs to make the right decision.
 *
 * @public
 */
export declare abstract class BaseClientSideWebPart<TProperties> extends BaseWebPart<TProperties> {
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponent.context}
     */
    protected readonly context: WebPartContext;
    private _firstTimeRenderPromises;
    private _renderedOnce;
    private _logSource;
    /**
     * Container width allocated for the web part
     */
    private _width;
    /**
     * True value reflects that web part is loaded as it was perceived in viewport.
     *
     * NOTE: Don't update it. This flag should be only read to know the lazy loading status.
     * NOTE: Don't use this flag to track position of the web part in viewport. Use this
     * flag only to track if web part rendering has been delayed or not.
     */
    private _internalIsInViewport;
    /**
     * A timer guard, QOS monitor and resolver delegate for the Async render scenarios. An async render scenario
     * is one in which the web part is rendering an IFRAME OR fetching async data outside of the onInit API
     * OR rendering an image tag. In these cases much of the web part rendering lifecycle is controlled by external
     * factors once the IFRAME is created or the data fetch request is sent OR the image tag is set. The web part
     * needs to call the renderCompleted API once the final rendering is complete and data is displayed.
     */
    private _asyncRenderGuardTimer;
    private _asyncRenderQosMonitor;
    private _renderPromiseResolver;
    private _renderPromiseRejecter;
    /**
     * Constructor for the BaseClientSideWebPart class.
     *
     * @remarks
     * It is highly recommended that the web part use the `onInit()` API to perform any web part specific
     * initialization.  Most of the web part features like this.context and `this.properties` are not
     * available to be used before the the `onInit()` part of the web part loading lifecycle.
     */
    constructor();
    /**
     * This property is a pointer to the root DOM element of the web part. This is a DIV element and contains the whole
     * DOM subtree of the web part.
     *
     * @readonly
     */
    protected readonly domElement: HTMLElement;
    /**
     * This value is the available width of the area in which the web part can render itself.
     * Instead of "Element.clientWidth" which returns an integer, "getComputedStyle" returns
     * a number which is more accurate in sub-pixel.
     *
     * @remarks
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth | clientWidth}
     * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/parseFloat | parseFloat}
     * {@link https://developer.mozilla.org/en/docs/Web/API/Window/getComputedStyle | getComputedStyle}
     *
     * @readonly
     * @alpha
     */
    protected readonly width: number;
    /**
     * This property indicates whether the web part has been rendered once or not. After the first time rendering,
     * the value of this property is always true until a full re-render of the web part happens.
     *
     * @readonly
     */
    protected readonly renderedOnce: boolean;
    /**
     * This property indicates whether the web part was rendered from the persisted data (serialized state from the
     * last time that the web part was saved) or not.
     *
     * @remarks
     * Example: When web part is added for the first time using toolbox then the value is false.
     *
     * @readonly
     */
    protected readonly renderedFromPersistedData: boolean;
    /**
     * This property indicates whether a web part can open a popup on initial render.
     *
     * @remarks
     * In some environments the host
     * re-renders the web parts frequently, and therefore opening popups during render will cause popups to open
     * repeatedly, which is a poor user experience. As an example, the classic SharePoint pages perform postbacks
     * causing the page to re-render on all button clicks.
     *
     * If a web part needs to open a popup on render, it should use this API before opening the popup. If this API
     * returns false, the web part should not open popup on initial render. Some web parts that open popups during
     * render are the document embed web part that pops up the file picker on initial render, embedded video web part
     * that pops up the PropertyPane on initial render.
     *
     * @readonly
     */
    protected readonly canOpenPopupOnRender: boolean;
    /**
     * Indicates whether the web part is rendering in Async mode.
     *
     * @remarks
     * If the web part overrides this field to return true, then it needs to call renderCompleted API
     * after the web part rendering is complete.
     *
     * The default value is false.
     *
     * @virtual
     */
    protected readonly isRenderAsync: boolean;
    /**
     * Internal API to update the webpart upon a resize of the DOM window's viewport
     *
     * See onAfterResize for more details.
     *
     * @internal
     */
    _internalOnAfterResize(): void;
    /**
     * Calculates minimum height required for the web part to render with current width
     *
     * @internal @virtual
     */
    protected _calculateMinimumHeight(): number | undefined;
    /**
     * This API is called to render the web part. There is no base implementation of this API and the web part is
     * required to override this API.
     */
    protected abstract render(): void;
    /**
     * This API should be called by web parts that perform Async rendering. Those web part are required to override
     * the isRenderAsync API and return true. One such example is web parts that render content in an IFrame. The
     * web part initiates the IFrame rendering in the `render()` API but the actual rendering is complete only after
     * the iframe loading completes.
     */
    protected renderCompleted(): void;
    /**
     * This event method is called when the display mode of a web part is changed.
     *
     * @remarks
     * The default implementation of this API calls
     * the web part render method to re-render the web part with the new display mode. If a web part developer does not
     * want a full re-render to happen on display mode change, they can override this API and perform specific updates
     * to the web part DOM to switch its display mode.
     *
     * @param oldDisplayMode - The old display mode.
     *
     * @virtual
     */
    protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void;
    /**
     * This API should be used to refresh the contents of the PropertyPane.
     *
     * @remarks
     * This API is called at the end of the web part lifecycle on a page. It should be used to dispose any local
     * resources (i.e. DOM elements) that the web part is holding onto. This API is expected to be called in scenarios
     * like page navigation i.e. the host is transitioning from one page to another and disposes the page that is being
     * transitioned out.
     *
     * @virtual
     */
    protected onDispose(): void;
    /**
     * This API is invoked when the web part container dom element width is changed, e.g. when the browser
     * browser window is resized and when the property pane is toggled open/close.
     *
     * @remarks
     * Web parts should utilize this method to perform operations such as potentially re-rendering components
     * based on the new available width for the web part.
     *
     * @alpha @virtual
     */
    protected onAfterResize(newWidth: number): void;
    /**
     * This API should be used to render an error message in the web part display area. Also logs the error message
     * using the trace logger.
     *
     * @param error - An error object containing the error message to render.
     */
    protected renderError(error: Error): void;
    /**
     * This API should be used to clear the error message from the web part display area.
     */
    protected clearError(): void;
    /**
     * Internal API to trigger a refresh to the WebPart's visual rendition.
     * In this implementation of the BaseWebPart class we call the render API.
     *
     * @internal
     */
    protected _refresh(): void;
    /**
     * Internal API triggered by a dynamic property's callback.
     * In this implementation of the BaseWebPart class we call the render API, only if rendered once.
     *
     * @internal
     */
    protected _dynamicPropertyRefresh(): void;
    /**
     * @internal
     */
    protected _internalSetDisplayMode(newDisplayMode: DisplayMode): void;
    /**
     * @internal
     * {@inheritDoc BaseWebPart._internalInitialize}
     */
    protected _internalInitialize(webPartContext: WebPartContext, addedFromPersistedData: boolean, mode: DisplayMode): void;
    /**
     * Internal API for the first time render of the web part. The purpose of this API is to enforce initialization steps
     * before the actual render is called. This API is called only once during the web part loading lifecycle.
     *
     * @returns The promise indicates the render loop is finished (success or fail).
     */
    private _internalFirstTimeRender;
    /**
     * @privateRemarks
     * This method is overridden in the sp-spm library.
     * @internal
     */
    private _internalDelayedRender;
    /**
     * The actual initialization and rendering of the Web part starts when it is close enough
     * to the Viewport
     */
    private _internalRenderInViewPort;
    /**
     * Wraps render to ensure any type of rendering has access to the latest context
     * to provide the most accurate accessible info to screen readers.
     */
    private _renderWithAccessibleTitle;
    /**
     * Start async guard timer. This timer is to help avoid losing performance markers for a web part
     * that renders asynchronously but does not call the `renderCompleted` API;
     */
    private _startAsyncRenderGuardTimer;
    /**
     * Render completed.
     */
    private _renderCompleted;
    /**
     * Async render timed out. Log error information and
     */
    private _asyncRenderTimeout;
    private _clearAsyncRenderGuardTimer;
    /**
     * This is called for every web part whether sync or async once rendering is completed.
     */
    private _resolveOnRenderPromise;
    private _clearRenderPromises;
    private _tryToLogLoadRenderDone;
    private _isSPDPaintStarvationFixKillSwitchActivated;
    private _yieldToEventLoop;
}

/**
 * This abstract class implements the UI-agnostic base functionality for a client-side web part.
 * The purpose is to allow a common core between 2D and MR WebParts.
 *
 * @privateRemarks
 * The _refresh() and _dynamicPropertyRefresh() API are the only API that are
 * mandatory to be implemented by our base WebPart classes.
 *
 * @public
 */
export declare abstract class BaseWebPart<TProperties extends {}> extends BaseComponent implements IPropertyPaneConsumer {
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponent.context}
     */
    protected readonly context: BaseWebPartContext;
    /**
     * @internal
     */
    protected _renderedFromPersistedData: boolean;
    private _displayMode;
    private _properties;
    private _initialized;
    /**
     * Keep a copy of the properties to be used for discard in non-reactive mode and this new set
     * of `properties('_backUpProperties')` is what will be persisted until the apply button is clicked.
     */
    private _backupProperties;
    private _previousState;
    private _baseLogSource;
    private _title;
    private _description;
    /**
     * It makes sure we only log edit events once during one editing session.
     */
    private _hasEditLogged;
    /**
     * Cache init properties value, it would be used to check whether web part has been changed or not.
     */
    private _initPropertiesSnapshot;
    private _loadPropertyPaneResourcesPromise;
    private _emptyResolvedPromise;
    /**
     * The value of this property is stored in the serialized data of the web part to allow developers to manage
     * versioning of their web part. The default version is 1.0
     */
    protected readonly dataVersion: Version;
    /**
     * This property is the current display mode of the web part.
     *
     * @readonly
     */
    protected readonly displayMode: DisplayMode;
    /**
     * This property is the pointer to the custom property bag of the web part.
     *
     * @readonly
     */
    protected readonly properties: TProperties;
    /**
     * This property defines metadata for the web part property bag. The metadata can help SharePoint understand
     * the content of the properties better and perform relevant services on the data.
     *
     * @remarks
     * See {@link IWebPartPropertiesMetadata} for more information about how to define metadata
     */
    protected readonly propertiesMetadata: IWebPartPropertiesMetadata | undefined;
    /**
     * This property is used to change the web part's property pane interaction from Reactive to NonReactive.
     *
     * @remarks
     * The default behavior is Reactive.
     *
     * Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can
     * see instant updates. This helps the page creator get instant feedback and decide if they should keep the new
     * configuration changes or not.
     *
     * NonReactive implies that the configuration changes are transmitted to the web part only after "Apply" PropertyPane
     * button is clicked.
     */
    protected readonly disableReactivePropertyChanges: boolean;
    /**
     * This property points to the preview image for the web part. The base implementation returns undefined. Web parts
     * that want to provide a valid preview image url need to override this API. The preview image url can be used to
     * create a preview of the web part or of the page on which the web part is present.
     */
    protected readonly previewImageUrl: string | undefined;
    /**
     * This property points to the accessible title of web part made available to screen readers. The base implementation
     * returns that default title in the manifest. Web parts that want to provide more descriptive title containing
     * contextual information need to override this API.
     */
    protected readonly accessibleTitle: string;
    /**
     * Title of the WebPart
     *
     * @readonly
     */
    protected readonly title: string;
    /**
     * Description of the WebPart
     *
     * @readonly
     */
    protected readonly description: string;
    /**
     * This property is a pointer to the current set of properties which are already or needs to be persisted.
     *
     * @readonly
     */
    private readonly persistedProperties;
    /**
     * Constructor for the `BaseWebPart` class.
     *
     * @remarks
     * It is highly recommended that the web part use the OnInit API to perform any web part specific initialization.
     * Most of the web part features like this.context and this.properties are not available to be used before the
     * the onInit part of the web part loading lifecycle.
     */
    constructor();
    /**
     * API to get property pane configuration asynchronously.
     *
     * @internal
     */
    _getPropertyPaneData(): Promise<IPropertyPaneData>;
    /**
     * API to enable asynchronous loading of property pane related resources of a web part.
     *
     * @internal
     */
    _loadPropertyPaneResources(): Promise<void>;
    /**
     * Internal API which is invoked when a property field is changed on the property pane.
     * This API is invoked only for the reactive property pane.
     *
     * @remarks
     * If the old value is of type DynamicProperty, but the new value is a static value
     * (This could happen when the 'targetProperty' is same for both a DynamicField on the
     * Dynamic Data Widget and a TextField which represents afore mentioned Dynamic Field
     * when the DD connection is removed by the end user on the property pane UI. In that
     * case, property pane sends in the static value which corresponds to the dynamic property(DP)
     * present before the DD connection is removed)
     *  then to respect the web part developer's choice of that target property being a DP,
     *  we create a new instace of DP and assign the incoming value as the static value
     *    then update the properties bag with the newly created DP instance.
     * else, update the properties bag with the new value for the property.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     * @param newValue - New value of the property.
     *
     * @internal
     */
    _onPropertyPaneFieldChanged(propertyPath: string, newValue: any, /* tslint:disable-line:no-any */ fieldType?: PropertyPaneFieldType): void;
    /**
     * Internal API which is invoked when one of the predefined configuration events
     * (defined in `PropertyPaneLifeCycleEvent` enum.) is triggered.
     *
     * See PropertyPaneLifeCycleEvent for more details on the event definitions.
     *
     * @param event - Type of PropertyPaneLifeCycleEvent.
     * @param isOrWillPaneOpen - Indicates whether the pane is already open to configure or
     *  will open now, to be configured.
     *
     * @internal
     */
    _onPropertyPaneLifeCycleEvent(event: PropertyPaneLifeCycleEvent): void;
    /**
     * Indicates whether the property pane is reactive or not.
     *
     * @remarks
     * The default behavior is Reactive.
     *
     * Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can
     * see instant updates. This helps the page creator get instant feedback and decide if they should keep the new
     * configuration changes or not.
     *
     * NonReactive implies that the configuration changes are transmitted to the web part only after "Apply" PropertyPane
     * button is clicked.
     *
     * @internal
     */
    _isPropertyPaneReactive(): boolean;
    /**
      * Internal API to serialize the web part properties.
      *
      * @internal
      */
    _internalSerialize<T>(): T | undefined;
    /**
     * Internal API to dispose the web part.
     *
     * See onDispose for more details.
     *
     * @internal
     */
    _internalDispose(): void;
    /**
     * Internal API triggered upon a resize of the DOM window's viewport
     *
     * @internal
     */
    _internalOnAfterResize(): void;
    /**
     * This event method is called when the web part is initialized.
     *
     * @remarks
     * This API should be overridden to perform long running operations e.g. data fetching from a remote service before
     * the initial rendering of the web part. The loading indicator is displayed during the lifetime of this method.
     * This API is called only once during the lifecycle of a web part.
     */
    protected onInit(): Promise<void>;
    /**
     * This event method is called when the display mode of a web part is changed.
     *
     * @remarks
     * The default implementation of this API calls
     * the web part render method to re-render the web part with the new display mode. If a web part developer does not
     * want a full re-render to happen on display mode change, they can override this API and perform specific updates
     * to the web part DOM to switch its display mode.
     *
     * @param oldDisplayMode - The old display mode.
     */
    protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void;
    /**
     * This event method is called before the web part is serialized.
     *
     * @remarks
     * The default implementation is a no-op. The serialization
     * process serializes the web part property bag i.e. this.properties. This API gives the web part a chance to
     * update it's property bag before the serialization happens. Some web part's may keep their state other objects
     * or even in the DOM. If a web part needs to persist some of that state, it needs to override this API and update
     * the web part property bag to the latest state. If a web part updates the property bag with invalid property
     * values, those will get persisted. So that should be avoided. The web part property bag should always contain
     * valid property values.
     */
    protected onBeforeSerialize(): void;
    /**
     * This API is called after the web part is deserialized to an object, right before the property bag is populated.
     *
     * @remarks
     * The default implementation is a no-op. A web part developer can override this API if the deserialized object
     * does not fully reflect the initial state of the property bag. This gives the web part developer a chance to
     * populate the property bag right after the data is deserialized to an object.
     *
     * An important scenario to use deserialize is upgrading. An upgraded web part may load the data
     * that was serialized by an older version of the web part that supported a different schema of the property bag,
     * resulting the deserialized object to be incosistent with the current schema of the property bag. The developer
     * can use `onAfterDeserialize` to check the dataVersion and fix the property bag.
     *
     * @param deserializedObject - The object deserialized from the stored data. Note that the schema of  this object
     * is not necessarily consistent with the current property bag, because the serialization could have been done by
     * an older version of the web part
     * @param dataVersion - The data version of the stored data being deserialized. You can use this value to determine
     * if the data was serialized by an older web part. Web parts can define their data version by overriding the
     * dataVersion property.
     *
     * @returns The property bag of the web part
     */
    protected onAfterDeserialize(deserializedObject: any, dataVersion: Version): TProperties;
    /**
     * API to enable asynchronous loading of property pane related resources of the web part.
     *
     * @remarks
     * If not overridden by the web part, base web part resolves the promise immediately.
     *
     * It is called before any of the property pane apis are called and until this promise is resolved,
     * no other property pane related events are called except 'PropertyPaneConfigurationComplete'
     * as this event could be used by the web part to clean up any pending resources including the promise.
     *
     * @privateRemarks
     * This API is still in progress as we are still working on the overall design of how code splitting for
     * web parts should work. This API may change as the plans evolve.
     *
     * @alpha
     */
    protected loadPropertyPaneResources(): Promise<void>;
    /**
     * This API is used to ger the configuration to build the property pane for the web part. If the web part wants
     * to use the PropertyPane for configuration, this API needs to be overridden and the web part needs to return
     * the configuration for the PropertyPane.
     *
     * This API is not invoked until the 'loadPropertyPaneResources' promise is resolved.
     *
     * See IPropertyPane and other PropertyPane integration wiki documentation for more details.
     */
    protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration;
    /**
     * This API should be used to refresh the contents of the PropertyPane.
     *
     * @remarks
     * This API is called at the end of the web part lifecycle on a page. It should be used to dispose any local
     * resources (i.e. DOM elements) that the web part is holding onto. This API is expected to be called in scenarios
     * like page navigation i.e. the host is transitioning from one page to another and disposes the page that is being
     * transitioned out.
     */
    protected onDispose(): void;
    /**
     * This API is invoked after updating the new value of the property in the property bag when the PropertyPane
     * is being used in Reactive mode.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     *  In the case of custom field, if no target property is provided then a custom value is assigned,
     *  which will be in the form of `__CustomField_<key provided when the custom field is created>`.
     * @param oldValue - Old value of the property.
     *  This value could be undefined/empty in the case of custom field.
     * @param newValue - New value of the property.
     *  This value could be undefined/empty in the case of custom field.
     */
    protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void;
    /**
     * This event method is invoked when the configuration starts on the PropertyPane.
     *
     * @remarks
     * This event method is invoked in the following cases:
     *
     *  - When the PropertyPane is opened.
     *
     *  - When the user switches web parts then the new web part gets this event.
     */
    protected onPropertyPaneConfigurationStart(): void;
    /**
     * This API is invoked when the configuration is completed on the PropertyPane.
     *
     * @remarks
     * This event method is invoked in the following cases:
     *
     *  - When the CONFIGURATION_COMPLETE_TIMEOUT((currently the value is 5 secs) elapses after the last change.
     *
     *  - When user clicks the "X" (close) button before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *
     *  - When user clicks the 'Apply' button before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *
     *  - When the user switches web parts then the current web part gets this event.
     */
    protected onPropertyPaneConfigurationComplete(): void;
    /**
     * This API is invoked after the changes made on the PropertyPane are applied when the PropertyPane is used in
     * Non-Reactive mode. This API is not invoked when the PropertyPane is used in Reactive mode.
     */
    protected onAfterPropertyPaneChangesApplied(): void;
    /**
     * This API is invoked when the PropertyPane is rendered.
     *
     * @privateRemarks
     * From framework standpoint, we do not want to allow this event handler to be passed in, and trigger it.
     * This api should be deprecated and then removed as part of refactoring.
     */
    protected onPropertyPaneRendered(): void;
    /**
     * This is the initial entry point, which is called by the `ClientSideWebPartManager` immediately
     * after the web part is constructed.  The initialization contract is internal.
     *
     * @param addedFromPersistedData - Tells the Web Part it will need to reinstate some properties
     * from server processed content (see BaseWebPart._reInstateServerProcessedData)
     *
     * @internal
     */
    protected _internalInitialize(webPartContext: BaseWebPartContext, addedFromPersistedData: boolean, mode: DisplayMode): void;
    /**
     * @internal
     */
    protected _internalGetData(): Promise<void>;
    /**
     * Internal API to trigger a refresh to the WebPart's visual rendition.
     *
     * @internal
     */
    protected abstract _refresh(): void;
    /**
     * Internal API triggered by a dynamic property's callback.
     *
     * @internal
     */
    protected abstract _dynamicPropertyRefresh(): void;
    /**
     * Internal API to switch the web part's display mode. This API updates the display mode and then re-renders the web
     * part in the new mode.
     * @internal
     */
    protected _internalSetDisplayMode(newDisplayMode: DisplayMode): void;
    /**
     * Internal API to set the dirty bit on the web part host if the web part properties have changed.
     * @internal
     */
    protected _internalSetDirtyBit(): void;
    /**
     * Gets default accessible title in the format `"<Web part name> web part"`, such as "Image web part".
     * Note: pulled into own method because TypeScript doesn't allow derived classes to call super protected properties.
     *
     * @internal
     */
    protected _getDefaultAccessibleTitle(): string;
    /**
     * This method consumes the properties object from the serialized data and re-applies
     * the field values from the serverProcessedContent. This process will result in the
     * properties bag as it was when the serialization happened.
     */
    private _reInstateServerProcessedData;
    /**
     * Iterates and validates each metadata property before calling metadata processor.
     *
     * @param metadataProcessor - Callback handler to to process validated metadata.
     * @param properties - Optional Properies to process instead of default this.properties
     * @param iteration - Current iteration in case path is being iterated based on wildcard *
     */
    private _forEachPropertyWithMetaData;
    /**
     * Validates path and iterate over one or multiple wildcard paths
     *
     * @param propPath - Original property path provided in metadata
     * @param properties - Properties to look for the given path.
     * @param propertyPathHandler - Handler to process validated and fixed path
     */
    private _validateAndIteratePath;
    /**
     * Iterates and validates each custom property path before calling custom metadata processor.
     *
     * @param metadata - Web part property metadata containing.
     * @param iteration - Current iteration in case path is being iterated based on wildcard *
     * @param customMetadataProcessor - Responsible for processing custom metadata properties.
     */
    private _foreachCustomMetadata;
    /**
     * Internal base implementation of the web part data deserialization.
     *
     * @param data - web part data
     */
    private _internalDeserialize;
    /**
     * Operations to be done after the property bag is updated.
     *
     * @param shouldRefresh - Indicating whether web part needs to be shouldRefresh or not.
     */
    private _afterPropertyUpdated;
    /**
     * Internal API to update the web part data.
     *
     * !!!WARNING!!! updating the web part data can be risky. If you end up updating the web part properties
     *  to an invalid format, this could cause the web part to persist invalid data format.
     */
    private _internalSetWebPartData;
    /**
     * Fixes up a property pane configuration to use dynamic data. This happens in-place.
     * The fix-up consists on adding the necessary hooks to the web part that are required,
     * like the dynamic data provider, the render function and the object it refers to.
     *
     * @param configuration - Property pane configuration to fix up.
     */
    private _fixUpDynamicDataConfiguration;
    /**
     * The serializer for the exposed part of the web part data
     *
     * @privateRemarks
     * This serialize API is a public candidate for post-GA (after removing the input parameter)
     */
    private _serialize;
    /**
     * Serialize custom metadata as specified by web part
     *
     * @param propertyPath - Property path used as key of the serialized custom metadata
     * @param metadata - Web part property metadata
     * @param properties - Web part persisted properties
     * @param serverProcessedContent - Server processed data's custom metadata is updated
     * @param iteration - Current iteration in case path is being iterated based on wildcard *
     */
    private _internalSerializeCustomMetadata;
    /**
     * This function serializes the Dynamic Data objects from the web part properties into the serialized web part data.
     *
     * If there is a property "myDynamicProperty" in the property bag that points to `"PageContext:user"`,
     * the serialized data is updated as the following:
     * ```
     * serializedData = {
     *   dynamicDataPaths: {
     *     "myDynamicProperty": "PageContext:user"
     *   }
     * }
     * ```
     */
    private _serializeDynamicData;
    /**
     * This function deserializes the Dynamic Data objects from serialized web part data into web part properties.
     *
     * If the serializedData has a "dynamicDataPaths" or "dynamicDataValues" property,
     * it creates DynamicData objects for it.
     *
     * Example:
     * ```
     * serializedData = {
     *   dynamicDataPaths: {
     *     "myDynamicProperty": "PageContext:user"
     *   }
     * }
     * ```
     *
     * This will create a property "myDynamicProperty" in the web parts properties, with a new DynamicData object that
     * points at "PageContext:user"
     */
    private _deserializeDynamicData;
    /**
     * For each property in the serialized properties of the web part, we check if the property is declared
     * as dynamicProperty in the properties metadata of the web part.
     *  - If yes, then we check
     *    - if the value of it is an instance of DynamicProperty
     *      - If No, then we create and assign a DynamicProperty with the type given specified in the
     *        'dynamicPropertyType' property
     *      - else, it's a no-op.
     *  - If no, then it's a no-op
     *
     * While creating the DynamicProperty, we use the pre-configured value associated with that property from
     * the web part's property bag as the default value.
     * @param deSerializedProperties - deserialized properties of the web part.
     */
    private _initializeDynamicPropertiesIfRequired;
    /**
     * Disposing the dynamic properties, for those which are declared as dynamic properties.
     *
     * @privateRemarks
     * We are disposing only the declared dynamic properties because we created them on behalf of
     * the web part and hence it is our responsiblity to clean them.
     */
    private _disposeDynamicPropertiesIfRequired;
    /**
     * Update the web part property if it is in the property bag.
     *
     * @param propertyPath - property path as expected by lodash update (https://lodash.com/docs#update).
     *   (e.g. 'o.a.b', 'o[0].a.b[1].c'). These paths are similar to those in the JSONPath spec described by
     *   Stefan Goessner at (http://goessner.net/articles/JsonPath/). Currently we plan to use lodash.get, has
     *   and update APIs which support paths. Some day we may migrate to using actual JSONPath.js. But that
     *   should not be an issue because the path formatting conventions are same in lodash and JSONPath.
     * @param newValue - new value entered by the user for the associated target property
     */
    private _updateProperty;
    /**
     * Using 'cloneDeepWith' because the web part properties bag will now serialize the
     * dynamic properties as well. One of the building blocks of these properties are dataProviders,
     * which when serialized will result in 'Maximum call stack size exceeded' based on what kind of
     * sources they hold references to.
     * Hence using cloneDeepWith, which lets us handle the special cases and in this case if the property
     * in question is a 'DynamicProperty' and we call '_cloneDeep' api on the dynamicProperty.
     */
    private _cloneProperties;
}

/**
 * Web part context object. This object contains the contextual services available to a web part. e.g.
 * a contextual instance to the http client.
 *
 * This base is to be extended by UI-specific WebPart's base.
 *
 * @public
 */
export declare class BaseWebPartContext extends BaseComponentContext {
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponentContext.manifest}
     */
    readonly manifest: IClientSideWebPartManifestInstance<any>;
    private _webPartTag;
    private _requestPropertyPaneAction;
    private _isPropertyPaneRenderedByWebPart;
    private _isPropertyPaneOpen;
    private _host;
    private _propertyPaneAccessor;
    private _privateDataUpdatedEvent;
    private _formFactor;
    /** @internal */
    constructor(parameters: _IBaseWebPartContextParameters);
    /**
     * Web part tag to be used for logging and telemetry.
     */
    readonly webPartTag: string;
    /**
     * Accessor for common web part property pane operations.
     */
    readonly propertyPane: IPropertyPaneAccessor;
    /**
     * Form factor of the web part.
     *
     * @remarks
     * Web parts may behave differently based on its form factor.
     * E.g. a web part rendering as full size may want to set up different margins that when rendering in a canvas.
     *
     * @beta
     */
    readonly formFactor: WebPartFormFactor;
    /**
     * Web part host.
     *
     * @alpha
     */
    readonly host: IWebPartHost;
    /**
     * Web part properties updated event.
     *
     * @eventproperty
     * @internal
     */
    readonly _dataUpdatedEvent: SPEvent<SPEventArgs>;
}

/**
 * The ClientSideWebPartManager is expected to be the public interface to client-side web parts. Each
 * host is expected to create an instance of this class and manage loading of all web parts in that host
 * through that one instance. e.g. On one page, if there are multiple Canvas objects, each one could have
 * one instance of this class. If the page hosts web parts without the Canvas, then the page can have an
 * instance of this class. Overall this class is expected to provide the following purpose:
 *
 *    - Orchestrates loading of one or more web parts in a host.
 *    - It takes care of loading web part dependencies asynchronously. Each web part loads completely
 *      independently of the other web parts in the host.
 *    - Keep a reference to all the loaded web parts and help provide bulk operations on the web parts.
 *    - Help manage memory leak type issues in one place.
 *    - Integrate the web parts with the PropertyPane and other external entities.
 *    - Help troubleshoot web parts during escalations.
 *
 * @internal
 */
export declare class ClientSideWebPartManager {
    /**
     * Reference to the instances of all ClientSideWebPartManager instances in the app.
     */
    private static readonly _webPartManagerList;
    private static readonly _domainRegex;
    /**
     * Reference to the PropertyPane controller.
     * Note, all instances of ClientSideWebPartManager share the same PropertyPane controller.
     */
    private _propertyPane;
    /**
     * Dictionary of all the active web parts in this insance of the manager.
     */
    private _webparts;
    /**
     * Host for this instance of the web part manager.
     * Note, at the current time there is no support for multiple hosts and the host is not expected to change.
     */
    private _host;
    private _logSource;
    /**
     * Timer to mark the canvas dirty.
     */
    private _dirtyBitTimer;
    /**
     * Number of web parts asked to load, including web parts failed to load.
     */
    private _loadWebPartRequests;
    /**
     * Web part status renderer instance scoped to this web part manager instance.
     */
    private _statusRenderer;
    /**
     * Page context reference.
     */
    private _pageContext;
    /**
     * Promise for the async call to get edit-time web parts.
     */
    private _toolboxManifestsPromise;
    /**
     * Dictionary of all the iframed web parts in this instance of the manager.
     */
    private _iframedWebpartInstanceIds;
    /**
     * Reference to IframedWebPartController instance.
     * The instance is chunked loaded for the first time in 'this.loadWebPart'
     * and should be checked for existence before using.
     */
    private _iframedWebPartController;
    private _propertyPaneLoader;
    private _propertyPaneConsumerQueue;
    /**
     * Number of web parts that has finished rendering, including those that have failed
     */
    private _webPartRenderedCount;
    private _displayMode;
    private static _addPerfProperty;
    /**
     * Returns true if the maintenanceMode query string parameter is provided.
     */
    static readonly isMaintenanceMode: boolean;
    /**
     * Initialize the ClientSideWebPartManager.
     *
     * @param host - Reference to the host. A web part host is a component that is deemed capable of hosting a web
     * part. Any component that implements the IWebPartHost is allowed to host a web part.
     */
    constructor(host: IWebPartHost);
    /**
     * Load a web part in the provided DOM element. Does the following steps
     *
     *    1. Validate params.
     *    2. Validate the web part manifest.
     *    3. Perform an async import of the web part modules from the provided manifest
     *      - i.e ClientSideWebPartManager._loadWebPartModules
     *    4. Instantiate and initialize the web part object
     *      - i.e. ClientSideWebPartManager._initializeWebPart
     *    5. Render the web part in the provided DOM element
     *      - i.e. ClientSideWebPartManager._renderWebPart
     *
     * If an error happens during any of the above steps, catch the error and log it.
     *
     * @param context - web part manager context.
     */
    loadWebPart(context: IWebPartManagerContext): Promise<void>;
    /**
     * Set a IPropertyPaneConsumer object into the set of the Client-side Web Part Manager's
     * managed web parts.
     *
     * @param id - A unique instance id.
     * @param control - A component which wants to use the property Pane.
     *
     * @internal
     */
    setPropertyPaneConsumer(id: string, control: IPropertyPaneConsumer): void;
    /**
     * Fetch web part manifests. This makes a REST call to load the current site's web parts into the module loader.
     */
    fetchWebPartManifests(): Promise<void>;
    /**
     * Get list of active web part manifests.
     *
     * @returns - array of manifests.
     */
    getWebPartManifests(): IClientSideWebPartManifest<any>[];
    /**
     * Set the display mode of the specified web part. If no web part id is specified, switch mode of all web parts.
     * If the display mode passed is same as the current mode, no change is applied.
     *
     * @param displayMode - the new DisplayMode.
     * @param instanceId - instance id of the web part.
     */
    setDisplayMode(displayMode: DisplayMode, instanceId?: string): void;
    /**
     * @internalremarks Only use this API if you need to immediately call property pane APIs after switching the mode.
     * @internal
     */
    _setDisplayMode(displayMode: DisplayMode, instanceId?: string): Promise<void>;
    /**
     * Serialize the specified web part. If no web part is specified, serialize all web parts.
     *
     * @param instanceId - instance id of the web part.
     */
    serialize(instanceId?: string): Map<string, IWebPartData | undefined>;
    /**
     * Set the web part data for the specified web part and re-render it.
     *
     * @param webPartData - the new web part data.
     * @param instanceId - instance id of the web part.
     */
    setWebPartData(webPartData: IWebPartData, instanceId: string): void;
    /**
     * Dispose of the current webpart manager and all of the webparts it has loaded.
     */
    dispose(): void;
    /**
     * Dispose the specified web part. If no web part is specified, dispose all web parts.
     *
     * @param instanceId - instance id of the web part.
     */
    disposeWebparts(instanceId?: string): void;
    tryGeneratePreviewImageUrl(instanceIds?: string[]): string | undefined;
    /**
     * Request property pane to perform the given action.
     *
     * @param instanceId - web part instance id.
     * @param propertyPaneAction - indicates what action needs to be performed on the property pane.
     * @param renderedByWebPart - indicates whether the the property pane rendered by a web part or not.
     */
    requestPropertyPaneAction(instanceId: string, propertyPaneAction?: PropertyPaneAction_2, renderedByWebPart?: boolean): void;
    /**
     * Returns true if the current property pane source is a web part and not the Canvas or any other source.
     */
    isPropertyPaneRenderedByWebPart(): boolean;
    /**
     * Returns the state of the PropertyPane if it is open or not.
     */
    isPropertyPaneOpen(): boolean;
    /**
      * Method to handle the web part delete action from the host. There is a key distinction between delete and dispose.
      * Delete implies that the web part has been deleted from the page and the web part should dispose all the server
      * side or other external resources attached to the web part. Dispose implies that an in-place navigation is
      * happening and the web part manager should delete the web part from its cache.
      *
      * @param instanceId - instance id of the webpart which is deleted.
      */
    onWebPartDelete(instanceId: string): void;
    /**
     * Render an error message in the web part container div.  Also logs the error message to the IWebPartHost logger.
     */
    renderError(domElement: HTMLElement, error: Error): void;
    /**
     * Notify webparts that their container has resized.
     *
     * @param instanceId - if specified only notify one webpart that its container has resized
     */
    notifyWebPartContainerResize(instanceId?: string): void;
    /** ------------------- PROTECTED ------------------- **/
    /**
     * Generate web part context.
     */
    protected _getWebPartContext(context: IWebPartManagerContext): WebPartContext;
    /** ------------------- PRIVATE ------------------- **/
    /**
     * Loads the web part component and any dynamic dependencies.
     */
    private _loadWebPartModules;
    /**
     * Invoked whenever a web part is rendered including situations where any errors have occurred
     */
    private _onWebPartRendered;
    /**
     * Workaround for a server issue - disambiguate manifest locales if they haven't already been disambiguated
     * (VSO#243888) tracks fixing this issue.
     */
    private _disambiguateWebPartManifestLocales;
    /**
     * Validate and process input parameters.
     */
    private _validateInput;
    /**
     * Validate the web part manifest.
     */
    private _validateManifest;
    /**
     * Execute the provided callback for the list of provided web part ids. If no list if provided,
     * execute the callback on all web parts.
     */
    private _executeForIdsOrAll;
    private _instanceOfBase;
    private _getLoadedModuleList;
    /**
     * This is a temporary implementation of updating the host that a web part has updated properties.
     * Currently we run a timer that regularly checks for updated properties and raises the dirty bit
     * handler to the host. todo (VSO SPPPLAT#200728) tracks fixing this scenario in a better way.
     */
    private _startDirtyBitTimer;
    /**
     * Creates a new extra data object for writing successes to QosMonitor.
     */
    private _createSuccessExtraData;
    /**
     * Creates a new extra data object for writing unexpected failures to QosMonitor.
     */
    private _createUnexpectedFailureExtraData;
    /**
     * Creates a new QosMonitor with a scenario name specific to the web part type.
     */
    private _createLoadQosMonitor;
    /**
     * Create the web part tag. Web part tag is a unique tag per web part instance and is used for logging and telemetry.
     */
    private _createWebPartTag;
    private _deleteWebPart;
    /**
     * Get web part manifest instance from manifest. Promotes the pre-configured entries.
     */
    private _getManifestInstance;
    /**
     * If non-non parameter passed, return array else return undefined.
     */
    private _getArrayOrUndefined;
    private _initialzeOnResizeEventHandler;
    /**
     * Window onresize event handler.
     */
    private _onContainerResize;
    /**
     * Listener for window post message that the property pane.
     *
     * @todo(SPPPLAT Bug #299413): Implement missing schema for property pane post messages
     * @todo(SPPPLAT PBI #687467): Refactor IframedWebPartContoller
     */
    private _onPropertyPaneNotifications;
    /**
     * When all web parts added, check if in viewport web parts are rendered
     * If so then notify viewport loader to load rest of the web parts gradually.
     */
    private _onAllWebpartsAdded;
    private _onViewportWebpartsLoaded;
    /**
     * Return endtime of last rended web part if all web parts in the view port has rendered for current web part
     * manager instance, undefined otherwise.
     */
    private _getViewportRenderedEndTime;
    /**
     * Add all web parts in the viewport to the EUPL calculation
     */
    private _registerWebpartsInViewport;
    /**
    * Converts Module library into Internal Web part object.
    * Throws Exception if unexpectd found
    */
    private _instantiateWebPart;
    /**
     * Handle when exception occurred loading web part
     */
    private _handleErrorLoadingWebpart;
    /**
     * handle when Module Promise is rejected
     */
    private _handleModulePromiseRejection;
    private _onFirstTimeWebpartRender;
    private _getDataUpdatedEventName;
    private _initializeWebPart;
    private _renderWebPart;
    /**
     * Load all valid dynamic dependencies and adds into moduleLoadPromises param.
     *
     * This is the core of dynamic dependency web part has provided through metadata. Framework ensures that the such
     * dependency is loaded for the web part before it starts rendering. Ideally this component's js bundle should be
     * already downloaded by server script preloading feature for first few web parts in viewport.
     */
    private _loadDynamicComponentDependencies;
    /**
     * Registers a component as a property pane consumer.
     * @param instanceId - Instance id of the consumer, to be registered with the property pane.
     */
    private _registerWebPartAsPropertyPaneConsumer;
    /**
     * Creates an absolute url with the isolatedDomain parameter.
     * @param isolatedDomain - a domain without the protocol. Ex: "PrepSPO-appFEEAB5CE1CB0421FB1AAE5D09E0A8AAA.spgrid.com"
     * @param absoluteUrl - url with protocol that may or may not contain a path. Ex: "https://prepspo.spgrid.com"
     */
    private _ensureUrl;
    /**
     * Loads the property pane module asynchronously, if not already loaded.
     */
    private _loadPropertyPaneModule;
    private _registerPendingPropertyPaneConsumers;
    private _closeIsolatedPropertyPaneIfRequired;
    /**
     * Load the fabric core library, for third-party web parts if required.
     * @param context - Current context of the web part manager
     * @param qosMonitor - qos monitor for the current flow
     */
    private _loadLegacyFabricCssIfRequired;
}

/**
 * The ClientSideWebPartManagerFactory is the web part manager instance used
 * when the web parts are rendered in maintenance mode.
 *
 * @internal
 */
export declare class ClientSideWebPartManagerFactory {
    static create(host: IWebPartHost): ClientSideWebPartManager;
}

/**
 * Enum for the possible values of shared depth of the dynamic data reference.
 *
 * @public
 * @deprecated This is obsolete now. This enum has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare const enum DynamicDataSharedDepth {
    /**
     * Indicates that nothing is shared.
     */
    None = 0,
    /**
     * Indicates that the dynamic data source is shared.
     */
    Source = 1,
    /**
     * Indicates that both the dynamic data source and the property are shared.
     */
    Property = 2
}

/**
 * Constructor parameters for BaseWebPartContext.
 * This base interface represents the parameters for the UI-agnostic BaseWebPart.
 *
 * @internal
 */
export declare interface _IBaseWebPartContextParameters extends _IComponentContextParameters {
    /**
     * Manifest for the client-side web part.
     */
    readonly manifest: IClientSideWebPartManifestInstance<any>;
    /**
     * Web part instance id. This is a globally unique value.
     */
    readonly instanceId: string;
    /**
     * Web part tag to be used for logging and telemetry.
     */
    readonly webPartTag: string;
    /**
     * Is the property pane rendered by a web part and not by Canvas or any other source.
     */
    readonly isPropertyPaneRenderedByWebPart: () => boolean;
    /**
     * Indicates whether the PropertyPane is open or not.
     */
    readonly isPropertyPaneOpen: () => boolean;
    /**
     * Form factor of the web part.
     */
    readonly formFactor: WebPartFormFactor;
    /**
     * Web part host.
     *
     * @alpha
     */
    readonly host: IWebPartHost;
    /**
     * Web part data updated event.
     *
     * @eventproperty
     * @internal
     */
    readonly _dataUpdatedEvent: SPEvent<SPEventArgs>;
    /**
     * Request property pane to perform the given action.
     *
     * @privateRemarks
     * This is not currently exposed via IWebPartContext.
     */
    readonly requestPropertyPaneAction: (id: string, propertyPaneAction?: PropertyPaneAction_2, renderedByWebPart?: boolean) => void;
}

/**
 * Interface to be implemented by a component that should display the loading indicator and
 * error messages for a web part.
 *
 * @public
 */
export declare interface IClientSideWebPartStatusRenderer {
    /**
     * Display a loading spinner.
     * @param domElement - the web part container div.
     * @param loadingMessage - the message to be displayed when the loading spinner id displayed.
     * @param timeout - timeout to render the loading indicator. Default is 1500ms.
     */
    displayLoadingIndicator(domElement: Element, loadingMessage: string, timeout?: number): void;
    /**
     * Clear the loading indicator.
     * @param domElement - the web part container div.
     */
    clearLoadingIndicator(domElement: Element): void;
    /**
     * Render the provided error message in the webpart container div.
     * @param domElement - the web part container div.
     * @param error - the error message.
     */
    renderError(domElement: HTMLElement, error: Error | string): void;
    /**
     * Clear the webpart error message.
     * @param domElement - the web part container div.
     */
    clearError(domElement: HTMLElement): void;
}

/**
 * Configuration related to a shared property.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IDynamicDataSharedPropertyConfiguration extends SPPropertyPane.IDynamicDataSharedPropertyConfiguration {
}

/**
 * Property pane dynamic data property filters.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IDynamicDataSharedPropertyFilters extends SPPropertyPane.IDynamicDataSharedPropertyFilters {
}

/**
 * Configuration related to a shared source.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IDynamicDataSharedSourceConfiguration extends SPPropertyPane.IDynamicDataSharedSourceConfiguration {
}

/**
 * Property pane dynamic data source filters.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IDynamicDataSharedSourceFilters extends SPPropertyPane.IDynamicDataSharedSourceFilters {
}

/**
 * Strings for the 'action' property on IIframedWebPartMessage.
 * @internal
 */
export declare const enum _IframedWebPartAction {
    /**
     * An action to delete the web part.
     */
    DeleteWebPart = "iframeDeleteWebPart",
    /**
     * An action to request the current DisplayMode of a WebPart.
     */
    RequestDisplayMode = "iframeRequestDisplayMode",
    /**
     * An action requested on the PropertyPane.
     */
    RequestPropertyPaneAction = "iframeRequestPropertyPaneAction",
    /**
     * An action to set the DisplayMode of an iframed WebPart.
     */
    SetDisplayMode = "iframeSetDisplayMode",
    /**
     * An action to set the dimensions of the iframe to match it's embed contents.
     * Example dimensions: height and/or width.
     */
    SetDimensions = "iframeSetDimensions",
    /**
     * An action from the IframedWebPartController to the window that
     * is showing the WebPart or PropertyPane.
     */
    SetWebPartData = "iframeSetWebPartData",
    /**
     * An action to update the WebPart with the data changed by the PropertyPane.
     */
    UpdateWebPartData = "iframeUpdateWebPartData",
    /**
     * An action to update the PropertyPane with the data changed by the rendered WebPart.
     */
    UpdatePropertyPaneData = "iframeUpdatePropertyPaneData",
    /**
     * The action corresponds to a PropertyPane lifecycle event.
     */
    UpdatePropertyPaneLifeCycle = "iframePropertyPaneLifeCycle",
    /**
     * Action to indicate that the web part is rendered in the iframe application
     * where the property pane is to be rendered.
     */
    WebPartRenderedInPropertyPaneIframe = "webPartRenderedInPropertyPaneIframe"
}

/**
 * Event data that is sent via a 'window.postMessage()' function call for the purposes
 * of executing lifecycle methods between the SpWebPartApplication and the IframedWebPartController.
 * @internal
 */
export declare interface _IIframedWebPartMessage {
    /**
     * The WebPart instanceId that is associated with the WebPartData.
     */
    instanceId: string;
    /**
     * The action that this data corresponds to.
     */
    action: _IframedWebPartAction;
    /**
     * The height of the content within the iframe.
     */
    height?: number;
    /**
     * Optional IWebPartData, not all actions require web part data.
     */
    webPartData?: IWebPartData;
    /**
     * The display mode of the WebPart.
     */
    displayMode?: DisplayMode;
    /**
     * An action requested on the PropertyPane.
     */
    propertyPaneAction?: PropertyPaneAction_2;
    /**
     * The lifecycle event of the PropertyPane.
     */
    propertyPaneLifeCycleEvent?: PropertyPaneLifeCycleEvent;
}

/**
 * @internal
 */
export declare interface IInternalWebPartData extends IWebPartData {
    /**
     * HTML markup equivalent for searchable properties and properties that need link fixup.
     *
     * @remarks
     *
     * Supported values: a string containing pseudo HTML.
     *
     * Example: `"<div>searchable_property_value</div><link href='http://contoso.com/path_of_link.aspx' />"`
     *
     * @deprecated Replaced by serverProcessedContent
     */
    htmlProperties?: string;
}

/**
 * Props required by the minimal web part container component.
 * @internal
 */
export declare interface _IMinimalWebPartContainerProps {
    serviceScope: ServiceScope;
    webPartInstanceId: string;
    webPartData: IWebPartData;
    manifest: IClientSideWebPartManifest<any>;
    host: IWebPartHost;
    formFactor: WebPartFormFactor;
    /**
     * The display mode to initialize the web part in. This will override the
     * openPropertyPane setting.
     */
    displayMode?: DisplayMode;
    /**
     * An optional flag to signal that the property pane should be displayed
     * in this container. Default is false.
     */
    openPropertyPane?: boolean;
    /**
     * An optional callback that will be called after the web part has been rendered and
     * we can get the dimensions information from it. The dimensions will be
     * sent to the containing application which will then resize the element that holds
     * this container.
     * An example of this scenario is when an iframe displays this container, we want
     * to send the dimensions to the iframe so that the iframe's dimensions
     * can be set accordingly.
     */
    sendDimensionsToParent?: (height: number) => void;
    /**
     * An optional callback that will be called after the web part has
     * rendered, the callback function requests that the 'displayMode' be sent
     * to the containing application and then the container should set the accurate
     * 'displayMode' on the web part via the 'webPartManager'..
     * This callback Should be provided if the display mode is determined before
     * the web part is rendered.
     */
    requestDisplayModeStatus?: () => void;
}

/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file interfaces to access web part property pane APIs.
 */
/**
 * Web part context property pane accessor interface. Provides some most commonly used operations
 * to access the property pane.
 *
 * @public
 */
export declare interface IPropertyPaneAccessor {
    /**
     * This API should be used to open the PropertyPane to help configure the web part.
     */
    open(): void;
    /**
     * This API should be used to close the PropertyPane to help configure the web part.
     */
    close(): void;
    /**
     * This API should be used to invoke the PropertyPane to help configure the web part.
     *
     * @remarks
     * This operation only works when the PropertyPane is already open for the currently active web part.
     * If the PropertyPane is opened for another web part, calling the refresh API will have no impact.
     */
    refresh(): void;
    /**
     * Indicates whether the PropertyPane was initially opened by the web part.
     * @remarks
     * For example, if the web part calls this.context.propertyPane.open() then the property would be true,
     * whereas if the property pane was opened by the host, then the value will be false.
     */
    isRenderedByWebPart(): boolean;
    /**
     * Returns true if the PropertyPane is open.
     */
    isPropertyPaneOpen(): boolean;
}

/**
 * PropertyPane button props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneButtonProps extends SPPropertyPane.IPropertyPaneButtonProps {
}

/**
 * PropertyPane CheckBox component props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneCheckboxProps extends SPPropertyPane.IPropertyPaneCheckboxProps {
}

/**
 * PropertyPane ChoiceGroup option props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneChoiceGroupOption extends SPPropertyPane.IPropertyPaneChoiceGroupOption {
}

/**
 * PropertyPane ChoiceGroup icon props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneChoiceGroupOptionIconProps extends SPPropertyPane.IPropertyPaneChoiceGroupOptionIconProps {
}

/**
 * PropertyPane ChoiceGroup props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneChoiceGroupProps extends SPPropertyPane.IPropertyPaneChoiceGroupProps {
}

/**
 * Property pane conditional group.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneConditionalGroup extends SPPropertyPane.IPropertyPaneConditionalGroup {
}

/**
 * Web part configuration settings
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneConfiguration extends SPPropertyPane.IPropertyPaneConfiguration {
}

/**
 * PropertyPane CustomPropertyField props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneCustomFieldProps extends SPPropertyPane.IPropertyPaneCustomFieldProps {
}

/**
 * PropertyPane dropdown callout properties.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneDropdownCalloutProps extends SPPropertyPane.IPropertyPaneDropdownCalloutProps {
}

/**
 * PropertyPane drop down options.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneDropdownOption extends SPPropertyPane.IPropertyPaneDropdownOption {
}

/**
 * PropertyPane drop down component props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneDropdownProps extends SPPropertyPane.IPropertyPaneDropdownProps {
}

/**
 * Property pane dynamic field filters which is an intersection of both
 * source and property filters.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneDynamicFieldFilters extends SPPropertyPane.IPropertyPaneDynamicFieldFilters {
}

/**
 * PropertyPaneDynamicField props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneDynamicFieldProps extends SPPropertyPane.IPropertyPaneDynamicFieldProps {
}

/**
 * PropertyPane DynamicFieldSet props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneDynamicFieldSetProps extends SPPropertyPane.IPropertyPaneDynamicFieldSetProps {
}

/**
 * `PropertyPaneDynamicData` component props.
 *
 * @beta
 * @deprecated - This has been replaced by IPropertyPaneDynamicFieldProps
 */
export declare interface IPropertyPaneDynamicTextFieldProps extends SPPropertyPane.IPropertyPaneDynamicTextFieldProps {
}

/**
 * PropertyPane field.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneField<TProperties> extends SPPropertyPane.IPropertyPaneField<TProperties> {
}

/**
 * PropertyPane group. Group is part of the PropertyPanePage.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneGroup extends SPPropertyPane.IPropertyPaneGroup {
}

/**
 * PropertyPaneLabel component props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneLabelProps extends SPPropertyPane.IPropertyPaneLabelProps {
}

/**
 * Callback for the property pane life cycle event.
 *
 * @alpha
 */
export declare interface IPropertyPaneLifeCycleEventCallback {
    (event: PropertyPaneLifeCycleEvent, data: IPropertyPaneLifeCycleEventData): void;
}

/**
 * Data returned by the web part to the host when invoking the propertyPaneLifeCycleEventCallback.
 * @alpha
 */
export declare interface IPropertyPaneLifeCycleEventData {
    /**
     * Serialized web part data.
     */
    webPartData: IWebPartData;
    /**
     * Indicates whether the property pane associated with the web part is reactive or not.
     */
    isPropertyPaneReactive: boolean;
}

/**
 * PropertyPaneLink component props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneLinkProps extends SPPropertyPane.IPropertyPaneLinkProps {
}

/**
 * PropertyPanePage interface.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPanePage extends SPPropertyPane.IPropertyPanePage {
}

/**
 * PropertyPane header.
 * This header remains same for all the pages.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPanePageHeader extends SPPropertyPane.IPropertyPanePageHeader {
}

/**
 * PropertyPaneSliderProps component props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneSliderProps extends SPPropertyPane.IPropertyPaneSliderProps {
}

/**
 * PropertyPaneTextField component props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneTextFieldProps extends SPPropertyPane.IPropertyPaneTextFieldProps {
}

/**
 * PropertyPaneToggle component props.
 *
 * @public
 * @deprecated This is obsolete now. This interface has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare interface IPropertyPaneToggleProps extends SPPropertyPane.IPropertyPaneToggleProps {
}

/**
 * Contains collections of data that can be processed by server side services like search index and link fixup
 *
 * @public
 */
export declare interface ISerializedServerProcessedData {
    /**
     * A key-value map where keys are string identifiers and values are rich text with HTML format.
     *
     * @remarks
     * SharePoint servers treat the values as HTML content and run services like safety checks, search index
     * and link fixup on them.
     *
     * Example:
     * ```
     * {
     *   'myRichDescription': '<div>Some standard <b>HTML content</b><a href='http://somelink'>A Link</a></div>'
     *   'anotherRichText': <div class='aClass'><span style='color:red'>Some red text</div>
     * }
     * ```
     *
     */
    htmlStrings?: {
        [key: string]: string;
    };
    /**
     * A key-value map where keys are string identifiers and values are strings that should be search indexed.
     *
     * @remarks
     * The values are HTML-encoded before being sent to the server. The encoded values are visible to the search
     * indexer, but are not treated as valid HTML. So, other services such as link fixup will not run on them.
     *
     * Example:
     * ```
     * {
     *  'justSomeText': 'This is some plain text',
     *  'anotherText': 'Can have <any> characters here: "<>&\''
     * }
     * ```
     */
    searchablePlainTexts?: {
        [key: string]: string;
    };
    /**
     * A key-value map where keys are string identifiers and values are links.
     *
     * @remarks
     * SharePoint servers treat the values as links and run services like link fixup on them.
     *
     * Example:
     * ```
     * {
     *   'myWebURL': 'http://contoso.com'
     *   'myFileLink': 'https://res.contoso.com/file.docx'
     * }
     * ```
     */
    links?: {
        [key: string]: string;
    };
    /**
     * A key-value map where keys are string identifiers and values are image sources.
     *
     * @remarks
     * SharePoint servers treat the values as image sources and run services like search index and link fixup on them.
     *
     * Example:
     * ```
     * {
     *   'myImage1': 'http://res.contoso.com/path/to/file'
     *   'myImage2': 'https://res.contoso.com/someName.jpg'
     * }
     * ```
     */
    imageSources?: {
        [key: string]: string;
    };
    /**
     * A key-value map where keys are string identifiers and values are component ids.
     *
     * @remarks
     * SharePoint servers might decide to use this hint to preload the script for corresponding components for
     * performance boost.
     *
     * Example:
     * ```
     * {
     *   'layoutComponent': 'abfccb4d-fcbc-4720-8bcc-6183ce66c391',
     *   'dataComponent': 'f0baf432-de3f-4f0f-8444-d1280b2f8cc5'
     * }
     * ```
     * @alpha
     */
    componentDependencies?: {
        [key: string]: string;
    };
    /**
     * A key-value map where keys are string identifier and values are object of custom key-value pair
     *
     * @remarks
     *
     * SharePoint servers might treat custom medata values in context of the other properties like imageSources.
     * E.g. When the key of imageSources and customMetadata is same, custom metadata can be used to expand information
     * of image data.
     *
     * Example:
     * ```
     * ISerializedServerProcessedData {
     *   imageSources: {
     *    'myImage1': 'http://res.contoso.com/path/to/file',
     *    'myImage2': 'https://res.contoso.com/someName.jpg'
     *   },
     *
     *   customMetadata: {
     *     'myImage1': {'height': '100', 'width': '100'}
     *     'myImage2': {'height': '400', 'width': '600'}
     *   }
     * }
     * ```
     *
     * @privateRemarks
     *
     * We should find a way to associate type to this object before this API becomes available to 3rd
     * parties. (SPPPLAT VSO bug#504028) tracks that fix. For now, we are not doing that because that will require a
     * bigger public API change to exiting APIs. We do not want to change existing public APIs before we make this
     * feature available to third parties.
     *
     * @alpha
     */
    customMetadata?: {
        [key: string]: {
            [key: string]: {};
        };
    };
}

/**
 * This structure represents the part of the serialized state of a web part which is controlled by the web part.
 * It is extended by IWebPartData which contains additional data added by the framework to the serialized data.
 *
 * @public
 */
export declare interface ISerializedWebPartData {
    /**
     * Web part data version.
     *
     * @remarks
     * Note that data version is different from the version field in the manifest.
     * The manifest version is used to control the versioning of the web part code, while data version is used to
     * control the versioning of the serialized data of the web part. Refer to dataVersion field of your web part
     * for more information.
     *
     * Supported values: MAJOR.MINOR
     *
     * Example: `"1.0"`
     */
    dataVersion: Version;
    /**
     * Web part specific properties. The individual web part owns the definition of these properties.
     *
     * @remarks
     * Used by the web part to manage its internal metadata and config data. The framework code never
     * touches these properties.
     *
     * Supported values: any JSON stringifiable object hierarchy.
     *
     * Example: `{ 'value': 'text value' }`
     */
    properties?: any;
    /**
     * The collections of data that can be processed by server side services like search index and link fixup.
     */
    serverProcessedContent?: ISerializedServerProcessedData;
    /**
     * Paths for the dynamic data. This is used to reconstruct the dynamic data objects when deserializing the web part.
     *
     * @remarks
     * The key is the path within the web part properties, and the value is the dynamic data internal id.
     *
     * Example:
     * ```
     * {
     *   'pageContextUser':
     *     'PageContext:user',
     *   'anotherWebPartProperty':
     *     'WebPart.c3be45f2-7cd9-4e92-9c6c-a01d24dc04cf.3d6307e4-c8e1-4b2d-bef9-f1689c6eb7ea:aProperty'
     * }
     * ```
     *
     * @beta
     */
    dynamicDataPaths?: {
        [path: string]: string;
    };
    /**
     * Static values for the dynamic data. This is used to reconstruct the dynamic data objects when
     * deserializing the web part.
     *
     * @remarks
     * The key is the path within the web part properties, and the value is the dynamic data static value.
     *
     * Example:
     * ```
     * {
     *   'aStringProperty': 'thisIsAString',
     *   'aBooleanProperty': true
     * }
     * ```
     *
     * @beta
     */
    dynamicDataValues?: {
        [path: string]: any;
    };
}

/**
 * The base context interface for client-side web parts.
 *
 * @remarks
 * A "context" object is a collection of well-known services and other
 * objects that are likely to be needed by any business logic working with
 * a component.  Each component type has its own specialized extension of
 * this interface, e.g. IWebPartContext for web parts, IExtensionContext for
 * client-side extensions, etc.
 *
 * @deprecated This interface will be removed in an upcoming release.  Use the
 * {@link WebPartContext} class instead.
 *
 * @privateRemarks
 *
 * NOTE: The context object is a convenience that avoids the overhead of
 * properly factoring the dependencies for each class in your project,
 * in a situation where most classes have essentially the same dependencies.
 * If lots of members are added to the context without displine, it can
 * easily devolve into a poor engineering practice (where "everything depends
 * on everything else").  Think carefully before adding more objects to this
 * interface.
 *
 * Only add data properties or well-defined classes with ubiquitous applicability.
 * Do not add loose functions, callbacks, or settable properties.
 *
 * @public
 */
export declare interface IWebPartContext {
    /**
     * Manifest for the client-side web part.
     */
    readonly manifest: IClientSideWebPartManifestInstance<any>;
    /**
     * Web part instance id. This is a globally unique value.
     */
    readonly instanceId: string;
    /**
     * Web part tag to be used for logging and telemetry.
     */
    readonly webPartTag: string;
    /**
     * Reference to the DOM element that hosts this client-side component.
     */
    readonly domElement: HTMLElement;
    /**
     * HttpClient instance scoped to this web part.
     */
    readonly httpClient: HttpClient;
    /**
     * SPHttpClient instance scoped to this web part.
     */
    readonly spHttpClient: SPHttpClient;
    /**
     * GraphHttpClient instance scoped to this web part.
     *
     * @beta
     */
    readonly graphHttpClient: GraphHttpClient;
    /**
     * SharePoint page context.
     */
    readonly pageContext: PageContext;
    /**
     * Web part status renderer.
     */
    readonly statusRenderer: IClientSideWebPartStatusRenderer;
    /**
     * Accessor for common web part property pane operations.
     */
    readonly propertyPane: IPropertyPaneAccessor;
    /**
     * Web part host.
     *
     * @alpha
     */
    readonly host: IWebPartHost;
    /**
     * Web part data updated event.
     *
     * @eventproperty
     * @internal
     */
    readonly _dataUpdatedEvent: SPEvent<SPEventArgs>;
}

/**
 * Constructor parameters for WebPartContext
 *
 * @internal
 */
export declare interface _IWebPartContextParameters extends _IBaseWebPartContextParameters {
    /**
     * Reference to the DOM element that hosts this client-side component.
     */
    readonly domElement: HTMLElement;
    /**
     * Web part status renderer.
     */
    readonly statusRenderer: IClientSideWebPartStatusRenderer;
    /**
     * Microsoft Teams SDK. Only provided when the web part is loaded in Teams.
     */
    readonly microsoftTeams?: typeof teamsJs;
}

/**
 * This structure represents the serialized state of a web part.
 *
 * @remarks
 * When the `serialize()` API is called on a web part, the output should be this structure.
 * The structure of the 'properties' field is owned by the web part and is specific to the web part.
 * Each web part can decide the set of properties it wants to serialize.
 *
 * @public
 */
export declare interface IWebPartData {
    /**
     * Universally unique web part Type id.
     *
     * @remarks
     *
     * Example: `"dbef608d-3ad5-4f8f-b139-d916f2f0a294"`
     */
    id: string;
    /**
     * Universally unique instance id of the web part. A web part can have multiple instances on a page.
     * This id is expected to be universally unique across time and page boundaries.
     *
     * @remarks
     * supported values: a unique string. Could be GUID or other uniquely identifiable formats.
     *
     * example: `["dbef608d-3ad5-4f8f-b139-d916f2f0a294"]`
     */
    instanceId: string;
    /**
     * Web part title
     *
     * @remarks
     * Used to display the name of the web part in the toolbox, web part gallery and the page.
     *
     * Supported values: string less than 100 characters
     *
     * Example: `"Text"`
     */
    title: string;
    /**
     * Web part description
     *
     * @remarks
     * Used to display the description of the web part.
     *
     * Supported values: string with the description.
     *
     * Example: `"Text"`
     */
    description?: string;
    /**
     * Web part data version
     *
     * @remarks
     * Note that data version is different from the version field in the manifest.
     * The manifest version is used to control the versioning of the web part code, while data version is used to
     * control the versioning of the serialized data of the web part. Refer to dataVersion field of your web part
     * for more information.
     *
     * Supported values: MAJOR.MINOR
     *
     * Example: `"1.0"`
     */
    dataVersion: string;
    /**
     * Web part specific properties. The individual web part owns the definition of these properties.
     *
     * @remarks
     * Used by the web part to manage its internal metadata and config data. The framework code never
     * touches these properties.
     *
     * Supported values: any object hierarchy that can be serialized using  `JSON.stringify()`.
     *
     * Example: `{ 'value': 'text value' }`
     */
    properties?: any;
    /**
     * The collections of data that can be processed by server side services like search index and link fixup
     */
    serverProcessedContent?: ISerializedServerProcessedData;
    /**
     * Paths for the dynamic data.
     *
     * @remarks
     * This is used to reconstruct the dynamic data objects when deserializing the web part.
     * The key is the path within the web part properties, and the value is the dynamic data internal id.
     *
     * Example:
     * ```
     * {
     *   'pageContextUser':
     *     'PageContext:user',
     *   'anotherWebPartProperty':
     *     'WebPart.c3be45f2-7cd9-4e92-9c6c-a01d24dc04cf.3d6307e4-c8e1-4b2d-bef9-f1689c6eb7ea:aProperty'
     * }
     * ```
     *
     * @beta
     */
    dynamicDataPaths?: {
        [path: string]: string;
    };
    /**
     * Static values for the dynamic data.This is used to reconstruct the dynamic data objects when
     * deserializing the web part.
     *
     * @remarks
     * The key is the path within the web part properties, and the value is the dynamic data static value.
     *
     * Example:
     * ```
     * {
     *   'aStringProperty': 'thisIsAString',
     *   'aBooleanProperty': true
     * }
     * ```
     *
     * @beta
     */
    dynamicDataValues?: {
        [path: string]: any;
    };
    /**
     * Describes the level of isolation needed for the web part.
     *
     * @alpha
     */
    isolationLevel?: WebPartIsolationLevel;
}

/**
 * A web part host is a component, control or a page that hosts client-side web parts.
 * The web part infrastructure provides many features inbuilt e.g. an HttpClient to make
 * server requests and the SPPageContext. The porpose of this interface is not to replicate
 * those feature. This interface outlines the services and features where there needs to be
 * a direct interaction between the host and the web part infrastructure. This interface also
 * outlines some services where the web part host may want to override the default
 * implementations provided by the infrastructure. Let us discuss some examples:
 *
 *  - APIs like setDirty, PropertyPaneLifeCycleEventCallback help the web part infrastucture
 *    communicate the fact that some web part is in a dirty state  or web part communication
 *    events to the host.
 *
 * - In future we expect that this interface will be used to provide services where the host
 *   might want to override the default implemenations. e.g.
 *   - the web part status rendering service. The default implementation of this service
 *     provides an office fabric spinny. But a certain host could easily want to show a
 *     different spinny.
 *
 *   - The event aggregation service. Currently the web part manager hosts a single event
 *     event aggregator. But there are possibilities when a page can have multiple hosts
 *     and each host may want to scope its event aggregation service.
 *
 * @alpha
 */
export declare interface IWebPartHost {
    /**
     * The current ServiceScope.
     */
    readonly serviceScope: ServiceScope;
    /**
     * API for the webpart to mark the containing host as dirty.
     */
    setDirty?: (instanceId: string, data?: any) => void;
    /**
     * Callback for a Property pane life cycle event.
     */
    propertyPaneLifeCycleEventCallback?: IPropertyPaneLifeCycleEventCallback;
    /**
     * Optional flag to disable lazy loading of the web parts. By default it is enabled.
     */
    isViewportLoadingDisabled?: boolean;
    /**
     * Optionally provide additional context properties.
     * The additional properties still need to be exposed by the WebPartContext API.
     */
    getAdditionalContextProperties?: () => {};
}

/**
 * These info would be logged as EngagementLog extraData when the web part is rendering.
 * @internal
 */
export declare interface IWebpartLoadExtraLogInfo {
    /**
     * Indicates the general type of environment where the SharePoint Framework is running.
     */
    environmentType?: string;
    /**
     * Site Collection type.
     */
    siteType?: string;
    /**
     * Page Host Layout Type. ex: Article, Home...
     */
    pageLayoutType?: string;
    /**
     * Column Type:
     * 0 means Full-bleed column;
     * 4 means One-Third column;
     * 6 means Two columns;
     * 8 means Two-Third column;
     * 12 means One column;
     */
    columnType?: string;
    /**
     * Display mode of the hosted page.
     */
    displayMode?: string;
    /**
     * Name of the container which the web part was hosted.
     */
    webPartContainer?: string;
}

/**
 * Context object that needs to be passed to the web part manager to load a web part.
 *
 * @internal
 */
export declare interface IWebPartManagerContext {
    /**
     * Reference to the DOM element that contains the web part.
     */
    domElement: HTMLElement;
    /**
     * Optional reference to the scrollable element that is common parent of all the web parts.
     */
    scrollableParent?: HTMLElement;
    /**
     * Web part instance id
     */
    instanceId: string;
    /**
     * Web part manifest
     */
    manifest: IClientSideWebPartManifest<any>;
    /**
     * The display mode as one of DisplayMode.Read or DisplayMode.Edit
     */
    displayMode: DisplayMode;
    /**
     * These info would be logged as EngagementLog extraData when the web part is rendering.
     */
    webpartLoadExtraLogInfo: IWebpartLoadExtraLogInfo;
    /**
     * Web psart instance data. This data should be used to render a web part.
     */
    webPartData?: IWebPartData;
    /**
     * Host containing the web part. This host can be any container that implements the IWebPartHost interface. Some
     * examples of hosts are the Canvas, a single page application that contains a web part, and classic SharePoint
     * pages.
     */
    host?: IWebPartHost;
    /**
     * Flag indicating whether the web part is rendered from the persisted data or not. If the web part is added
     * from toolbox, the value of this flag will be false.
     */
    addedFromPersistedData?: boolean;
    /**
     * Callback API when all the web parts are rendered, only supported in modern pages
     */
    onAllWebPartsRendered?: (endTime: number) => void;
    /**
     * Callback API when all web parts in the viewport are rendered
     * Usage: When web part not in viewport, loading is delayed.
     */
    onViewportWebPartsRendered?: (endTime: number) => void;
    /**
     * Total number of web parts in store that will be asked to Web Part manager instance for loading
     */
    totalWebparts?: number;
    /**
     * An optional scope to override the host scope passed to the web part. The host scope is still used by the manager,
     * and this scope will only be passed to the web part.
     */
    serviceScope?: ServiceScope;
    /**
     * Type of the web part.
     */
    formFactor?: WebPartFormFactor;
}

/**
 * This structure is used to define metadata for web part properties as a map of string to `IWebPartPropertyMetadata`
 *
 * @remarks
 * The key should be a JSON path to the property in web part properties. The JSON path supports the following operators:
 *
 * - Dot `.` for selecting object members, for example `person.name`
 *
 * - Brackets `[]` for selecting array items, for example `person.photoURLs[0]`
 *
 * - Bracketed asterisk `[*]` for array elements wildcard, for example `person.websites[*]`.
 *
 * You can make combinations of these operators, for example `person.websites[*].url`
 *
 * Important Note: Only one wildcard per path is supported.
 *
 * Example: Let's assume we have a web part with properties that have the following schema:
 * ```
 * {
 *   title: string;
 *   person: {
 *     name: string;
 *     bio: string;
 *     photoURLs: string[];
 *     websites: { title: string; url: string; }[]
 *   }
 * }
 * ```
 *
 * We can define the metadata for the desired properties as following:
 * ```
 * {
 *  'person.bio': { isRichContent: true },
 *  'person.photoURLs[*]': { isImageSource: true },
 *  'person.websites[*].url': { isLink: true }
 * }
 * ```
 *
 * This will make SharePoint servers aware of the content of your properties and run services such as search indexing,
 * link fix-up, etc on the data. In case any of the values needs to update by these services, e.g link fix-up, the
 * web part property bag is automatically updated.
 *
 * @public
 */
export declare interface IWebPartPropertiesMetadata {
    [key: string]: IWebPartPropertyMetadata;
}

/**
 * This is the structure used for map values in `IWebPartPropertiesMetadata`
 *
 * @public
 */
export declare interface IWebPartPropertyMetadata {
    /**
     * Indicates whether the property should be serialized as HTML.
     *
     * @remarks
     * This flag instructs framework to store the value as HTML, so that SharePoint can perform the following
     * services on it:
     *
     * - normalizing HTML encodings
     *
     * - stripping unsafe HTML tags (i.e. for usage with Element.innerHTML)
     *
     * - search indexing
     *
     * - SharePoint link fix-up
     *
     * Only enable this flag for HTML content where these modifications are acceptable. If non-HTML content is
     * provided, SharePoint framework might make modifications to convert it to HTML valid. For plain text content
     * that simply needs to be exposed to the search index (without any rewriting), use the `isSearchablePlainText`
     * flag instead.
     */
    isHtmlString?: boolean;
    /**
     * Indicates if the property contains plain text that should be search-indexed by SharePoint.
     *
     * @remarks
     * This flag instructs the framework to store the property in a representation that supports search indexing.
     * The content will be treated as plain text; SharePoint will not modify the string in any way, and
     * special HTML characters may be stored encoded and appear in search results. If your string contains
     * HTML markup, use the isHtmlString setting instead.
     *
     * Security note: For security reasons, never assign a plain text string to `Element.innerHTML`.
     */
    isSearchablePlainText?: boolean;
    /**
     * Indicates if the property contains a link. This allows SharePoint server to treat the value as such and
     * perform services like search indexing, link fix-up, loading from CDN, etc.
     */
    isLink?: boolean;
    /**
     * Indicates if the property contains a link. This allows SharePoint server to treat the value as such and
     * perform services like link fix-up, search indexing, loading from CDN, etc.
     */
    isImageSource?: boolean;
    /**
     * Indicates if the framework should persist the property on the server.
     *
     * @remarks
     * Use this for properties that are only important in run-time, and do not need to persist on the server.
     * This can reduce the size of the serialized data of the web part and optimize the web part load time.
     * The property value will be removed from the serialized data sent to the server, but this has no effect on
     * the run-time property bag. The property value will still be available in the `onBeforeSerialize()` method,
     * and the value will not be cleared from the run-time property bag. The initial render of your web part should
     * not depend on the value of the property. Setting a default value for the property can be done in `onInit()` method.
     *
     * Note that if the property path refers to a property that has a complex object as the value, the whole object
     * will be removed from the persisted data.
     */
    shouldNotPersist?: boolean;
    /**
     * Indicates that property value is components id, required to be loaded before web part can render or initialize.
     *
     * @remarks
     * The web part should use this property to declare dynamic runtime component dependencies, which are required only
     * for specific states of the property. The framework will ensure that this component is preloaded for the web part.
     *
     * For example, the user can select one of the multiple layouts available for a web part during edit mode.
     * This will optimize the web part bundle to avoid embedding code for all layout code; instead, the framework will
     * load the required layout selectively at runtime.
     *
     * @alpha
     */
    isComponentDependency?: boolean;
    /**
     * If specified, indicates that the property is a dynamic property and the type of
     * the dynamic property.
     *
     * @remarks
     * If a web part has properties that are dynamically
     * configurable, then use this flag to declare the property as a dynamic property by
     * specifying its type. When a property specifies its dynamic property type, then
     * the framework ensures that its value can be accessed using 'tryGetValue' anytime
     * in the life cycle of the web part.  If a property is marked as DynamicProperty in
     * the IWebPartProperties interface, but does not appear in the IWebPartPropertiesMetadata
     * with a dynamicPropertyType, then the web part developer will need to manually create
     * the DynamicProperty themselves and assign it to the property.
     *
     * A web part can configure a default value for the property by specifying it in the
     * properties section of the web part's manifest. This value will be used when a
     * dynamic property is constructed for the property.
     *
     * Note: Web parts should be able to type cast the resultant value from the `tryGetValue`
     * to suit their needs.
     *
     * @public
     */
    dynamicPropertyType?: 'boolean' | 'number' | 'string' | 'array' | 'object';
    /**
     * Additional custom metadata associated with the original metadata.
     *
     * @remarks
     * This can be used to supply additional related metadata information.
     * For example, image metadata along with a URL could be provided.
     *
     * @privateRemarks
     * We should find a way to associate type to this object before this API becomes available to 3rd
     * parties. (SPPPLAT VSO bug#504028) tracks that fix. For now, we are not doing that because that will require a
     * bigger public API change to exiting APIs. We do not want to change existing public APIs before we make this
     * feature available to third parties.
     * key is Name of the custom property name and value is path of the property.
     * e.g. 'width': 'managerPhotoWidth'
     *
     * @alpha
     */
    customMetadata?: {
        [key: string]: string;
    };
}

/**
 * A basic container component to host a web part. This is the simplest component that can
 * host a web part. This should be used in scenarios where performance is key. Edit mode
 * is currently not supported in this container. And this container does not need ReactJS.
 *
 * @internal
 */
export declare class _MinimalWebPartContainer {
    private readonly _props;
    private _domElement;
    private _webPartManager;
    constructor(props: _IMinimalWebPartContainerProps);
    /**
     * Get the web part manager for this container.
     */
    readonly webPartManager: ClientSideWebPartManager;
    render(domElement: HTMLElement): Promise<void>;
    dispose(): void;
    setWebPartData(webPartData: IWebPartData, instanceId: string): void;
    /**
     * Invokes the ClientSideWebPartManager.serialize() function and returns the result.
     */
    serialize(): IWebPartData;
    /**
     * Sets the display mode of the web part in this instance of the MinimalWebPartContainer via the
     * ClientSideWebPartManager.
     *
     * @returns A promise indicating when the mode switch is complete. There can be a delay if the property
     *   pane chunk needs to be loaded.
     */
    setDisplayMode(displayMode: DisplayMode): Promise<void>;
    /**
     * A call that trickle down to the PropertyPaneController to open/show the
     * property pane context. This is neccessary because the showPropertyPane method
     * in IframedWebPartController will only expose the iframed element but not take
     * care of showing the property pane content.
     */
    requestPropertyPaneAction(instanceId: string, propertyPaneAction: PropertyPaneAction_2, webPartData?: IWebPartData): void;
    /**
     * Returns the height of the element's content including content not visible on the screen due
     * to overflow.
     */
    _getHeight(): number;
    /**
     * Returns the width of the element's content including content not visible on the screen due
     * to overflow.
     */
    _getWidth(): number;
    private _sendDimensionsCallback;
    private _renderWebPart;
    private _validateProps;
}

/**
 * Describes different kinds of possible property pane actions.
 *
 * @internal
 * @deprecated This is obsolete now. This enum has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare const enum PropertyPaneAction {
    /**
     * Ask the property pane to open
     */
    Open = 1,
    /**
     * Ask the property pane to close
     */
    Close = 2,
    /**
     * Ask the property pane to toggle
     */
    Toggle = 3,
    /**
     * Default action
     *
     * Ask the property pane to open if it is already open, with the newly selected
     * component's configuration else ask to close it.
     */
    Default = 4,
    /**
     * Ask the property pane to refresh the contents.
     *
     * Property pane refreshes its contents only if the asking component is same as the
     * one which is being configured currently. In any other case the call is ignored.
     */
    Refresh = 5
}

/**
 * Helper method to create a Button on the PropertyPane.
 * @param targetProperty - Target property the Button is associated to.
 * @param properties - Strongly typed Button properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneButton(targetProperty: string, properties: IPropertyPaneButtonProps): IPropertyPaneField<IPropertyPaneButtonProps>;

/**
 * Enum for all the supported button types.
 *
 * @public
 * @deprecated This is obsolete now. This enum has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare enum PropertyPaneButtonType {
    /**
     * Optional completion action.
     *
     * @remarks
     * Typically used at the end of a form or task when paired with the Primary button OR
     * as a standalone button to undo an action.
     * Examples: "Done" button which closes a container but doesn't make a server call or
     * an "Undo" button when a user is uploading a file in OneDrive.
     */
    Normal = 0,
    /**
     * Preferred completion action when paired with a Standard button.
     *
     * @remarks
     * Typically used at the end of a task or form.
     * Examples: "Create", "Save", "Send" which makes a server call.
     */
    Primary = 1,
    /**
     * Hero button.
     */
    Hero = 2,
    /**
     * Always used as a set with both Standard and Primary compound buttons.
     *
     * @remarks
     * Typically used in a confirmation dialog.
     * Examples: A confirmation dialog when a user discards a form or task with a possible
     * significant time investment such as an email or a complex form
     */
    Compound = 3,
    /**
     * Optional actions.
     *
     * @remarks
     * Typically used in a command bar at the top of a view, panel and inside an inline command bar.
     * Examples: Command bar at the top of OneDrive, Outlook, SharePoint. Inline command bar on the
     * top of SharePoint web parts.
     */
    Command = 4,
    /**
     * Same usage as Command button, when real estate does not allow for icons + labels or as secondary
     * actions within the command bar.
     *
     * @remarks
     * Typically used in Command bar in small and medium responsive web breakpoints. Also used on objects.
     * Examples: OneDrive small and medium responsive web breakpoint Command Bars and view icons within the
     * Command Bar. In SharePoint and OneDrive, Cards with social actions and images which allow users to
     * access the image picker. In SharePoint, formatting experiences such as formatting a story within the
     * Authoring experience. In Calendar, in the bottom of an event creation Callout when clicking inside
     * an empty time range.
     */
    Icon = 5
}

/**
 * Helper method to create a Checkbox on the PropertyPane.
 * @param targetProperty - Target property the checkbox is associated to.
 * @param properties - Strongly typed Checkbox properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneCheckbox(targetProperty: string, properties: IPropertyPaneCheckboxProps): IPropertyPaneField<IPropertyPaneCheckboxProps>;

/**
 * Helper method to create a Choice Group on the PropertyPane.
 * @param targetProperty - Target property the choice group is associated to.
 * @param properties - Strongly typed Choice Group properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneChoiceGroup(targetProperty: string, properties: IPropertyPaneChoiceGroupProps): IPropertyPaneField<IPropertyPaneChoiceGroupProps>;

/**
 * Helper method to create a custom field on the PropertyPane.
 *
 * @remarks
 * The purpose of the custom field is to help the web part developer to add a custom control to
 * the PropertyPane. The PropertyPane supports a host of inbuilt field types. While
 * this list meets the demands of most web parts, but there are exceptional cases
 * when web parts have special needs and need a special control. The custom field
 * helps fill that gap.
 *
 * @param targetProperty - target property for this field. This parameter is being deprecated in future releases.
 * @param properties - Strongly typed Custom field properties.
 *
 * @beta
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneCustomField(properties: IPropertyPaneCustomFieldProps): IPropertyPaneField<IPropertyPaneCustomFieldProps>;

/**
 * Helper method to create a Dropdown on the PropertyPane.
 * @param targetProperty - Target property the dropdown is associated to.
 * @param properties - Strongly typed Dropdown properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneDropdown(targetProperty: string, properties: IPropertyPaneDropdownProps): IPropertyPaneField<IPropertyPaneDropdownProps>;

/**
 * Specifies the type of option in a dropdown menu rendered by {@link PropertyPaneDropdown}.
 *
 * @public
 * @deprecated This is obsolete now. This enum has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare enum PropertyPaneDropdownOptionType {
    /**
     * Render normal menu item.
     */
    Normal = 0,
    /**
     * Render a divider.
     */
    Divider = 1,
    /**
     * Render menu item as a header.
     */
    Header = 2
}

/**
 * Helper method to create a Dynamic Data widget on the PropertyPane for a dynamic field.
 *
 * @param targetProperty - Target property the Dynamic Data widget is associated to.
 * @param options - Options to enable customized values for callback, filters etc.,
 *                  for the dynamic field.
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneDynamicField(targetProperty: string, properties: IPropertyPaneDynamicFieldProps): IPropertyPaneField<IPropertyPaneDynamicFieldProps>;

/**
 * Helper method to create a Dynamic Data widget on the Property Pane for a set
 * of dynamic fields with a common data source.
 *
 * These fields can possibly share the same property based on the associated filters.
 * @param properties - Contains entries and options, described as below:
 *  entries - A set of entries to be configured by the widget. Each entry includes the target
 *           property and, optionally, the label to show.
 *  options - Options enabling customized values for callback, filters etc.,
 *           for the given set of dynamic fields.
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneDynamicFieldSet(properties: IPropertyPaneDynamicFieldSetProps): IPropertyPaneField<IPropertyPaneDynamicFieldSetProps>;

/**
 * Helper method to create a Dynamic TextField on the PropertyPane.
 * @param targetProperty - Target property the dynamic textfield is associated to.
 * @param properties - Properties of the PropertyPaneDynamicTextField.
 *
 * @beta
 * @deprecated This has been replaced by PropertyPaneDynamicField and moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneDynamicTextField(targetProperty: string, properties: IPropertyPaneDynamicTextFieldProps): IPropertyPaneField<IPropertyPaneDynamicTextFieldProps>;

/**
 * Enum for all the supported PropertyPane field types.
 *
 * Names should be consistent with those in office-ui-fabric-react, be careful to get letter casing correct.
 *
 * @public
 * @deprecated This is obsolete now. This enum has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare enum PropertyPaneFieldType {
    /**
     * Custom field.
     */
    Custom = 1,
    /**
     * Checkbox field.
     */
    CheckBox = 2,
    /**
     * TextField field.
     */
    TextField = 3,
    /**
     * Toggle field.
     */
    Toggle = 5,
    /**
     * Dropdown field.
     */
    Dropdown = 6,
    /**
     * Label field.
     */
    Label = 7,
    /**
     * Slider field.
     */
    Slider = 8,
    /**
     * Heading field.
     */
    Heading = 9,
    /**
     * Choice Group field.
     */
    ChoiceGroup = 10,
    /**
     * Button field.
     */
    Button = 11,
    /**
     * Horizontal Rule field.
     */
    HorizontalRule = 12,
    /**
     * Link field.
     */
    Link = 13,
    /**
     * Dynamic data field.
     * @public
     */
    DynamicField = 14,
    /**
     * Dynamic Text Field
     *
     * @beta
     * @deprecated - Please use DynamicField
     */
    DynamicTextField = 15,
    /**
     * A set of dynamic fields.
     * @public
     */
    DynamicFieldSet = 16,
    /**
     * Spin button
     *
     * @alpha
     */
    SpinButton = 17
}

/**
 * Helper method to create a Horizontal Rule on the PropertyPane.
 * @param properties - Strongly typed Horizontal Rule properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneHorizontalRule(): IPropertyPaneField<void>;

/**
 * Helper method to create a Label on the PropertyPane.
 * @param targetProperty - Target property the label is associated to.
 * @param properties - Strongly typed Label properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneLabel(targetProperty: string, properties: IPropertyPaneLabelProps): IPropertyPaneField<IPropertyPaneLabelProps>;

/**
 * Helper method to create a Link on the PropertyPane.
 * @param targetProperty - Target property the Link is associated to.
 * @param properties - Strongly typed Link properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneLink(targetProperty: string, properties: IPropertyPaneLinkProps): IPropertyPaneField<IPropertyPaneLinkProps>;

/**
 * Loads the property pane module, asyncronously.
 * @internal
 */
export declare class _PropertyPaneLoader {
    /**
     * Service key to uniquely identify PropertyPaneLoader in the service scope.
     */
    static readonly serviceKey: ServiceKey<_PropertyPaneLoader>;
    private static readonly _propertyPaneModuleId;
    private _logSource;
    private _propertyPaneController;
    private _serviceScope;
    constructor(serviceScope: ServiceScope);
    /**
     * Async property pane getter.
     */
    readonly propertyPane: Promise<_PropertyPaneController>;
}

/**
 * Helper method to create a Slider on the PropertyPane.
 * @param targetProperty - Target property the slider is associated to.
 * @param properties - Strongly typed Slider properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneSlider(targetProperty: string, properties: IPropertyPaneSliderProps): IPropertyPaneField<IPropertyPaneSliderProps>;

/**
 * Helper method to create a TextField on the PropertyPane.
 * @param targetProperty - Target property the textfield is associated to.
 * @param properties - Strongly typed TextField properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneTextField(targetProperty: string, properties: IPropertyPaneTextFieldProps): IPropertyPaneField<IPropertyPaneTextFieldProps>;

/**
 * Helper method to create a Toggle on the PropertyPane.
 * @param targetProperty - Target property the toggle is associated to.
 * @param properties - Strongly typed Toggle properties.
 *
 * @public
 * @deprecated This is obsolete now. This function has been moved to `@microsoft/sp-property-pane`.
 * Please consume it from there.
 * @internalremarks We have left the original implementation here to avoid breaking the public API contract.
 */
export declare function PropertyPaneToggle(targetProperty: string, properties: IPropertyPaneToggleProps): IPropertyPaneField<IPropertyPaneToggleProps>;

/**
 * Internal snapshot of the Teams SDK.
 * Each time the Teams SDK dependency is updated we should update this snapshot.
 * A couple notes:
 *   - The version should be updated first and then verify if teams-web-part-application
 *     successfully builds. If it does then we can safely upgrade the Teams SDK for
 *     backwards compatability.
 *   - The const enums will need to be commented out and references need
 *     to be replaced with `any` and the original type commented out. Otherwise
 *     TS cannot identify the namespaces are equivalent.
 *
 * @internal
 */
declare namespace teamsJs {
    /**
     * export declare const enum HostClientType {
     *   desktop = "desktop",
     *   web = "web",
     *   android = "android",
     *   ios = "ios"
     * }
     */
    /**
    * Namespace to interact with the menu-specific part of the SDK.
    * This object is used to show View Configuration, Action Menu and Navigation Bar Menu.
    *
    * @private
    * Hide from docs until feature is complete
    */
    namespace menus {
        /**
         * Represents information about item in View Configuration.
         */
        interface ViewConfiguration {
            /**
             * Unique identifier of view.
             */
            id: string;
            /**
             * Display title of the view.
             */
            title: string;
            /**
             * Additional information for accessibility.
             */
            contentDescription?: string;
        }
        /**
         * Represents information about menu item for Action Menu and Navigation Bar Menu.
         */
        class MenuItem {
            /**
             * Unique identifier for the menu item.
             */
            id: string;
            /**
             * Display title of the menu item.
             */
            title: string;
            /**
             * Display icon of the menu item. The icon value must be a string having SVG icon content.
             */
            icon?: string;
            /**
             * Selected state display icon of the menu item. The icon value must be a string having SVG icon content.
             */
            iconSelected?: string;
            /**
             * Additional information for accessibility.
             */
            contentDescription?: string;
            /**
             * State of the menu item
             */
            enabled: boolean;
            /**
             * Interface to show list of items on selection of menu item.
             */
            viewData: ViewData;
        }
        /**
         * Represents information about view to show on Navigation Bar Menu item selection
         */
        interface ViewData {
            /**
             * Display header title of the item list.
             */
            listTitle?: string;
            /**
             * Type of the menu item.
             */
            listType: MenuListType;
            /**
             * Array of MenuItem. Icon value will be required for all items in the list.
             */
            listItems: MenuItem[];
        }
        /**
         * Represents information about type of list to display in Navigation Bar Menu.
         */
        enum MenuListType {
            dropDown = "dropDown",
            popOver = "popOver"
        }
        /**
         * Registers list of view configurations and it's handler.
         * Handler is responsible for listening selection of View Configuration.
         * @param viewConfig List of view configurations. Minimum 1 value is required.
         * @param handler The handler to invoke when the user selects view configuration.
         */
        function setUpViews(viewConfig: ViewConfiguration[], handler: (id: string) => boolean): void;
        /**
         * Used to set menu items on the Navigation Bar. If icon is available, icon will be shown, otherwise title will be shown.
         * @param items List of MenuItems for Navigation Bar Menu.
         * @param handler The handler to invoke when the user selects menu item.
         */
        function setNavBarMenu(items: MenuItem[], handler: (id: string) => boolean): void;
        interface ActionMenuParameters {
            /**
             * Display title for Action Menu
             */
            title: string;
            /**
             * List of MenuItems for Action Menu
             */
            items: MenuItem[];
        }
        /**
         * Used to show Action Menu.
         * @param params Parameters for Menu Parameters
         * @param handler The handler to invoke when the user selects menu item.
         */
        function showActionMenu(params: ActionMenuParameters, handler: (id: string) => boolean): void;
    }
    /**
    * Represents information about tabs for an app
    */
    interface TabInformation {
        teamTabs: TabInstance[];
    }
    /**
    * Represents information about a tab instance
    */
    interface TabInstance {
        /**
         * The name of the tab
         */
        tabName: string;
        /**
         * Internal: do not use
         * @protected
         */
        internalTabInstanceId?: string;
        /**
         * Last viewed time of this tab. null means unknown
         */
        lastViewUnixEpochTime?: string;
        /**
         * The developer-defined unique ID for the entity this content points to.
         */
        entityId?: string;
        /**
         * The Microsoft Teams ID for the channel with which the content is associated.
         */
        channelId?: string;
        /**
         * The name for the channel with which the content is associated.
         */
        channelName?: string;
        /**
         * Is this tab in a favorite channel?
         */
        channelIsFavorite?: boolean;
        /**
         * The Microsoft Teams ID for the team with which the content is associated.
         */
        teamId?: string;
        /**
         * The name for the team with which the content is associated.
         */
        teamName?: string;
        /**
         * Is this tab in a favorite team?
         */
        teamIsFavorite?: boolean;
        /**
         * The Office 365 group ID for the team with which the content is associated.
         * This field is available only when the identity permission is requested in the manifest.
         */
        groupId?: string;
        /**
         * Content URL of this tab
         */
        url?: string;
        /**
         * Website URL of this tab
         */
        websiteUrl?: string;
    }
    /**
     * Indicates the team type, currently used to distinguish between different team
     * types in Office 365 for Education (team types 1, 2, 3, and 4).
     *
     * export declare const enum TeamType {
     *   Standard = 0,
     *   Edu = 1,
     *   Class = 2,
     *   Plc = 3,
     *   Staff = 4
     * }
     */
    /**
     * Indicates the various types of roles of a user in a team.
     *
     * export declare const enum UserTeamRole {
     *   Admin = 0,
     *   User = 1,
     *   Guest = 2
     * }
     */
    /**
    * Indicates information about the tab instance for filtering purposes.
    */
    interface TabInstanceParameters {
        /**
         * Flag allowing to select favorite channels only
         */
        favoriteChannelsOnly?: boolean;
        /**
         * Flag allowing to select favorite teams only
         */
        favoriteTeamsOnly?: boolean;
    }
    /**
    * @private
    * Hide from docs
    * --------
    * Query parameters used when fetching team information
    */
    interface TeamInstanceParameters {
        /**
         * Flag allowing to select favorite teams only
         */
        favoriteTeamsOnly?: boolean;
    }
    /**
    * @private
    * Hide from docs
    * --------
    * Information on userJoined Teams
    */
    interface UserJoinedTeamsInformation {
        /**
         * List of team information
         */
        userJoinedTeams: TeamInformation[];
    }
    /**
    * Represents Team Information
    */
    interface TeamInformation {
        /**
         * Id of the team
         */
        teamId: string;
        /**
         * Team display name
         */
        teamName: string;
        /**
         * Team description
         */
        teamDescription?: string;
        /**
         * Thumbnail Uri
         */
        thumbnailUri?: string;
        /**
         * The Office 365 group ID for the team with which the content is associated.
         * This field is available only when the identity permission is requested in the manifest.
         */
        groupId?: string;
        /**
         * Role of current user in the team
         */
        userTeamRole?: any;
    }
    /**
     * export declare const enum TaskModuleDimension {
     *   Large = "large",
     *   Medium = "medium",
     *   Small = "small"
     * }
     */
    /**
    * Initializes the library. This must be called before any other SDK calls
    * but after the frame is loaded successfully.
    */
    function initialize(hostWindow?: any): void;
    /**
    * Initializes the library. This must be called before any other SDK calls
    * but after the frame is loaded successfully.
    */
    function _uninitialize(): void;
    /**
    * Enable print capability to support printing page using Ctrl+P and cmd+P
    */
    function enablePrintCapability(): void;
    /**
    * default print handler
    */
    function print(): void;
    /**
    * Retrieves the current context the frame is running in.
    * @param callback The callback to invoke when the {@link Context} object is retrieved.
    */
    function getContext(callback: (context: Context) => void): void;
    /**
    * Registers a handler for theme changes.
    * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.
    * @param handler The handler to invoke when the user changes their theme.
    */
    function registerOnThemeChangeHandler(handler: (theme: string) => void): void;
    /**
    * Registers a handler for changes from or to full-screen view for a tab.
    * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.
    * @param handler The handler to invoke when the user toggles full-screen view for a tab.
    */
    function registerFullScreenHandler(handler: (isFullScreen: boolean) => void): void;
    /**
    * Registers a handler for user presses of the Team client's back button. Experiences that maintain an internal
    * navigation stack should use this handler to navigate the user back within their frame. If an app finds
    * that after running its back button handler it cannot handle the event it should call the navigateBack
    * method to ask the Teams client to handle it instead.
    * @param handler The handler to invoke when the user presses their Team client's back button.
    */
    function registerBackButtonHandler(handler: () => boolean): void;
    /**
    * Navigates back in the Teams client. See registerBackButtonHandler for more information on when
    * it's appropriate to use this method.
    */
    function navigateBack(): void;
    /**
    * Registers a handler to be called before the page is unloaded.
    * @param handler The handler to invoke before the page is unloaded. If this handler returns true the page should
    * invoke the readyToUnload function provided to it once it's ready to be unloaded.
    */
    function registerBeforeUnloadHandler(handler: (readyToUnload: () => void) => boolean): void;
    /**
    * Registers a handler for when the user reconfigurated tab
    * @param handler The handler to invoke when the user click on Settings.
    */
    function registerChangeSettingsHandler(handler: () => void): void;
    /**
    * Navigates the frame to a new cross-domain URL. The domain of this URL must match at least one of the
    * valid domains specified in the validDomains block of the manifest; otherwise, an exception will be
    * thrown. This function needs to be used only when navigating the frame to a URL in a different domain
    * than the current one in a way that keeps the app informed of the change and allows the SDK to
    * continue working.
    * @param url The URL to navigate the frame to.
    */
    function navigateCrossDomain(url: string): void;
    /**
    * Allows an app to retrieve for this user tabs that are owned by this app.
    * If no TabInstanceParameters are passed, the app defaults to favorite teams and favorite channels.
    * @param callback The callback to invoke when the {@link TabInstanceParameters} object is retrieved.
    * @param tabInstanceParameters OPTIONAL Flags that specify whether to scope call to favorite teams or channels.
    */
    function getTabInstances(callback: (tabInfo: TabInformation) => void, tabInstanceParameters?: TabInstanceParameters): void;
    /**
    * @private
    * Hide from docs
    * ------
    * Allows an app to retrieve information of all user joined teams
    * @param callback The callback to invoke when the {@link TeamInstanceParameters} object is retrieved.
    * @param teamInstanceParameters OPTIONAL Flags that specify whether to scope call to favorite teams
    */
    function getUserJoinedTeams(callback: (userJoinedTeamsInformation: UserJoinedTeamsInformation) => void, teamInstanceParameters?: TeamInstanceParameters): void;
    /**
    * Allows an app to retrieve the most recently used tabs for this user.
    * @param callback The callback to invoke when the {@link TabInformation} object is retrieved.
    * @param tabInstanceParameters OPTIONAL Ignored, kept for future use
    */
    function getMruTabInstances(callback: (tabInfo: TabInformation) => void, tabInstanceParameters?: TabInstanceParameters): void;
    /**
    * Shares a deep link that a user can use to navigate back to a specific state in this page.
    * @param deepLinkParameters ID and label for the link and fallback URL.
    */
    function shareDeepLink(deepLinkParameters: DeepLinkParameters): void;
    /**
    * @private
    * Hide from docs.
    * ------
    * Opens a client-friendly preview of the specified file.
    * @param file The file to preview.
    */
    function openFilePreview(filePreviewParameters: FilePreviewParameters): void;
    /**
     * export declare const enum NotificationTypes {
     *   fileDownloadStart = "fileDownloadStart",
     *   fileDownloadComplete = "fileDownloadComplete"
     * }
     */
    interface ShowNotificationParameters {
        message: string;
        notificationType: any;
    }
    /**
    * @private
    * Hide from docs.
    * ------
    * display notification API.
    * @param message Notification message.
    * @param notificationType Notification type
    */
    function showNotification(showNotificationParameters: ShowNotificationParameters): void;
    /**
    * @private
    * Hide from docs.
    * ------
    * execute deep link API.
    * @param deepLink deep link.
    */
    function executeDeepLink(deepLink: string): void;
    /**
    * @private
    * Hide from docs.
    * ------
    * Upload a custom App manifest directly to both team and personal scopes.
    * This method works just for the first party Apps.
    */
    function uploadCustomApp(manifestBlob: Blob): void;
    /**
    * Navigates the Microsoft Teams app to the specified tab instance.
    * @param tabInstance The tab instance to navigate to.
    */
    function navigateToTab(tabInstance: TabInstance): void;
    /**
    * Namespace to interact with the settings-specific part of the SDK.
    * This object is usable only on the settings frame.
    */
    namespace settings {
        /**
         * Sets the validity state for the settings.
         * The initial value is false, so the user cannot save the settings until this is called with true.
         * @param validityState Indicates whether the save or remove button is enabled for the user.
         */
        function setValidityState(validityState: boolean): void;
        /**
         * Gets the settings for the current instance.
         * @param callback The callback to invoke when the {@link Settings} object is retrieved.
         */
        function getSettings(callback: (instanceSettings: Settings) => void): void;
        /**
         * Sets the settings for the current instance.
         * This is an asynchronous operation; calls to getSettings are not guaranteed to reflect the changed state.
         * @param settings The desired settings for this instance.
         */
        function setSettings(instanceSettings: Settings): void;
        /**
         * Registers a handler for when the user attempts to save the settings. This handler should be used
         * to create or update the underlying resource powering the content.
         * The object passed to the handler must be used to notify whether to proceed with the save.
         * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.
         * @param handler The handler to invoke when the user selects the save button.
         */
        function registerOnSaveHandler(handler: (evt: SaveEvent) => void): void;
        /**
         * Registers a handler for user attempts to remove content. This handler should be used
         * to remove the underlying resource powering the content.
         * The object passed to the handler must be used to indicate whether to proceed with the removal.
         * Only one handler may be registered at a time. Subsequent registrations will override the first.
         * @param handler The handler to invoke when the user selects the remove button.
         */
        function registerOnRemoveHandler(handler: (evt: RemoveEvent) => void): void;
        interface Settings {
            /**
             * A suggested display name for the new content.
             * In the settings for an existing instance being updated, this call has no effect.
             */
            suggestedDisplayName?: string;
            /**
             * Sets the URL to use for the content of this instance.
             */
            contentUrl: string;
            /**
             * Sets the URL for the removal configuration experience.
             */
            removeUrl?: string;
            /**
             * Sets the URL to use for the external link to view the underlying resource in a browser.
             */
            websiteUrl?: string;
            /**
             * The developer-defined unique ID for the entity to which this content points.
             */
            entityId: string;
        }
        interface SaveEvent {
            /**
             * Object containing properties passed as arguments to the settings.save event.
             */
            result: SaveParameters;
            /**
             * Indicates that the underlying resource has been created and the settings can be saved.
             */
            notifySuccess(): void;
            /**
             * Indicates that creation of the underlying resource failed and that the settings cannot be saved.
             * @param reason Specifies a reason for the failure. If provided, this string is displayed to the user; otherwise a generic error is displayed.
             */
            notifyFailure(reason?: string): void;
        }
        interface RemoveEvent {
            /**
             * Indicates that the underlying resource has been removed and the content can be removed.
             */
            notifySuccess(): void;
            /**
             * Indicates that removal of the underlying resource failed and that the content cannot be removed.
             * @param reason Specifies a reason for the failure. If provided, this string is displayed to the user; otherwise a generic error is displayed.
             */
            notifyFailure(reason?: string): void;
        }
        interface SaveParameters {
            /**
             * Connector's webhook Url returned as arguments to settings.save event as part of user clicking on Save
             */
            webhookUrl?: string;
        }
    }
    /**
    * Namespace to interact with the authentication-specific part of the SDK.
    * This object is used for starting or completing authentication flows.
    */
    namespace authentication {
        /**
         * Registers the authentication handlers
         * @param authenticateParameters A set of values that configure the authentication pop-up.
         */
        function registerAuthenticationHandlers(authenticateParameters: AuthenticateParameters): void;
        /**
         * Initiates an authentication request, which opens a new window with the specified settings.
         */
        function authenticate(authenticateParameters?: AuthenticateParameters): void;
        /**
         * @private
         * Hide from docs.
         * ------
         * Requests an Azure AD token to be issued on behalf of the app. The token is acquired from the cache
         * if it is not expired. Otherwise a request is sent to Azure AD to obtain a new token.
         * @param authTokenRequest A set of values that configure the token request.
         */
        function getAuthToken(authTokenRequest: AuthTokenRequest): void;
        /**
         * @private
         * Hide from docs.
         * ------
         * Requests the decoded Azure AD user identity on behalf of the app.
         */
        function getUser(userRequest: UserRequest): void;
        /**
         * Notifies the frame that initiated this authentication request that the request was successful.
         * This function is usable only on the authentication window.
         * This call causes the authentication window to be closed.
         * @param result Specifies a result for the authentication. If specified, the frame that initiated the authentication pop-up receives this value in its callback.
         * @param callbackUrl Specifies the url to redirect back to if the client is Win32 Outlook.
         */
        function notifySuccess(result?: string, callbackUrl?: string): void;
        /**
         * Notifies the frame that initiated this authentication request that the request failed.
         * This function is usable only on the authentication window.
         * This call causes the authentication window to be closed.
         * @param result Specifies a result for the authentication. If specified, the frame that initiated the authentication pop-up receives this value in its callback.
         * @param callbackUrl Specifies the url to redirect back to if the client is Win32 Outlook.
         */
        function notifyFailure(reason?: string, callbackUrl?: string): void;
        interface AuthenticateParameters {
            /**
             * The URL for the authentication pop-up.
             */
            url: string;
            /**
             * The preferred width for the pop-up. This value can be ignored if outside the acceptable bounds.
             */
            width?: number;
            /**
             * The preferred height for the pop-up. This value can be ignored if outside the acceptable bounds.
             */
            height?: number;
            /**
             * A function that is called if the authentication succeeds, with the result returned from the authentication pop-up.
             */
            successCallback?: (result?: string) => void;
            /**
             * A function that is called if the authentication fails, with the reason for the failure returned from the authentication pop-up.
             */
            failureCallback?: (reason?: string) => void;
        }
        /**
         * @private
         * Hide from docs.
         * ------
         */
        interface AuthTokenRequest {
            /**
             * An array of resource URIs identifying the target resources for which the token should be requested.
             */
            resources: string[];
            /**
             * A function that is called if the token request succeeds, with the resulting token.
             */
            successCallback?: (token: string) => void;
            /**
             * A function that is called if the token request fails, with the reason for the failure.
             */
            failureCallback?: (reason: string) => void;
        }
        /**
         * @private
         * Hide from docs.
         * ------
         */
        interface UserRequest {
            /**
             * A function that is called if the token request succeeds, with the resulting token.
             */
            successCallback?: (user: UserProfile) => void;
            /**
             * A function that is called if the token request fails, with the reason for the failure.
             */
            failureCallback?: (reason: string) => void;
        }
        /**
         * @private
         * Hide from docs.
         * ------
         */
        interface UserProfile {
            /**
             * The intended recipient of the token. The application that receives the token must verify that the audience
             * value is correct and reject any tokens intended for a different audience.
             */
            aud: string;
            /**
             * Identifies how the subject of the token was authenticated.
             */
            amr: string[];
            /**
             * Stores the time at which the token was issued. It is often used to measure token freshness.
             */
            iat: number;
            /**
             * Identifies the security token service (STS) that constructs and returns the token. In the tokens that Azure AD
             * returns, the issuer is sts.windows.net. The GUID in the issuer claim value is the tenant ID of the Azure AD
             * directory. The tenant ID is an immutable and reliable identifier of the directory.
             */
            iss: string;
            /**
             * Provides the last name, surname, or family name of the user as defined in the Azure AD user object.
             */
            family_name: string;
            /**
             * Provides the first or "given" name of the user, as set on the Azure AD user object.
             */
            given_name: string;
            /**
             * Provides a human-readable value that identifies the subject of the token. This value is not guaranteed to
             * be unique within a tenant and is designed to be used only for display purposes.
             */
            unique_name: string;
            /**
             * Contains a unique identifier of an object in Azure AD. This value is immutable and cannot be reassigned or
             * reused. Use the object ID to identify an object in queries to Azure AD.
             */
            oid: string;
            /**
             * Identifies the principal about which the token asserts information, such as the user of an application.
             * This value is immutable and cannot be reassigned or reused, so it can be used to perform authorization
             * checks safely. Because the subject is always present in the tokens the Azure AD issues, we recommended
             * using this value in a general-purpose authorization system.
             */
            sub: string;
            /**
             * An immutable, non-reusable identifier that identifies the directory tenant that issued the token. You can
             * use this value to access tenant-specific directory resources in a multitenant application. For example,
             * you can use this value to identify the tenant in a call to the Graph API.
             */
            tid: string;
            /**
             * Defines the time interval within which a token is valid. The service that validates the token should verify
             * that the current date is within the token lifetime; otherwise it should reject the token. The service might
             * allow for up to five minutes beyond the token lifetime to account for any differences in clock time ("time
             * skew") between Azure AD and the service.
             */
            exp: number;
            nbf: number;
            /**
             * Stores the user name of the user principal.
             */
            upn: string;
            /**
             * Stores the version number of the token.
             */
            ver: string;
        }
    }
    interface Context {
        /**
         * The Office 365 group ID for the team with which the content is associated.
         * This field is available only when the identity permission is requested in the manifest.
         */
        groupId?: string;
        /**
         * The Microsoft Teams ID for the team with which the content is associated.
         */
        teamId?: string;
        /**
         * The name for the team with which the content is associated.
         */
        teamName?: string;
        /**
         * The Microsoft Teams ID for the channel with which the content is associated.
         */
        channelId?: string;
        /**
         * The name for the channel with which the content is associated.
         */
        channelName?: string;
        /**
         * The developer-defined unique ID for the entity this content points to.
         */
        entityId: string;
        /**
         * The developer-defined unique ID for the sub-entity this content points to.
         * This field should be used to restore to a specific state within an entity, such as scrolling to or activating a specific piece of content.
         */
        subEntityId?: string;
        /**
         * The current locale that the user has configured for the app formatted as
         * languageId-countryId (for example, en-us).
         */
        locale: string;
        /**
         * @deprecated Use loginHint or userPrincipalName.
         * The UPN of the current user.
         * Because a malicious party can run your content in a browser, this value should
         * be used only as a hint as to who the user is and never as proof of identity.
         * This field is available only when the identity permission is requested in the manifest.
         */
        upn?: string;
        /**
         * The Azure AD tenant ID of the current user.
         * Because a malicious party can run your content in a browser, this value should
         * be used only as a hint as to who the user is and never as proof of identity.
         * This field is available only when the identity permission is requested in the manifest.
         */
        tid?: string;
        /**
         * The current UI theme.
         */
        theme?: string;
        /**
         * Indication whether the tab is in full-screen mode.
         */
        isFullScreen?: boolean;
        /**
         * The type of the team.
         */
        teamType?: any;
        /**
         * The root SharePoint folder associated with the team.
         */
        teamSiteUrl?: string;
        /**
         * The relative path to the SharePoint folder associated with the channel.
         */
        channelRelativeUrl?: string;
        /**
         * Unique ID for the current Teams session for use in correlating telemetry data.
         */
        sessionId?: string;
        /**
         * The user's role in the team.
         * Because a malicious party can run your content in a browser, this value should
         * be used only as a hint as to the user's role, and never as proof of her role.
         */
        userTeamRole?: any;
        /**
         * The Microsoft Teams ID for the chat with which the content is associated.
         */
        chatId?: string;
        /**
         * A value suitable for use as a login_hint when authenticating with Azure AD.
         * Because a malicious party can run your content in a browser, this value should
         * be used only as a hint as to who the user is and never as proof of identity.
         * This field is available only when the identity permission is requested in the manifest.
         */
        loginHint?: string;
        /**
         * The UPN of the current user. This may be an externally-authenticated UPN (e.g., guest users).
         * Because a malicious party run your content in a browser, this value should
         * be used only as a hint as to who the user is and never as proof of identity.
         * This field is available only when the identity permission is requested in the manifest.
         */
        userPrincipalName?: string;
        /**
         * The Azure AD object id of the current user.
         * Because a malicious party run your content in a browser, this value should
         * be used only as a hint as to who the user is and never as proof of identity.
         * This field is available only when the identity permission is requested in the manifest.
         */
        userObjectId?: string;
        /**
         * Indicates whether team is archived.
         * Apps should use this as a signal to prevent any changes to content associated with archived teams.
         */
        isTeamArchived?: boolean;
        /**
         * The type of the host client. Possible values are : android, ios, web, desktop
         */
        hostClientType?: any;
        /**
         * SharePoint context
         */
        sharepoint?: any;
        /**
         * The type of license for the current users tenant.
         */
        tenantSKU?: string;
        /**
         * The license type for the current user.
         */
        userLicenseType?: string;
    }
    interface DeepLinkParameters {
        /**
         * The developer-defined unique ID for the sub-entity to which this deep link points in the current entity.
         * This field should be used to restore to a specific state within an entity, such as scrolling to or activating a specific piece of content.
         */
        subEntityId: string;
        /**
         * The label for the sub-entity that should be displayed when the deep link is rendered in a client.
         */
        subEntityLabel: string;
        /**
         * The fallback URL to which to navigate the user if the client cannot render the page.
         * This URL should lead directly to the sub-entity.
         */
        subEntityWebUrl?: string;
    }
    /**
    * @private
    * Hide from docs.
    * ------
    */
    interface FilePreviewParameters {
        /**
         * The developer-defined unique ID for the file.
         */
        entityId: string;
        /**
         * The display name of the file.
         */
        title: string;
        /**
         * An optional description of the file.
         */
        description?: string;
        /**
         * The file extension; e.g. pptx, docx, etc.
         */
        type: string;
        /**
         * A url to the source of the file, used to open the content in the user's default browser
         */
        objectUrl: string;
        /**
         * Optional; an alternate self-authenticating url used to preview the file in Mobile clients and offer it for download by the user
         */
        downloadUrl?: string;
        /**
         * Optional; an alternate url optimized for previewing the file in Teams web and desktop clients
         */
        webPreviewUrl?: string;
        /**
         * Optional; an alternate url that allows editing of the file in Teams web and desktop clients
         */
        webEditUrl?: string;
        /**
         * Optional; the base url of the site where the file is hosted
         */
        baseUrl?: string;
        /**
         * Optional; indicates whether the file should be opened in edit mode
         */
        editFile?: boolean;
        /**
         * Optional; the developer-defined unique ID for the sub-entity to return to when the file stage closes.
         * This field should be used to restore to a specific state within an entity, such as scrolling to or activating a specific piece of content.
         */
        subEntityId?: string;
    }
    /**
    * @private
    * Internal use only
    * Sends a custom action message to Teams.
    * @param actionName Specifies name of the custom action to be sent
    * @param args Specifies additional arguments passed to the action
    * @returns id of sent message
    */
    function sendCustomMessage(actionName: string, args?: any[]): number;
    interface TaskInfo {
        /**
         * The url to be rendered in the webview/iframe.
         */
        url?: string;
        /**
         * JSON defining an adaptive card.
         */
        card?: string;
        /**
         * The requested height of the webview/iframe.
         */
        height?: any | Number;
        /**
         * The requested width of the webview/iframe.
         */
        width?: any | Number;
        /**
         * Title of the task module.
         */
        title?: string;
        /**
         * If client doesnt support the URL, the URL that needs to be opened in the browser.
         */
        fallbackUrl?: string;
        /**
         * Specifies a bot ID to send the result of the user's interaction with the task module.
         * If specified, the bot will receive a task/complete invoke event with a JSON object
         * in the event payload.
         */
        completionBotId?: string;
    }
    /**
    * Namespace to interact with the task module-specific part of the SDK.
    * This object is usable only on the content frame.
    */
    namespace tasks {
        /**
         * Allows an app to open the task module.
         * @param taskInfo An object containing the parameters of the task module
         * @param submitHandler Handler to call when the task module is completed
         */
        function startTask(taskInfo: TaskInfo, submitHandler?: (err: string, result: string) => void): void;
        /**
         * Update height/width task info properties.
         * @param taskInfo An object containing width and height properties
         */
        function updateTask(taskInfo: TaskInfo): void;
        /**
         * Submit the task module.
         * @param result Contains the result to be sent to the bot or the app. Typically a JSON object or a serialized version of it
         * @param appIds Helps to validate that the call originates from the same appId as the one that invoked the task module
         */
        function submitTask(result?: string | object, appIds?: string | string[]): void;
    }
    /**
    * @private
    * Hide from docs
    * --------
    * Information about all members in a chat
    */
    interface ChatMembersInformation {
        members: ThreadMember[];
    }
    /**
    * @private
    * Hide from docs
    * --------
    * Information about a chat member
    */
    interface ThreadMember {
        /**
         * The member's user principal name in the current tenant.
         */
        upn: string;
    }
    /**
    * @private
    * Hide from docs
    * ------
    * Allows an app to retrieve information of all chat members
    * Because a malicious party run your content in a browser, this value should
    * be used only as a hint as to who the members are and never as proof of membership.
    * @param callback The callback to invoke when the {@link ChatMembersInformation} object is retrieved.
    */
    function getChatMembers(callback: (chatMembersInformation: ChatMembersInformation) => void): void;
}

/**
 * Web part context object. This object contains the contextual services available to a web part. e.g.
 * a contextual instance to the http client.
 *
 * @public
 */
export declare class WebPartContext extends BaseWebPartContext {
    private _domElement;
    private _statusRenderer;
    private _teams;
    /** @internal */
    constructor(parameters: _IWebPartContextParameters);
    /**
     * Reference to the DOM element that hosts this client-side component.
     */
    readonly domElement: HTMLElement;
    /**
     * Web part status renderer.
     */
    readonly statusRenderer: IClientSideWebPartStatusRenderer;
    /**
     * Contextual information about the current Microsoft Teams tab. This object will only be defined if
     * a component is being hosted in Microsoft Teams.
     *
     * @remarks
     * For more information, please see:
     * {@link https://docs.microsoft.com/en-us/javascript/api/@microsoft/teams-js/?view=msteams-client-js-latest}
     * @beta
     */
    readonly microsoftTeams: typeof microsoftTeams | undefined;
    /**
     * @internal @deprecated
     */
    _setTeams(teams: typeof microsoftTeams): void;
}

/**
 * On the client, we need to support both HTML and and JSON format of the web part data. This is a utility
 * class to perform conversion between the two formats.
 *
 * @internal
 */
export declare class WebPartDataConverter {
    private static _componentIdAttribute;
    private static _htmlPropertiesAttribute;
    private static _propNameAttribute;
    private static _searchablePlainTextAttribute;
    private static _webPartAttribute;
    private static _webPartDataAttribute;
    private static _webPartDataVersionAttribute;
    private static _tempDoc;
    private static _wpDiv;
    private static _wpComponentIdDiv;
    private static _wpHtmlPropsDiv;
    private static _linkPlaceHolderRegex;
    /**
     * A temporary document detached from the main document for HTML parsing (call createElement on this)
     *
     * Note: Using document.createElement will create the element on the running document of the page which is
     * dangerous, because when you set innerHTML on the element the content will immediately run on the page.
     * That causes a security issue because we might be parsing something that has a <script> tag (XSS attack).
     * In case of <img> tags, the image gets downloaded immediately which is also unwanted behavior. So, for
     * parsing purposes, we should never use document.createElement and insead use this._parsingDocument.createElement.
     *
     */
    private static readonly _parsingDocument;
    /**
     * Is this string a html web part data ?
     */
    static isWebPartHtml(htmlString: string): boolean;
    /**
     * Converts an instance of IWebPartData to is corresponding persisted HTML element.
     * See WebPartDataConverter tests for examples.
     */
    static convertWebPartDataToHtml(webpartData: IWebPartData): string;
    /**
     * Converts persisted html element for a web part to its corresponding IWebPartData instance.
     *
     * @remarks
     * Returns undefined in case of bad input.
     * See WebPartDataConverter tests for examples
     *
     * @param htmlString - html formatted web part data.
     * @param links - (optional) Array of the fixed up links. If provided, the values in this array
     *   take over the values in the HTML markup.
     */
    static convertHtmlToWebPartData(htmlString: string, links?: string[]): IWebPartData | undefined;
    /**
     * Convert server process data to an equivalent HTML stirng format that the SharePoint server
     * can process for search indexing, link fixup and SafeHTML processing.
     *
     * @remarks
     * HtmlStrings are search indexed. Links and ImageSources are setup for link fixup. All of these are
     * search indexed and passed through SafeHtml processing to sanitize the content.
     *
     * This method is expected to provide reverse processing as compared to `convertHtmltoServerProcessedData`.
     *
     * Input:
     *
     * ```
     * {
     *   htmlStrings: { 'prop1': 'value_of_prop1' },
     *   links: { 'prop2': 'http://www.contoso.com/page1.aspx' },
     *   imageSources: { 'prop3': 'http://www.contoso.com/imag.png' }
     * }
     * ```
     *
     * Output:
     *
     * ```
     * "<div data-sp-prop-name='prop1'>value_of_prop1</div>
     *  <link data-sp-prop-name='prop2' href='http://www.contoso.com/page1.aspx'>
     *  <img data-sp-prop-name='prop3' src='http://www.contoso.com/image.png'>"
     * ```
     */
    static convertServerProcessedDataToHtml(serverContent: ISerializedServerProcessedData | undefined): string;
    private static _convertServerProcessedDataToHtmlByType;
    /**
     * Convert an HTML string to its equivalent ISerializedServerProcessedData structure format.
     *
     * @remarks
     * This method is expected to provide reverse processing as compared to convertServerProcessedDataToHtml.
     *
     * Input:
     *
     * ```
     * "<div data-sp-prop-name='prop1'>value_of_prop1</div>
     *  <link data-sp-prop-name='prop2' href='http://www.contoso.com/page1.aspx'>
     *  <img data-sp-prop-name='prop3' src='http://www.contoso.com/image.png'>"
     * ```
     *
     * Output:
     *
     * ```
     * {
     *   htmlStrings: { 'prop1': 'value_of_prop1' },
     *   links: { 'prop2': 'http://www.contoso.com/page1.aspx' },
     *   imageSources: { 'prop3': 'http://www.contoso.com/imag.png' }
     * }
     * ```
     *
     * Array of the fixed up links. If provided, the values in this array take over the values in the HTML markup.
     */
    static convertServerProcessedHtmlToData(htmlString: string, links?: string[]): ISerializedServerProcessedData;
    /**
     * Get the HTML equivalent string for a server processed prop type.
     */
    private static _getHtmlString;
    /**
     * We need to send valid html from client, because server should understand it to perform services. This method
     * normalizes html by doing basic validations and removing script tags. Returns empty string if passed invalid HTML.
     * Note that this is not a strict html validation, it just needs to make sure the page doesn't break so the
     * html value (or a valid part of it) gets to server for proper validation and sanitization
     */
    private static _normalizeHTML;
    private static _initializeIfNeeded;
    /**
     * Extract the link by processing the links array and the index in the data-sp-splink attribute whose
     * value should be of the format  `__SPLINK__<index>__` where index is the index in the links array.
     */
    private static _extractSPLink;
}

/**
 * Form factor of the web part.
 *
 * @remarks
 * This will change based on how the web part is used, not by the web part itself.
 * In cases like web parts used in Teams tab or as App pages, it will have full size form factor.
 * If a web part is render in a canvas, with other web parts, it will have a canvas web part form factor.
 *
 * @beta
 */
export declare const enum WebPartFormFactor {
    /**
     * Standard form factor. This means the web part is rendered in a canvas, potentially with other web parts.
     * In this case, the width is determined by the container, and web part self-adjust for height.
     */
    Standard = 0,
    /**
     * Full size form factor. This means the web part is rendered in full size, taking all space available in the page.
     *
     * @remarks
     * This is the case for Teams tabs or single web part App pages.
     */
    FullSize = 1,
    /**
     * Full width form factor. This means the web part has 100% of the width of the page, but the height is controlled
     * by the web part.
     *
     * @alpha
     */
    FullWidth = 2
}

/**
 * Enum describing different levels isolation supported for a web part.
 *
 * @alpha
 */
export declare enum WebPartIsolationLevel {
    /**
     * Web part is not isolated.
     */
    None = "None",
    /**
     * Web part's DOM is isolated from the main page's DOM.
     */
    DomIsolation = "DomIsolation"
}

export { }
