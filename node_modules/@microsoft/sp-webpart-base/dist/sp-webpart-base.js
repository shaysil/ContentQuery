define("974a7777-0990-4136-8fa6-95d80114c2e0_1.8.0", ["@microsoft/sp-core-library","@microsoft/sp-diagnostics","@microsoft/decorators","@microsoft/sp-lodash-subset","@ms/sp-telemetry","@microsoft/sp-component-base","@microsoft/sp-loader","@microsoft/load-themed-styles","resx-strings","@ms/sp-load-themed-styles","@microsoft/sp-http","@microsoft/sp-page-context"], function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp974a7777_0990_4136_8fa6_95d80114c2e0_1_8_0"];
/******/ 	window["webpackJsonp974a7777_0990_4136_8fa6_95d80114c2e0_1_8_0"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		1: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = 'text/javascript';
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + ({}[chunkId]||chunkId) + "_" + {"0":"62b1bd0438595106c710"}[chunkId] + ".js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Set the webpack public path
/******/ 	(function () {
/******/ 	  var scripts = document.getElementsByTagName('script');
/******/ 	  var regex = (typeof spScriptNamePattern !== 'undefined') ? spScriptNamePattern : new RegExp('\\/sp-webpart-base(_[a-z0-9-]+)*\\.js', 'i');
/******/ 	  var publicPath;
/******/ 	
/******/ 	  if (scripts && scripts.length) {
/******/ 	    for (var i = 0; i < scripts.length; i++) {
/******/ 	      if (!scripts[i]) continue;
/******/ 	      var path = scripts[i].getAttribute('src');
/******/ 	      if (path && path.match(regex)) {
/******/ 	        publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 	        break;
/******/ 	      }
/******/ 	    }
/******/ 	  }
/******/ 	
/******/ 	  if (!publicPath) {
/******/ 	    for (var global in window.__setWebpackPublicPathLoaderSrcRegistry__) {
/******/ 	      if (global && global.match(regex)) {
/******/ 	        publicPath = global.substring(0, global.lastIndexOf('/') + 1);
/******/ 	        break;
/******/ 	      }
/******/ 	    }
/******/ 	  }
/******/ 	  __webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// CONCATENATED MODULE: C:/agent/1/_work/7/s/common/temp/node_modules/.onedrive.pkgs.visualstudio.com/tslib/1.9.3/node_modules/tslib/tslib.es6.js
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

// EXTERNAL MODULE: external "@microsoft/sp-component-base"
var sp_component_base_ = __webpack_require__(5);
var sp_component_base__default = /*#__PURE__*/__webpack_require__.n(sp_component_base_);

// EXTERNAL MODULE: external "@microsoft/sp-core-library"
var sp_core_library_ = __webpack_require__(0);
var sp_core_library__default = /*#__PURE__*/__webpack_require__.n(sp_core_library_);

// EXTERNAL MODULE: external "@microsoft/decorators"
var decorators_ = __webpack_require__(2);
var decorators__default = /*#__PURE__*/__webpack_require__.n(decorators_);

// CONCATENATED MODULE: ./lib/core/context/PropertyPaneAccessor.js



var PropertyPaneAccessor_PropertyPaneAccessor =  (function () {
    function PropertyPaneAccessor(openProperytPane, closePropertyPane, refresh, isRenderedByWebPart, isPropertyPaneOpen) {
        this._open = openProperytPane;
        this._close = closePropertyPane;
        this._refresh = refresh;
        this._isRenderedByWebPart = isRenderedByWebPart;
        this._isPropertyPaneOpen = isPropertyPaneOpen;
        this.open = this.open.bind(this);
        this.close = this.close.bind(this);
        this.refresh = this.refresh.bind(this);
        this.isRenderedByWebPart = this.isRenderedByWebPart.bind(this);
    }
    PropertyPaneAccessor.prototype.open = function () {
        this._open();
    };
    PropertyPaneAccessor.prototype.close = function () {
        this._close();
    };
    PropertyPaneAccessor.prototype.refresh = function () {
        this._refresh();
    };
    PropertyPaneAccessor.prototype.isRenderedByWebPart = function () {
        return this._isRenderedByWebPart();
    };
    PropertyPaneAccessor.prototype.isPropertyPaneOpen = function () {
        return this._isPropertyPaneOpen();
    };
    PropertyPaneAccessor = __decorate([
        decorators_["sealed"]
    ], PropertyPaneAccessor);
    return PropertyPaneAccessor;
}());
/* harmony default export */ var context_PropertyPaneAccessor = (PropertyPaneAccessor_PropertyPaneAccessor);

// CONCATENATED MODULE: ./lib/core/BaseWebPartContext.js




var BaseWebPartContext_BaseWebPartContext =  (function (_super) {
    __extends(BaseWebPartContext, _super);
    function BaseWebPartContext(parameters) {
        var _this = _super.call(this, parameters) || this;
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters, 'webpart context');
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters.instanceId, 'webpart context instanceId');
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters.webPartTag, 'webpart context webPartTag');
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters.host, 'webpart context host');
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters.isPropertyPaneRenderedByWebPart, 'webpart context isPropertyPaneRenderedByWebPart');
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters.isPropertyPaneOpen, 'webpart context isPropertyPaneOpen');
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters.requestPropertyPaneAction, 'webpart context requestPropertyPaneAction');
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters.formFactor, 'webpart context form factor');
        _this._webPartTag = parameters.webPartTag;
        _this._host = parameters.host;
        _this._requestPropertyPaneAction = parameters.requestPropertyPaneAction;
        _this._isPropertyPaneRenderedByWebPart = parameters.isPropertyPaneRenderedByWebPart;
        _this._isPropertyPaneOpen = parameters.isPropertyPaneOpen;
        _this._privateDataUpdatedEvent = parameters._dataUpdatedEvent;
        _this._formFactor = parameters.formFactor;
        _this._propertyPaneAccessor = new context_PropertyPaneAccessor(function () { _this._requestPropertyPaneAction(_this.instanceId, 1 , true); }, function () { _this._requestPropertyPaneAction(_this.instanceId, 2 , true); }, function () { _this._requestPropertyPaneAction(_this.instanceId, 5 , true); }, function () { return _this._isPropertyPaneRenderedByWebPart(); }, function () { return _this._isPropertyPaneOpen(); });
        return _this;
    }
    Object.defineProperty(BaseWebPartContext.prototype, "webPartTag", {
        get: function () { return this._webPartTag; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPartContext.prototype, "propertyPane", {
        get: function () { return this._propertyPaneAccessor; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPartContext.prototype, "formFactor", {
        get: function () { return this._formFactor; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPartContext.prototype, "host", {
        get: function () { return this._host; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPartContext.prototype, "_dataUpdatedEvent", {
        get: function () { return this._privateDataUpdatedEvent; },
        enumerable: true,
        configurable: true
    });
    return BaseWebPartContext;
}(sp_component_base_["BaseComponentContext"]));
/* harmony default export */ var core_BaseWebPartContext = (BaseWebPartContext_BaseWebPartContext);

// CONCATENATED MODULE: ./lib/core/WebPartContext.js




var WebPartContext_WebPartContext =  (function (_super) {
    __extends(WebPartContext, _super);
    function WebPartContext(parameters) {
        var _this = _super.call(this, parameters) || this;
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters.domElement, "webpart context domElement");
        sp_core_library_["Validate"].isNotNullOrUndefined(parameters.statusRenderer, 'webpart context statusRenderer');
        _this._domElement = parameters.domElement;
        _this._statusRenderer = parameters.statusRenderer;
        _this._teams = parameters.microsoftTeams;
        return _this;
    }
    Object.defineProperty(WebPartContext.prototype, "domElement", {
        get: function () { return this._domElement; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "statusRenderer", {
        get: function () { return this._statusRenderer; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "microsoftTeams", {
        get: function () {
            return this._teams;
        },
        enumerable: true,
        configurable: true
    });
    WebPartContext.prototype._setTeams = function (teams) {
        this._teams = teams;
    };
    WebPartContext = __decorate([
        decorators_["sealed"]
    ], WebPartContext);
    return WebPartContext;
}(core_BaseWebPartContext));
/* harmony default export */ var core_WebPartContext = (WebPartContext_WebPartContext);

// CONCATENATED MODULE: ./lib/core/IWebPartData.js
var WebPartIsolationLevel;
(function (WebPartIsolationLevel) {
    WebPartIsolationLevel["None"] = "None";
    WebPartIsolationLevel["DomIsolation"] = "DomIsolation";
})(WebPartIsolationLevel || (WebPartIsolationLevel = {}));

// EXTERNAL MODULE: external "@microsoft/sp-diagnostics"
var sp_diagnostics_ = __webpack_require__(1);
var sp_diagnostics__default = /*#__PURE__*/__webpack_require__.n(sp_diagnostics_);

// EXTERNAL MODULE: external "@microsoft/sp-lodash-subset"
var sp_lodash_subset_ = __webpack_require__(3);
var sp_lodash_subset__default = /*#__PURE__*/__webpack_require__.n(sp_lodash_subset_);

// CONCATENATED MODULE: ./lib/utils/ExecuteAndReThrow.js


function executeAndReThrow(method, errorToThrow, logSource) {
    sp_core_library_["Validate"].isNotNullOrUndefined(method, 'method');
    try {
        method();
    }
    catch (e) {
        if (logSource) {
            sp_diagnostics_["_TraceLogger"].logError(logSource, new Error('Error: ' + e));
        }
        errorToThrow.innerError = e;
        throw errorToThrow;
    }
}

// CONCATENATED MODULE: ./lib/utils/Object.js

function deepFreeze(obj) {
    if (!obj) {
        return undefined;
    }
    if (!Object.isFrozen(obj)) {
        Object.freeze(obj);
    }
    var depth = 0;
    var func = function (o) {
        if (++depth > 5) {
            return;
        }
        var propNames = Object.getOwnPropertyNames(o);
        propNames.forEach(function (name) {
            var prop = o[name];
            if (typeof prop === 'object' && !!prop && !sp_lodash_subset_["isElement"](prop) && !Object.isFrozen(prop)) {
                func(prop);
            }
        });
    };
    func(obj);
    return obj;
}

// CONCATENATED MODULE: ./lib/common/KillSwitches.js

var KillSwitches_KillSwitches =  (function () {
    function KillSwitches() {
    }
    KillSwitches.isAvoidingUnnecesaryWebPartRenderKillSwitchActivated = function () {
        return sp_core_library_["_SPKillSwitch"].isActivated(sp_core_library_["Guid"].parse('16af4f13-a040-4557-9a79-f782a05ccd1f'), '01/09/2019', 'Avoiding unnecessary web part render');
    };
    KillSwitches.isLogWebPartLoadRenderDoneKillSwitchActivated = function () {
        return sp_core_library_["_SPKillSwitch"].isActivated(sp_core_library_["Guid"].parse('c2f3c612-9a07-441d-ab4e-f06d2b5268af'), '02/26/2019', 'Log web part load render done.');
    };
    return KillSwitches;
}());
/* harmony default export */ var common_KillSwitches = (KillSwitches_KillSwitches);

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneField/IPropertyPaneField.js
var PropertyPaneFieldType;
(function (PropertyPaneFieldType) {
    PropertyPaneFieldType[PropertyPaneFieldType["Custom"] = 1] = "Custom";
    PropertyPaneFieldType[PropertyPaneFieldType["CheckBox"] = 2] = "CheckBox";
    PropertyPaneFieldType[PropertyPaneFieldType["TextField"] = 3] = "TextField";
    PropertyPaneFieldType[PropertyPaneFieldType["Toggle"] = 5] = "Toggle";
    PropertyPaneFieldType[PropertyPaneFieldType["Dropdown"] = 6] = "Dropdown";
    PropertyPaneFieldType[PropertyPaneFieldType["Label"] = 7] = "Label";
    PropertyPaneFieldType[PropertyPaneFieldType["Slider"] = 8] = "Slider";
    PropertyPaneFieldType[PropertyPaneFieldType["Heading"] = 9] = "Heading";
    PropertyPaneFieldType[PropertyPaneFieldType["ChoiceGroup"] = 10] = "ChoiceGroup";
    PropertyPaneFieldType[PropertyPaneFieldType["Button"] = 11] = "Button";
    PropertyPaneFieldType[PropertyPaneFieldType["HorizontalRule"] = 12] = "HorizontalRule";
    PropertyPaneFieldType[PropertyPaneFieldType["Link"] = 13] = "Link";
    PropertyPaneFieldType[PropertyPaneFieldType["DynamicField"] = 14] = "DynamicField";
    PropertyPaneFieldType[PropertyPaneFieldType["DynamicTextField"] = 15] = "DynamicTextField";
    PropertyPaneFieldType[PropertyPaneFieldType["DynamicFieldSet"] = 16] = "DynamicFieldSet";
    PropertyPaneFieldType[PropertyPaneFieldType["SpinButton"] = 17] = "SpinButton";
})(PropertyPaneFieldType || (PropertyPaneFieldType = {}));

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneCustomField/PropertyPaneCustomField.js

function PropertyPaneCustomField(properties) {
    return {
        type: PropertyPaneFieldType.Custom,
        targetProperty: undefined,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneButton/PropertyPaneButton.js

function PropertyPaneButton(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.Button,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneCheckBox/PropertyPaneCheckbox.js

function PropertyPaneCheckbox(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.CheckBox,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneChoiceGroup/PropertyPaneChoiceGroup.js

function PropertyPaneChoiceGroup(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.ChoiceGroup,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneDropdown/PropertyPaneDropdown.js

function PropertyPaneDropdown(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.Dropdown,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneDynamicField/PropertyPaneDynamicField.js

function PropertyPaneDynamicField(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.DynamicField,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneDynamicFieldSet/PropertyPaneDynamicFieldSet.js

function PropertyPaneDynamicFieldSet(properties) {
    return {
        type: PropertyPaneFieldType.DynamicFieldSet,
        targetProperty: '',
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneHorizontalRule/PropertyPaneHorizontalRule.js

function PropertyPaneHorizontalRule() {
    return {
        type: PropertyPaneFieldType.HorizontalRule,
        targetProperty: undefined,
        properties: undefined
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneLabel/PropertyPaneLabel.js

function PropertyPaneLabel(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.Label,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneToggle/PropertyPaneToggle.js

function PropertyPaneToggle(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.Toggle,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneDynamicTextField/PropertyPaneDynamicTextField.js

function PropertyPaneDynamicTextField(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.DynamicTextField,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneTextField/PropertyPaneTextField.js

function PropertyPaneTextField(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.TextField,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneLink/PropertyPaneLink.js

function PropertyPaneLink(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.Link,
        targetProperty: undefined,
        properties: properties
    };
}

// CONCATENATED MODULE: ../sp-property-pane/lib/propertyPaneFields/propertyPaneSlider/PropertyPaneSlider.js

function PropertyPaneSlider(targetProperty, properties) {
    return {
        type: PropertyPaneFieldType.Slider,
        targetProperty: targetProperty,
        properties: properties
    };
}

// CONCATENATED MODULE: ./lib/SPPropertyPane.js














function SPPropertyPane_PropertyPaneCustomField(properties) {
    return PropertyPaneCustomField(properties);
}
function SPPropertyPane_PropertyPaneButton(targetProperty, properties) {
    return PropertyPaneButton(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneCheckbox(targetProperty, properties) {
    return PropertyPaneCheckbox(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneChoiceGroup(targetProperty, properties) {
    return PropertyPaneChoiceGroup(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneDropdown(targetProperty, properties) {
    return PropertyPaneDropdown(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneDynamicField(targetProperty, properties) {
    return PropertyPaneDynamicField(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneDynamicFieldSet(properties) {
    return PropertyPaneDynamicFieldSet(properties);
}
function SPPropertyPane_PropertyPaneHorizontalRule() {
    return PropertyPaneHorizontalRule();
}
function SPPropertyPane_PropertyPaneLabel(targetProperty, properties) {
    return PropertyPaneLabel(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneLink(targetProperty, properties) {
    return PropertyPaneLink(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneSlider(targetProperty, properties) {
    return PropertyPaneSlider(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneTextField(targetProperty, properties) {
    return PropertyPaneTextField(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneToggle(targetProperty, properties) {
    return PropertyPaneToggle(targetProperty, properties);
}
function SPPropertyPane_PropertyPaneDynamicTextField(targetProperty, properties) {
    return PropertyPaneDynamicTextField(targetProperty, properties);
}
var SPPropertyPane_PropertyPaneFieldType;
(function (PropertyPaneFieldType) {
    PropertyPaneFieldType[PropertyPaneFieldType["Custom"] = 1] = "Custom";
    PropertyPaneFieldType[PropertyPaneFieldType["CheckBox"] = 2] = "CheckBox";
    PropertyPaneFieldType[PropertyPaneFieldType["TextField"] = 3] = "TextField";
    PropertyPaneFieldType[PropertyPaneFieldType["Toggle"] = 5] = "Toggle";
    PropertyPaneFieldType[PropertyPaneFieldType["Dropdown"] = 6] = "Dropdown";
    PropertyPaneFieldType[PropertyPaneFieldType["Label"] = 7] = "Label";
    PropertyPaneFieldType[PropertyPaneFieldType["Slider"] = 8] = "Slider";
    PropertyPaneFieldType[PropertyPaneFieldType["Heading"] = 9] = "Heading";
    PropertyPaneFieldType[PropertyPaneFieldType["ChoiceGroup"] = 10] = "ChoiceGroup";
    PropertyPaneFieldType[PropertyPaneFieldType["Button"] = 11] = "Button";
    PropertyPaneFieldType[PropertyPaneFieldType["HorizontalRule"] = 12] = "HorizontalRule";
    PropertyPaneFieldType[PropertyPaneFieldType["Link"] = 13] = "Link";
    PropertyPaneFieldType[PropertyPaneFieldType["DynamicField"] = 14] = "DynamicField";
    PropertyPaneFieldType[PropertyPaneFieldType["DynamicTextField"] = 15] = "DynamicTextField";
    PropertyPaneFieldType[PropertyPaneFieldType["DynamicFieldSet"] = 16] = "DynamicFieldSet";
    PropertyPaneFieldType[PropertyPaneFieldType["SpinButton"] = 17] = "SpinButton";
})(SPPropertyPane_PropertyPaneFieldType || (SPPropertyPane_PropertyPaneFieldType = {}));
var PropertyPaneButtonType;
(function (PropertyPaneButtonType) {
    PropertyPaneButtonType[PropertyPaneButtonType["Normal"] = 0] = "Normal";
    PropertyPaneButtonType[PropertyPaneButtonType["Primary"] = 1] = "Primary";
    PropertyPaneButtonType[PropertyPaneButtonType["Hero"] = 2] = "Hero";
    PropertyPaneButtonType[PropertyPaneButtonType["Compound"] = 3] = "Compound";
    PropertyPaneButtonType[PropertyPaneButtonType["Command"] = 4] = "Command";
    PropertyPaneButtonType[PropertyPaneButtonType["Icon"] = 5] = "Icon";
})(PropertyPaneButtonType || (PropertyPaneButtonType = {}));
var PropertyPaneDropdownOptionType;
(function (PropertyPaneDropdownOptionType) {
    PropertyPaneDropdownOptionType[PropertyPaneDropdownOptionType["Normal"] = 0] = "Normal";
    PropertyPaneDropdownOptionType[PropertyPaneDropdownOptionType["Divider"] = 1] = "Divider";
    PropertyPaneDropdownOptionType[PropertyPaneDropdownOptionType["Header"] = 2] = "Header";
})(PropertyPaneDropdownOptionType || (PropertyPaneDropdownOptionType = {}));

// CONCATENATED MODULE: ./lib/core/loc/Strings.resx.js
var Strings_resx_key = '_cUY5i3OR5M46pep9mRCR0g';
var allStrings = ( false) ?
    require("../../resx-strings/en-us.json") :
    __webpack_require__(10);
var strings = allStrings[Strings_resx_key];
/* harmony default export */ var Strings_resx = (strings);

// CONCATENATED MODULE: ./lib/core/error/SPWebPartError.js




var SPWebPartErrorCode;
(function (SPWebPartErrorCode) {
    SPWebPartErrorCode[SPWebPartErrorCode["ModuleUndefined"] = 0] = "ModuleUndefined";
    SPWebPartErrorCode[SPWebPartErrorCode["ModuleNotLoaded"] = 1] = "ModuleNotLoaded";
    SPWebPartErrorCode[SPWebPartErrorCode["IncorrectBoostrapModule"] = 2] = "IncorrectBoostrapModule";
    SPWebPartErrorCode[SPWebPartErrorCode["MissingExpectedWebPartMemberError"] = 3] = "MissingExpectedWebPartMemberError";
    SPWebPartErrorCode[SPWebPartErrorCode["NonBaseWebPart"] = 4] = "NonBaseWebPart";
    SPWebPartErrorCode[SPWebPartErrorCode["ScriptLoadError"] = 5] = "ScriptLoadError";
    SPWebPartErrorCode[SPWebPartErrorCode["ManifestDownloadFailed"] = 6] = "ManifestDownloadFailed";
    SPWebPartErrorCode[SPWebPartErrorCode["ManifestNull"] = 7] = "ManifestNull";
    SPWebPartErrorCode[SPWebPartErrorCode["ManifestInvalid"] = 8] = "ManifestInvalid";
    SPWebPartErrorCode[SPWebPartErrorCode["BaseConstructError"] = 9] = "BaseConstructError";
    SPWebPartErrorCode[SPWebPartErrorCode["MustOverrideRender"] = 10] = "MustOverrideRender";
    SPWebPartErrorCode[SPWebPartErrorCode["NotInitializedError"] = 11] = "NotInitializedError";
    SPWebPartErrorCode[SPWebPartErrorCode["PropertyBagNull"] = 12] = "PropertyBagNull";
    SPWebPartErrorCode[SPWebPartErrorCode["OnAfterDeserializeReturnedNull"] = 13] = "OnAfterDeserializeReturnedNull";
    SPWebPartErrorCode[SPWebPartErrorCode["OnInitReturnedNullPromise"] = 14] = "OnInitReturnedNullPromise";
    SPWebPartErrorCode[SPWebPartErrorCode["ReadOnlyProperty"] = 15] = "ReadOnlyProperty";
    SPWebPartErrorCode[SPWebPartErrorCode["SerializationFailed"] = 16] = "SerializationFailed";
    SPWebPartErrorCode[SPWebPartErrorCode["FirstTimeRenderCalledMoreThanOnce"] = 17] = "FirstTimeRenderCalledMoreThanOnce";
    SPWebPartErrorCode[SPWebPartErrorCode["RenderCompletedCallNotCalled"] = 18] = "RenderCompletedCallNotCalled";
    SPWebPartErrorCode[SPWebPartErrorCode["InvalidSPLinkAttributeFormat"] = 19] = "InvalidSPLinkAttributeFormat";
    SPWebPartErrorCode[SPWebPartErrorCode["InvalidSPLinkIndex"] = 20] = "InvalidSPLinkIndex";
    SPWebPartErrorCode[SPWebPartErrorCode["GetDataReturnedNullPromise"] = 21] = "GetDataReturnedNullPromise";
    SPWebPartErrorCode[SPWebPartErrorCode["RenderPromiseUndefined"] = 22] = "RenderPromiseUndefined";
})(SPWebPartErrorCode || (SPWebPartErrorCode = {}));
var SPWebPartError_SPWebPartError =  (function (_super) {
    __extends(SPWebPartError, _super);
    function SPWebPartError(errorCode, logProperties) {
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            params[_i - 2] = arguments[_i];
        }
        var _this = this;
        var webPartErrorCode = errorCode;
        if (webPartErrorCode) {
            _this = _super.call(this, SPWebPartErrorCode[webPartErrorCode], sp_core_library_["Text"].format(SPWebPartError_1._errorCodeToMessageMap.get(webPartErrorCode), params), logProperties) || this;
            _this.__proto__ = SPWebPartError_1.prototype; 
            _this._id = webPartErrorCode;
        }
        return _this;
    }
    SPWebPartError_1 = SPWebPartError;
    Object.defineProperty(SPWebPartError.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWebPartError.prototype, "category", {
        get: function () {
            return 'SPWebPartErrorCode';
        },
        enumerable: true,
        configurable: true
    });
    SPWebPartError.create = function (errorCode) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        return new SPWebPartError_1(errorCode, undefined, params);
    };
    SPWebPartError.createWithLogProperties = function (errorCode, logProperties) {
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            params[_i - 2] = arguments[_i];
        }
        return new SPWebPartError_1(errorCode, logProperties, params);
    };
    var SPWebPartError_1;
    SPWebPartError._errorCodeToMessageMap = new Map([
        [SPWebPartErrorCode.ModuleUndefined, Strings_resx.UndefinedModuleError],
        [SPWebPartErrorCode.ModuleNotLoaded, Strings_resx.ModuleNotLoadedError],
        [SPWebPartErrorCode.IncorrectBoostrapModule, Strings_resx.IncorrectBoostrapModuleError],
        [SPWebPartErrorCode.MissingExpectedWebPartMemberError, Strings_resx.MissingExpectedWebPartMemberError],
        [SPWebPartErrorCode.NonBaseWebPart, Strings_resx.NonBaseWebPartError],
        [SPWebPartErrorCode.ScriptLoadError, Strings_resx.ScriptLoadErrorTemplate],
        [SPWebPartErrorCode.ManifestDownloadFailed, Strings_resx.ManifestDownloadFailed],
        [SPWebPartErrorCode.ManifestNull, Strings_resx.ManifestNullError],
        [SPWebPartErrorCode.ManifestInvalid, Strings_resx.ManifestInvalidError],
        [SPWebPartErrorCode.BaseConstructError, Strings_resx.BaseConstructError],
        [SPWebPartErrorCode.MustOverrideRender, Strings_resx.MustOverrideRenderError],
        [SPWebPartErrorCode.NotInitializedError, Strings_resx.NotIntializedError],
        [SPWebPartErrorCode.PropertyBagNull, Strings_resx.PropertyBagNullError],
        [SPWebPartErrorCode.OnAfterDeserializeReturnedNull, Strings_resx.OnAfterDeserializeReturnedNull],
        [SPWebPartErrorCode.OnInitReturnedNullPromise, Strings_resx.OnInitReturnedNullPromise],
        [SPWebPartErrorCode.ReadOnlyProperty, Strings_resx.ReadOnlyPropertyError],
        [SPWebPartErrorCode.SerializationFailed, Strings_resx.SerializationFailedError],
        [SPWebPartErrorCode.FirstTimeRenderCalledMoreThanOnce, Strings_resx.FirstTimeRenderCalledMoreThanOnceError],
        [SPWebPartErrorCode.RenderCompletedCallNotCalled, Strings_resx.RenderCompletedCallNotCalledError],
        [SPWebPartErrorCode.InvalidSPLinkAttributeFormat, Strings_resx.InvalidSPLinkAttributeFormatError],
        [SPWebPartErrorCode.InvalidSPLinkIndex, Strings_resx.InvalidSPLinkIndexError],
        [SPWebPartErrorCode.RenderPromiseUndefined, Strings_resx.RenderPromiseUndefinedError]
    ] );
    SPWebPartError = SPWebPartError_1 = __decorate([
        decorators_["sealed"]
    ], SPWebPartError);
    return SPWebPartError;
}(sp_core_library_["SPError"]));


// CONCATENATED MODULE: ./lib/core/BaseWebPart.js













var BaseWebPart_BaseWebPart =  (function (_super) {
    __extends(BaseWebPart, _super);
    function BaseWebPart() {
        var _this = _super.call(this) || this;
        _this._initialized = false;
        _this._baseLogSource = sp_diagnostics_["_LogSource"].create('BaseWebPart');
        _this._hasEditLogged = false;
        _this._emptyResolvedPromise = Promise.resolve();
        _this._disposeDynamicPropertiesIfRequired = _this._disposeDynamicPropertiesIfRequired.bind(_this);
        if (_this.constructor['name'] === 'BaseWebPart') { 
            throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.BaseConstructError);
        }
        return _this;
    }
    Object.defineProperty(BaseWebPart.prototype, "dataVersion", {
        get: function () {
            return sp_core_library_["Version"].parse('1.0');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "displayMode", {
        get: function () { return this._displayMode; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "properties", {
        get: function () {
            if (this._initialized) {
                return this._properties;
            }
            else {
                throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.NotInitializedError);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "propertiesMetadata", {
        get: function () { return undefined; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "disableReactivePropertyChanges", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "previewImageUrl", {
        get: function () { return undefined; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "accessibleTitle", {
        get: function () { return this._getDefaultAccessibleTitle(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "title", {
        get: function () { return this._title; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "description", {
        get: function () { return this._description; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "persistedProperties", {
        get: function () {
            return (this.disableReactivePropertyChanges && this._backupProperties) ?
                this._backupProperties : this.properties;
        },
        enumerable: true,
        configurable: true
    });
    BaseWebPart.prototype._getPropertyPaneData = function () {
        var _this = this;
        return this._loadPropertyPaneResources().then(function () {
            var configuration = _this.getPropertyPaneConfiguration();
            _this._fixUpDynamicDataConfiguration(configuration);
            return {
                webPartId: _this.context.instanceId,
                title: _this.title,
                isReactive: !_this.disableReactivePropertyChanges,
                configuration: configuration,
                properties: _this._cloneProperties(_this.properties),
                onPropertyPaneFieldChanged: undefined,
                onConfigurationEvent: undefined,
                onRendered: _this.onPropertyPaneRendered,
                dynamicConfiguration: {
                    defaultCallback: (function () { _this._dynamicPropertyRefresh(); }).bind(_this),
                    dynamicDataProvider: _this.context.dynamicDataProvider
                }
            };
        });
    };
    BaseWebPart.prototype._loadPropertyPaneResources = function () {
        if (!this._loadPropertyPaneResourcesPromise) {
            this._loadPropertyPaneResourcesPromise = this.loadPropertyPaneResources();
        }
        return this._loadPropertyPaneResourcesPromise;
    };
    BaseWebPart.prototype._onPropertyPaneFieldChanged = function (propertyPath, newValue,  fieldType) {
        var _this = this;
        if (common_KillSwitches.isAvoidingUnnecesaryWebPartRenderKillSwitchActivated()) {
            if (this.disableReactivePropertyChanges && !this._backupProperties) {
                this._backupProperties = this._cloneProperties(this.properties);
            }
            var oldValue = sp_lodash_subset_["get"](this._properties, propertyPath); 
            var newDynamicProperty = new sp_component_base_["DynamicProperty"](
            this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(this));
            if (oldValue instanceof sp_component_base_["DynamicProperty"] && !(newValue instanceof sp_component_base_["DynamicProperty"])) {
                newDynamicProperty.setValue(newValue);
                newValue = newDynamicProperty;
            }
            this._updateProperty(propertyPath, newValue);
            this.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);
            this._afterPropertyUpdated(!this.disableReactivePropertyChanges);
        }
        else {
            var oldValue = sp_lodash_subset_["get"](this._properties, propertyPath); 
            if (!sp_lodash_subset_["isEqual"](oldValue, newValue) ||
                fieldType === SPPropertyPane_PropertyPaneFieldType.Button ||
                fieldType === SPPropertyPane_PropertyPaneFieldType.Custom) {
                if (this.disableReactivePropertyChanges && !this._backupProperties) {
                    this._backupProperties = this._cloneProperties(this.properties);
                }
                if (oldValue instanceof sp_component_base_["DynamicProperty"] && !(newValue instanceof sp_component_base_["DynamicProperty"])) {
                    var newDynamicProperty = new sp_component_base_["DynamicProperty"](
                    this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(this));
                    newDynamicProperty.setValue(newValue);
                    newValue = newDynamicProperty;
                }
                this._updateProperty(propertyPath, newValue);
                this.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);
                this._afterPropertyUpdated(!this.disableReactivePropertyChanges);
            }
        }
    };
    BaseWebPart.prototype._onPropertyPaneLifeCycleEvent = function (event) {
        var _this = this;
        if (this.context.host.propertyPaneLifeCycleEventCallback) {
            this.context.host.propertyPaneLifeCycleEventCallback(event, {
                webPartData: this._internalSerialize(),
                isPropertyPaneReactive: this._isPropertyPaneReactive()
            });
        }
        switch (event) {
            case 1 :
                this._loadPropertyPaneResources().then(function () { return _this.onPropertyPaneConfigurationStart(); });
                break;
            case 2 :
                if (this.disableReactivePropertyChanges && this._backupProperties) {
                    this._properties = this._backupProperties;
                    this._backupProperties = undefined;
                }
                this.onPropertyPaneConfigurationComplete();
                break;
            case 5 :
                this._backupProperties = this.properties;
                this.onAfterPropertyPaneChangesApplied();
                this._afterPropertyUpdated(true);
                break;
        }
    };
    BaseWebPart.prototype._isPropertyPaneReactive = function () {
        return !this.disableReactivePropertyChanges;
    };
    BaseWebPart.prototype._internalSerialize = function () {
        var _this = this;
        var data; 
        executeAndReThrow(function () {
            _this.onBeforeSerialize();
            var propertiesJson = JSON.stringify(_this.properties);
            if (!_this._hasEditLogged && _this._initPropertiesSnapshot !== propertiesJson) {
                var isInternal = !!_this.context.manifest.isInternal;
                var logEntry = new sp_diagnostics_["_LogEntry"](_this._baseLogSource.id, 'WebPartEdited', sp_diagnostics_["_LogType"].Event, {
                    'alias': _this.context.manifest.alias,
                    'isInternal': isInternal.toString()
                });
                sp_diagnostics_["_EngagementLogger"].logEventWithLogEntry(logEntry);
                _this._hasEditLogged = true;
            }
            var serializedData = _this._serialize();
            sp_core_library_["Validate"].isNotNullOrUndefined(serializedData.dataVersion, 'serialized data version');
            if (propertiesJson && propertiesJson.indexOf(sp_component_base_["DynamicProperty"]._TYPE_NAME) !== -1) {
                _this._serializeDynamicData(serializedData);
            }
            data = {
                id: _this.context.manifest.id,
                instanceId: _this.context.instanceId,
                title: _this.title,
                description: _this.description,
                serverProcessedContent: serializedData.serverProcessedContent,
                dynamicDataPaths: serializedData.dynamicDataPaths,
                dynamicDataValues: serializedData.dynamicDataValues,
                dataVersion: serializedData.dataVersion.toString(),
                properties: serializedData.properties
            };
        }, SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.SerializationFailed, this.context.webPartTag), this._baseLogSource);
        return data;
    };
    BaseWebPart.prototype._internalDispose = function () {
        sp_diagnostics_["_TraceLogger"].logVerbose(this._baseLogSource, sp_core_library_["Text"].format(Strings_resx.DisposeLog, this.context.webPartTag));
        this._disposeDynamicPropertiesIfRequired();
        _super.prototype.dispose.call(this);
    };
    BaseWebPart.prototype._internalOnAfterResize = function () {
    };
    BaseWebPart.prototype.onInit = function () {
        return Promise.resolve(undefined);
    };
    BaseWebPart.prototype.onDisplayModeChanged = function (oldDisplayMode) {
    };
    BaseWebPart.prototype.onBeforeSerialize = function () {
    };
    BaseWebPart.prototype.onAfterDeserialize = function (deserializedObject, dataVersion) {
        return deserializedObject;
    };
    BaseWebPart.prototype.loadPropertyPaneResources = function () {
        return this._emptyResolvedPromise;
    };
    BaseWebPart.prototype.getPropertyPaneConfiguration = function () {
        return {
            pages: []
        };
    };
    BaseWebPart.prototype.onDispose = function () {
    };
    BaseWebPart.prototype.onPropertyPaneFieldChanged = function (propertyPath, oldValue, newValue) {
    };
    BaseWebPart.prototype.onPropertyPaneConfigurationStart = function () {
    };
    BaseWebPart.prototype.onPropertyPaneConfigurationComplete = function () {
    };
    BaseWebPart.prototype.onAfterPropertyPaneChangesApplied = function () {
    };
    BaseWebPart.prototype.onPropertyPaneRendered = function () {
    };
    BaseWebPart.prototype._internalInitialize = function (webPartContext, addedFromPersistedData, mode) {
        sp_core_library_["Validate"].isNotNullOrUndefined(webPartContext, 'webPartContext');
        deepFreeze(webPartContext.manifest);
        _super.prototype._initializeContext.call(this, webPartContext);
        sp_diagnostics_["_TraceLogger"].logVerbose(this._baseLogSource, sp_core_library_["Text"].format(Strings_resx.ConstructLog, webPartContext.webPartTag));
        this.onDispose = this.onDispose.bind(this);
        this.onPropertyPaneRendered = this.onPropertyPaneRendered.bind(this);
        this._initialized = true;
        this._displayMode = mode;
        this._renderedFromPersistedData = addedFromPersistedData;
        if (!this._renderedFromPersistedData) {
            var isInternal = this.context.manifest.isInternal || false;
            var logEntry = new sp_diagnostics_["_LogEntry"](this._baseLogSource.id, 'WebPartAdded', sp_diagnostics_["_LogType"].Event, {
                'alias': this.context.manifest.alias,
                'isInternal': isInternal.toString()
            });
            sp_diagnostics_["_EngagementLogger"].logEventWithLogEntry(logEntry);
        }
    };
    BaseWebPart.prototype._internalGetData = function () {
        return this._emptyResolvedPromise;
    };
    BaseWebPart.prototype._internalSetDisplayMode = function (newDisplayMode) {
        if (this._displayMode !== newDisplayMode) {
            var oldDisplayMode = this._displayMode;
            this._displayMode = newDisplayMode;
            this.onDisplayModeChanged(oldDisplayMode);
        }
    };
    BaseWebPart.prototype._internalSetDirtyBit = function () {
        if (this.displayMode === sp_core_library_["DisplayMode"].Read) {
            return;
        }
        var serializedState = this._internalSerialize();
        var newState = JSON.stringify(serializedState);
        if (!this._previousState) {
            this._previousState = newState;
        }
        else if (this._previousState !== newState && this.context.host.setDirty) {
            this.context.host.setDirty(this.context.instanceId, serializedState);
            this._previousState = newState;
        }
    };
    BaseWebPart.prototype._getDefaultAccessibleTitle = function () {
        return sp_core_library_["Text"].format(Strings_resx.GenericAccessibleLabelTemplate, this.title);
    };
    BaseWebPart.prototype._reInstateServerProcessedData = function (deserializedProperties, serverProcessedContent) {
        var _this = this;
        if (!deserializedProperties) {
            return {};
        }
        var fixedProperties = deserializedProperties;
        if (!this._renderedFromPersistedData) {
            return fixedProperties;
        }
        this._forEachPropertyWithMetaData(function (propPath, metadata) {
            if (_this.context.manifest.id !== 'b7dd04e1-19ce-4b24-9132-b60a1c2b910d'
                && metadata.isHtmlString) {
                sp_lodash_subset_["set"](fixedProperties, propPath, undefined);
            }
        }, fixedProperties);
        if (serverProcessedContent) {
            var htmlMaps = [
                serverProcessedContent.htmlStrings,
                serverProcessedContent.searchablePlainTexts,
                serverProcessedContent.imageSources,
                serverProcessedContent.links,
                serverProcessedContent.componentDependencies
            ];
            for (var _i = 0, htmlMaps_1 = htmlMaps; _i < htmlMaps_1.length; _i++) {
                var htmlMap = htmlMaps_1[_i];
                if (htmlMap) {
                    for (var propPath in htmlMap) { 
                        var value = htmlMap[propPath];
                        if (typeof value === 'string') {
                            sp_lodash_subset_["set"](fixedProperties, propPath, value);
                        }
                    }
                }
            }
        }
        return fixedProperties;
    };
    BaseWebPart.prototype._forEachPropertyWithMetaData = function (metadataProcessor, properties ) {
        if (this.propertiesMetadata) {
            var _loop_1 = function (propPath) {
                var metadata = this_1.propertiesMetadata[propPath];
                this_1._validateAndIteratePath(propPath, properties || this_1.properties, function (fixedPropPath, index) {
                    metadataProcessor(fixedPropPath, metadata, index);
                });
            };
            var this_1 = this;
            for (var propPath in this.propertiesMetadata) {
                _loop_1(propPath);
            }
        }
    };
    BaseWebPart.prototype._validateAndIteratePath = function (propPath, properties,  propertyPathHandler) {
        var wildcardCount = (propPath.match(/\*/g) || []).length;
        if (wildcardCount > 1) {
            console.warn("Invalid property path: Multiple wildcards are not supported in property paths.\nEntry with path '" + propPath + "' got ignored in the properties metadata.");
            return;
        }
        else if (wildcardCount === 1) {
            var index = propPath.indexOf('[*]');
            if (index < -1) {
                console.warn("Invalid property path: Wildcards are only supported inside brackets to select array\nindices as in 'foo[*].bar'. Entry with path '" + propPath + "' got ignored in the properties metadata.");
                return;
            }
            else {
                var arrayPath = propPath.substr(0, index);
                var arrayInstance = sp_lodash_subset_["get"](properties, arrayPath);
                if (!arrayInstance) {
                    console.warn("Invalid property path: Could not find an array named '" + arrayPath + "' in the properties.\nEntry with path '" + propPath + "' got ignored in the properties metadata.");
                    return;
                }
                else {
                    for (var i = 0; i < arrayInstance.length; i++) {
                        var fixedPropPath = propPath.replace('*', "" + i);
                        propertyPathHandler(fixedPropPath, i);
                    }
                }
            }
        }
        else {
            propertyPathHandler(propPath);
        }
    };
    BaseWebPart.prototype._foreachCustomMetadata = function (metadata, iteration, customMetadataProcessor, properties ) {
        if (metadata && metadata.customMetadata) {
            var _loop_2 = function (propName) {
                var propPath = metadata.customMetadata[propName];
                if (iteration !== undefined && propPath.indexOf('*') !== -1) {
                    propPath = propPath.replace('*', iteration.toString());
                }
                this_2._validateAndIteratePath(propPath, properties || this_2.properties, function (fixedPropPath, customIteration) {
                    if (customIteration === undefined && metadata.customMetadata) {
                        customMetadataProcessor(fixedPropPath, propName);
                    }
                });
            };
            var this_2 = this;
            for (var propName in metadata.customMetadata) {
                _loop_2(propName);
            }
        }
    };
    BaseWebPart.prototype._internalDeserialize = function (data) {
        if (data) {
            if (data.title) {
                this._title = data.title;
            }
            if (data.description) {
                this._description = data.description;
            }
            if (typeof data.dataVersion !== 'string') {
                data.dataVersion = '1.0';
            }
            var deserializedData = {
                properties: data.properties,
                serverProcessedContent: data.serverProcessedContent,
                dynamicDataPaths: data.dynamicDataPaths,
                dynamicDataValues: data.dynamicDataValues,
                dataVersion: sp_core_library_["Version"].tryParse(data.dataVersion)
            };
            this._deserializeDynamicData(deserializedData);
            this._initializeDynamicPropertiesIfRequired(deserializedData.properties);
            var deserializedPropsObject = this._reInstateServerProcessedData(deserializedData.properties, deserializedData.serverProcessedContent);
            var fixedProps = this.onAfterDeserialize(deserializedPropsObject, deserializedData.dataVersion);
            this._initPropertiesSnapshot = JSON.stringify(deserializedPropsObject);
            if (!fixedProps) {
                throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.OnAfterDeserializeReturnedNull, this.context.webPartTag);
            }
            this._properties = fixedProps;
        }
    };
    BaseWebPart.prototype._afterPropertyUpdated = function (shouldRefresh) {
        this._internalSetDirtyBit();
        if (shouldRefresh) {
            this._refresh();
        }
    };
    BaseWebPart.prototype._internalSetWebPartData = function (webPartData) {
        this._internalDeserialize(webPartData);
        this._refresh();
    };
    BaseWebPart.prototype._fixUpDynamicDataConfiguration = function (configuration) {
        var _this = this;
        configuration.pages.forEach(function (page) {
            page.groups.forEach(function (group) {
                if ('primaryGroup' in group) {
                    var _a = group, primaryGroup = _a.primaryGroup, secondaryGroup = _a.secondaryGroup, showSecondaryGroup = _a.showSecondaryGroup;
                    group = showSecondaryGroup ? secondaryGroup : primaryGroup;
                }
                group = group;
                group.groupFields.forEach(function (field) {
                    if (field.type === SPPropertyPane_PropertyPaneFieldType.DynamicTextField) {
                        var props = field.properties;
                        props.dynamicDataProvider = _this.context.dynamicDataProvider;
                        props.changeCallback = (function () { _this._dynamicPropertyRefresh(); }).bind(_this);
                    }
                });
            });
        });
    };
    BaseWebPart.prototype._serialize = function () {
        var _this = this;
        var serverProcessedContent = {
            htmlStrings: {},
            searchablePlainTexts: {},
            imageSources: {},
            links: {}
        };
        var properties = this._cloneProperties(this.persistedProperties);
        this._forEachPropertyWithMetaData(function (propPath, metadata, iteration) {
            if (metadata.shouldNotPersist) {
                sp_lodash_subset_["set"](properties, propPath, undefined);
            }
            var key = propPath;
            var value = sp_lodash_subset_["get"](properties, propPath);
            if (serverProcessedContent && typeof value === 'string' && value !== undefined) {
                if (serverProcessedContent.htmlStrings && metadata.isHtmlString) {
                    serverProcessedContent.htmlStrings[key] = value;
                }
                else if (serverProcessedContent.searchablePlainTexts && metadata.isSearchablePlainText) {
                    serverProcessedContent.searchablePlainTexts[key] = value;
                }
                else if (serverProcessedContent.links && metadata.isLink) {
                    serverProcessedContent.links[key] = value;
                }
                else if (serverProcessedContent.imageSources && metadata.isImageSource) {
                    serverProcessedContent.imageSources[key] = value;
                }
                else if (metadata.isComponentDependency) {
                    if (!serverProcessedContent.componentDependencies) {
                        serverProcessedContent.componentDependencies = {};
                    }
                    serverProcessedContent.componentDependencies[key] = value;
                }
                if (metadata.customMetadata) {
                    _this._internalSerializeCustomMetadata(key, metadata, properties, serverProcessedContent, iteration);
                }
                sp_lodash_subset_["set"](properties, propPath, undefined);
            }
        });
        return {
            dataVersion: this.dataVersion,
            properties: properties,
            serverProcessedContent: serverProcessedContent
        };
    };
    BaseWebPart.prototype._internalSerializeCustomMetadata = function (propertyPath, metadata, properties, serverProcessedContent, iteration) {
        var customMetadata = {};
        this._foreachCustomMetadata(metadata, iteration, function (customPropertyPath, customPropertyName) {
            var customValue = sp_lodash_subset_["get"](properties, customPropertyPath);
            if (serverProcessedContent && customValue !== undefined) {
                customMetadata[customPropertyName] = customValue;
            }
        });
        if (!serverProcessedContent.customMetadata) {
            serverProcessedContent.customMetadata = {};
        }
        serverProcessedContent.customMetadata[propertyPath] = customMetadata;
    };
    BaseWebPart.prototype._serializeDynamicData = function (serializedData) {
        var props = serializedData.properties;
        var dynamicDataPaths = {};
        var dynamicDataValues = {}; 
        var key = sp_lodash_subset_["findKey"](props, { __type: sp_component_base_["DynamicProperty"]._TYPE_NAME });
        while (key) {
            var dynamicDataReference = sp_lodash_subset_["get"](props, key + '.reference');
            var dynamicDataValue = sp_lodash_subset_["get"](props, key + '.value');
            if (dynamicDataReference) {
                dynamicDataPaths[key] = dynamicDataReference;
                sp_lodash_subset_["unset"](props, key);
            }
            else if (dynamicDataValue !== undefined) {
                dynamicDataValues[key] = dynamicDataValue;
                sp_lodash_subset_["unset"](props, key);
            }
            else {
                throw new Error('Dynamic Data is misconfigured');
            }
            key = sp_lodash_subset_["findKey"](props, { __type: sp_component_base_["DynamicProperty"]._TYPE_NAME });
        }
        serializedData.dynamicDataPaths = dynamicDataPaths;
        serializedData.dynamicDataValues = dynamicDataValues;
    };
    BaseWebPart.prototype._deserializeDynamicData = function (data) {
        var _this = this;
        if (data.dynamicDataPaths) {
            for (var path in data.dynamicDataPaths) {
                if (data.dynamicDataPaths.hasOwnProperty(path)) {
                    var dynamicProperty = new sp_component_base_["DynamicProperty"](
                    this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(this));
                    dynamicProperty.setReference(data.dynamicDataPaths[path]);
                    sp_lodash_subset_["set"](data.properties, path, dynamicProperty);
                }
            }
        }
        if (data.dynamicDataValues) {
            for (var path in data.dynamicDataValues) {
                if (data.dynamicDataValues.hasOwnProperty(path)) {
                    var dynamicProperty = new sp_component_base_["DynamicProperty"](
                    this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(this));
                    dynamicProperty.setValue(data.dynamicDataValues[path]);
                    sp_lodash_subset_["set"](data.properties, path, dynamicProperty);
                }
            }
        }
    };
    BaseWebPart.prototype._initializeDynamicPropertiesIfRequired = function (deSerializedProperties) {
        var _this = this;
        this._forEachPropertyWithMetaData(function (propPath, metadata) {
            if (metadata.dynamicPropertyType) {
                var propValue = sp_lodash_subset_["get"](deSerializedProperties, propPath); 
                if (!(propValue instanceof sp_component_base_["DynamicProperty"])) {
                    var dynamicProperty = void 0; 
                    switch (metadata.dynamicPropertyType) {
                        case 'boolean':
                            dynamicProperty = new sp_component_base_["DynamicProperty"](_this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(_this));
                            break;
                        case 'number':
                            dynamicProperty = new sp_component_base_["DynamicProperty"](_this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(_this));
                            break;
                        case 'string':
                            dynamicProperty = new sp_component_base_["DynamicProperty"](_this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(_this));
                            break;
                        case 'array':
                            dynamicProperty = new sp_component_base_["DynamicProperty"](_this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(_this));
                            break;
                        case 'object':
                            dynamicProperty = new sp_component_base_["DynamicProperty"](_this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(_this));
                            break;
                        default:
                            dynamicProperty = new sp_component_base_["DynamicProperty"]( _this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(_this));
                            break;
                    }
                    dynamicProperty.setValue(propValue);
                    sp_lodash_subset_["set"](deSerializedProperties, propPath, dynamicProperty);
                }
            }
        }, deSerializedProperties);
    };
    BaseWebPart.prototype._disposeDynamicPropertiesIfRequired = function () {
        var _this = this;
        this._forEachPropertyWithMetaData(function (propPath, metadata) {
            if (metadata.dynamicPropertyType) {
                var propValue = sp_lodash_subset_["get"](_this.persistedProperties, propPath); 
                if (propValue instanceof sp_component_base_["DynamicProperty"]) {
                    propValue.dispose();
                }
            }
        }, this.persistedProperties);
    };
    BaseWebPart.prototype._updateProperty = function (propertyPath, newValue) {
        sp_lodash_subset_["update"](this.properties, propertyPath, function () { return newValue; });
    };
    BaseWebPart.prototype._cloneProperties = function (propertiesToClone) {
        return sp_lodash_subset_["cloneDeepWith"](propertiesToClone, function (prop) {
            if (prop instanceof sp_component_base_["DynamicProperty"]) {
                return prop._cloneDeep(prop); 
            }
        });
    };
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "propertiesMetadata", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "disableReactivePropertyChanges", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "previewImageUrl", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "accessibleTitle", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onInit", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onDisplayModeChanged", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onBeforeSerialize", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onAfterDeserialize", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "loadPropertyPaneResources", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "getPropertyPaneConfiguration", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onDispose", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onPropertyPaneFieldChanged", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onPropertyPaneConfigurationStart", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onPropertyPaneConfigurationComplete", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onAfterPropertyPaneChangesApplied", null);
    __decorate([
        decorators_["virtual"]
    ], BaseWebPart.prototype, "onPropertyPaneRendered", null);
    return BaseWebPart;
}(sp_component_base_["BaseComponent"]));
/* harmony default export */ var core_BaseWebPart = (BaseWebPart_BaseWebPart);

// EXTERNAL MODULE: external "@ms/sp-telemetry"
var sp_telemetry_ = __webpack_require__(4);
var sp_telemetry__default = /*#__PURE__*/__webpack_require__.n(sp_telemetry_);

// CONCATENATED MODULE: ./lib/core/classicPages/ClassicPageUtils.js


var ClassicPageUtils_ClassicPageUtils =  (function () {
    function ClassicPageUtils() {
    }
    ClassicPageUtils.disableAutomaticPostbacks = function (domElement, env) {
        sp_core_library_["Validate"].isNotNullOrUndefined(domElement, 'domElement');
        if (env === sp_core_library_["EnvironmentType"].ClassicSharePoint) {
            domElement.addEventListener('click', function (event) {
                event.preventDefault ? event.preventDefault() : (event.returnValue = false);
            }, true );
            domElement.addEventListener('keydown', function (event) {
                if (event.keyCode === 13) {
                    event.preventDefault ? event.preventDefault() : (event.returnValue = false);
                }
            }, true );
        }
    };
    ClassicPageUtils.removeFabricLinks = function () {
        var links = document.getElementsByTagName('link');
        if (links && links.length) {
            for (var i = 0; i < links.length; i++) {
                if (links[i] && links[i].href.indexOf('fabric.min.css') !== -1) {
                    var parentNode = links[i].parentNode;
                    if (parentNode) {
                        parentNode.removeChild(links[i]);
                    }
                }
            }
        }
    };
    return ClassicPageUtils;
}());
/* harmony default export */ var classicPages_ClassicPageUtils = (ClassicPageUtils_ClassicPageUtils);

// CONCATENATED MODULE: ./lib/core/WebPartMetrics.js
var WebPartMetrics =  (function () {
    function WebPartMetrics() {
    }
    WebPartMetrics.webParts = 'WebParts';
    WebPartMetrics.webPartsCountedInViewport = 'WebPartsCountedInViewport';
    WebPartMetrics.webPartsLoadedNotInViewport = 'WebPartsLoadedNotInViewport';
    WebPartMetrics.webPartsLoadedForViewport = 'WebPartsLoadedForViewport';
    WebPartMetrics.webPartsLoadedByScroll = 'WebPartsLoadedByScroll';
    WebPartMetrics.webPartsLoadedBeforeScroll = 'WebPartsLoadedBeforeScroll';
    return WebPartMetrics;
}());
/* harmony default export */ var core_WebPartMetrics = (WebPartMetrics);

// CONCATENATED MODULE: ./lib/core/ViewportLoader.js






var WebPartLoadSource;
(function (WebPartLoadSource) {
    WebPartLoadSource[WebPartLoadSource["viewport"] = 1] = "viewport";
    WebPartLoadSource[WebPartLoadSource["scroll"] = 2] = "scroll";
    WebPartLoadSource[WebPartLoadSource["loadOutsideViewport"] = 3] = "loadOutsideViewport";
})(WebPartLoadSource || (WebPartLoadSource = {}));
var ViewportLoader_ViewportLoader =  (function () {
    function ViewportLoader() {
        this._webparts = new Set();
        this._lazyLoadedTrackerAttribute = 'data-sp-webpart-lazycount';
        this.SCROLL = 'scroll';
        this.RESIZE = 'resize';
        this._isInitialized = false;
        this._logSource = sp_diagnostics_["_LogSource"].create('ViewportLoader');
        this._isListeningWindow = false;
        this._offsetWebpartsToLoad = [];
        this._bind();
    }
    Object.defineProperty(ViewportLoader, "instance", {
        get: function () {
            if (ViewportLoader._instance === undefined) {
                ViewportLoader._instance = new ViewportLoader();
            }
            return ViewportLoader._instance;
        },
        enumerable: true,
        configurable: true
    });
    ViewportLoader.isInIntialViewport = function (webpart) {
        sp_core_library_["Validate"].isNotNullOrUndefined(webpart, 'webpart');
        var viewportHeight = window.innerHeight || document.documentElement.clientHeight;
        var top = webpart.domElement && webpart.domElement.getBoundingClientRect().top;
        var euplViewportOffset = Math.floor(viewportHeight * 0.1);
        if ((window.pageYOffset + top) < (viewportHeight - euplViewportOffset)) {
            return true;
        }
        return false;
    };
    ViewportLoader.prototype.register = function (webpart, scrollableParent) {
        var _this = this;
        sp_core_library_["Validate"].isNotNullOrUndefined(webpart, 'webpart');
        webpart._internalIsInViewport = false;
        if (!this._isInitialized) {
            this._initialize();
        }
        this._checkVisibilityAndRender(webpart, WebPartLoadSource.viewport);
        if (webpart._internalIsInViewport) {
            return;
        }
        var parents = scrollableParent ? [scrollableParent] : this._findScrollableParents(webpart.domElement);
        parents.forEach(function (parent, index, allPatents) {
            var count = _this._updateRegisteredChildren(parent, 1);
            if (count === 1) {
                _this._listenEvents(parent);
            }
        });
        this._listenEvents(window);
        this._webparts.add(webpart);
        if (!!this._noMoreLazy) {
            sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, 'Web part to load after no more lazy state');
            this._noMoreLazy = false;
            this._loadOutsideViewPort();
        }
    };
    ViewportLoader.prototype.unregister = function (webpart) {
        var _this = this;
        sp_core_library_["Validate"].isNotNullOrUndefined(webpart, 'unregister Web part');
        if (!this._webparts.has(webpart)) {
            return;
        }
        this._webparts.delete(webpart);
        var parents = this._findScrollableParents(webpart.domElement);
        parents.forEach(function (parent, index, allParents) {
            var count = _this._updateRegisteredChildren(parent, -1);
            if (count <= 0) {
                _this._unlistenEvents(parent);
            }
        });
        if (this._webparts.size === 0 && !!this._noMoreLazy) {
            this._unlistenEvents(window);
            this._dispose();
        }
    };
    ViewportLoader.prototype.loadOutsideViewPort = function () {
        sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, "loadOutsideViewPort is called to load rest of the " + this._webparts.size + " web parts");
        this._loadOutsideViewPort();
        sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, "loadOutsideViewPort is completed");
    };
    ViewportLoader.prototype._bind = function () {
        this.register = this.register.bind(this);
        this.unregister = this.unregister.bind(this);
        this._checkVisibilityAndRender = this._checkVisibilityAndRender.bind(this);
        this._dispose = this._dispose.bind(this);
        this._findScrollableParent = this._findScrollableParent.bind(this);
        this._findScrollableParents = this._findScrollableParents.bind(this);
        this._initialize = this._initialize.bind(this);
        this._isCloseToViewport = this._isCloseToViewport.bind(this);
        this._renderWebpartInViewport = this._renderWebpartInViewport.bind(this);
        this._unlistenEvents = this._unlistenEvents.bind(this);
        this._updateRegisteredChildren = this._updateRegisteredChildren.bind(this);
        this._loadOutsideViewPort = this._loadOutsideViewPort.bind(this);
    };
    ViewportLoader.prototype._lazyLoaderEventHandler = function () {
        this._loadWebPartsInViewport(WebPartLoadSource.scroll);
    };
    ViewportLoader.prototype._loadWebPartsInViewport = function (loadSource) {
        var _this = this;
        if (!this._webparts || this._webparts.size === 0) {
            sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, Strings_resx.LazyEventOnNoLazyWebpart, 'InViewportHandler');
            return;
        }
        this._webparts.forEach(function (value, index, theSet) {
            _this._checkVisibilityAndRender(value, loadSource);
        });
    };
    ViewportLoader.prototype._checkVisibilityAndRender = function (webPart, loadSource) {
        if (webPart._internalIsInViewport) {
            this.unregister(webPart);
            return;
        }
        if (this._isCloseToViewport(webPart.domElement)) {
            this._renderWebpartInViewport(webPart, loadSource);
            this.unregister(webPart);
        }
    };
    ViewportLoader.prototype._isCloseToViewport = function (webpartNode) {
        try {
            var parent_1 = this._findScrollableParent(webpartNode);
            var _a = webpartNode.getBoundingClientRect(), top_1 = _a.top, height = _a.height;
            var documentHeight = window.innerHeight || document.documentElement.clientHeight;
            if (!parent_1) {
                var topInOrAboveViewport = (top_1 - this._offset) <= documentHeight;
                var bottomNotAboveViewport = (top_1 + height + this._offset) >= 0;
                return topInOrAboveViewport && bottomNotAboveViewport;
            }
            var _b = parent_1.getBoundingClientRect(), parentTop = _b.top, parentHeight = _b.height;
            var parentIntersectionTop = Math.max(0, parentTop);
            var parentIntersectionHeight = Math.min(parentTop + parentHeight, documentHeight) - parentIntersectionTop;
            var offsetTop = top_1 - parentIntersectionTop;
            var parentTopInOrAboveViewport = (offsetTop - this._offset) <= parentIntersectionHeight;
            var parentBottomNotAboveViewport = (offsetTop + height + this._offset) >= 0;
            return parentTopInOrAboveViewport && parentBottomNotAboveViewport;
        }
        catch (error) {
            sp_diagnostics_["_TraceLogger"].logError(this._logSource, error);
            return true;
        }
    };
    ViewportLoader.prototype._findScrollableParents = function (startingElement) {
        var parents = [];
        var parent = startingElement;
        while (parent) {
            parent = this._findScrollableParent(parent);
            if (parent) {
                parents.push(parent);
                parent = parent.parentElement;
            }
        }
        return parents;
    };
    ViewportLoader.prototype._findScrollableParent = function (startingElement) {
        var DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';
        var el = startingElement;
        var body = document.body;
        while (el && el !== body) {
            if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {
                return el;
            }
            el = el.parentElement;
        }
        el = startingElement;
        while (el && el !== body) {
            if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== 'false') {
                var styles = getComputedStyle(el);
                if (styles) {
                    var overflowY = styles.getPropertyValue('overflow-y');
                    if (overflowY && (overflowY === this.SCROLL || overflowY === 'auto')) {
                        return el;
                    }
                }
            }
            el = el.parentElement;
        }
        if (!el || el === body) {
            el = undefined;
        }
        return el;
    };
    ViewportLoader.prototype._initialize = function () {
        this._offset = 0;
        this._initTime = new Date();
        this._lazyHandler = sp_lodash_subset_["throttle"](this._lazyLoaderEventHandler, 100).bind(this);
        sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, 'ViewportLoader is Initialized');
        this._isInitialized = true;
    };
    ViewportLoader.prototype._dispose = function () {
        sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, 'ViewportLoader is disposed');
        var timeSpent = (new Date()).getTime() - this._initTime.getTime();
        sp_diagnostics_["_EngagementLogger"].logEvent('Webpart.ViewportLoad.Completed', timeSpent.toString());
        this._isInitialized = false;
        this._initTime = undefined;
    };
    ViewportLoader.prototype._listenEvents = function (parent) {
        if (!parent) {
            return;
        }
        var isWindow = parent === window;
        if (!isWindow || (isWindow && !this._isListeningWindow)) {
            this._addEventListerer(parent);
            if (isWindow) {
                this._isListeningWindow = true;
            }
        }
    };
    ViewportLoader.prototype._addEventListerer = function (element) {
        element.addEventListener(this.SCROLL, this._lazyHandler, false);
        element.addEventListener(this.RESIZE, this._lazyHandler, false);
    };
    ViewportLoader.prototype._unlistenEvents = function (parent) {
        if (!parent) {
            return;
        }
        var isWindow = parent === window;
        if (!isWindow || (isWindow && this._isListeningWindow)) {
            this._removeEventListener(parent);
            if (isWindow) {
                this._isListeningWindow = false;
            }
        }
    };
    ViewportLoader.prototype._removeEventListener = function (element) {
        element.removeEventListener(this.SCROLL, this._lazyHandler);
        element.removeEventListener(this.RESIZE, this._lazyHandler);
    };
    ViewportLoader.prototype._updateRegisteredChildren = function (element, count) {
        var lazyChilds = count + Number(element.getAttribute(this._lazyLoadedTrackerAttribute));
        if (count !== 0) {
            element.setAttribute(this._lazyLoadedTrackerAttribute, lazyChilds.toString());
        }
        return lazyChilds;
    };
    ViewportLoader.prototype._renderWebpartInViewport = function (webpart, loadSource) {
        if (webpart && !webpart._internalIsInViewport) {
            webpart._internalRenderInViewPort();
            switch (loadSource) {
                case WebPartLoadSource.viewport:
                    webpart._internalIsInViewport = true;
                    sp_telemetry_["_PageMetricsLogger"].recordMetric(core_WebPartMetrics.webPartsLoadedForViewport);
                    sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, 'Web part is loaded in initial viewport.');
                    break;
                case WebPartLoadSource.scroll:
                    sp_telemetry_["_PageMetricsLogger"].recordMetric(core_WebPartMetrics.webPartsLoadedByScroll);
                    break;
                case WebPartLoadSource.loadOutsideViewport:
                    sp_telemetry_["_PageMetricsLogger"].recordMetric(core_WebPartMetrics.webPartsLoadedBeforeScroll);
                    break;
            }
        }
    };
    ViewportLoader.prototype._loadOutsideViewPort = function () {
        var _this = this;
        if (!this._webparts || this._webparts.size === 0) {
            this._noMoreLazy = true;
            return;
        }
        for (var index = 0; this._offsetWebpartsToLoad && index < this._offsetWebpartsToLoad.length; index++) {
            if (!this._offsetWebpartsToLoad[index]._renderedOnce) {
                window.setTimeout(this._loadOutsideViewPort, 100);
                return;
            }
        }
        this._offsetWebpartsToLoad = [];
        var documentHeight = window.innerHeight || document.documentElement.clientHeight;
        this._offset = this._offset + documentHeight * 2;
        this._webparts.forEach(function (webpart, index, theSet) {
            if (_this._isCloseToViewport(webpart.domElement)) {
                _this._offsetWebpartsToLoad.push(webpart);
            }
        });
        this._loadWebPartsInViewport(WebPartLoadSource.loadOutsideViewport);
        if (this._webparts.size > 0) {
            this._loadOutsideViewPort();
        }
        else {
            this._noMoreLazy = true;
        }
    };
    return ViewportLoader;
}());
/* harmony default export */ var core_ViewportLoader = (ViewportLoader_ViewportLoader);

// CONCATENATED MODULE: ./lib/core/styles/cswp-base.module.scss.js
__webpack_require__(11);
var styles = {
    errorBox: 'errorBox_ceffbba5',
    errorBoxText: 'errorBoxText_ceffbba5',
    detailsButton: 'detailsButton_ceffbba5',
    somethingWentWrongText: 'somethingWentWrongText_ceffbba5',
    siteAdminText: 'siteAdminText_ceffbba5',
    screenReaderOnly: 'screenReaderOnly_ceffbba5',
};
/* harmony default export */ var cswp_base_module_scss = (styles);

// CONCATENATED MODULE: ./lib/core/BaseClientSideWebPart.js












var BaseClientSideWebPart_BaseClientSideWebPart =  (function (_super) {
    __extends(BaseClientSideWebPart, _super);
    function BaseClientSideWebPart() {
        var _this = _super.call(this) || this;
        _this._logSource = sp_diagnostics_["_LogSource"].create('BaseClientSideWebPart');
        _this._internalIsInViewport = false;
        _this._asyncRenderQosMonitor = new sp_diagnostics_["_QosMonitor"]("WebPartAsyncRender");
        if (_this.constructor['name'] === 'BaseClientSideWebPart') { 
            throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.BaseConstructError);
        }
        _this._firstTimeRenderPromises = [];
        return _this;
    }
    Object.defineProperty(BaseClientSideWebPart.prototype, "domElement", {
        get: function () { return this.context.domElement; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "width", {
        get: function () {
            if (this._width === undefined) {
                var width = window.getComputedStyle(this.domElement).width;
                this._width = width ? parseFloat(width) : 0;
            }
            return this._width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedOnce", {
        get: function () { return this._renderedOnce; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedFromPersistedData", {
        get: function () { return this._renderedFromPersistedData; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "canOpenPopupOnRender", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "isRenderAsync", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    BaseClientSideWebPart.prototype._internalOnAfterResize = function () {
        this._width = undefined;
        this.onAfterResize(this.width);
    };
    BaseClientSideWebPart.prototype._calculateMinimumHeight = function () {
        if (this.context && this.context.manifest && this.context.manifest.isInternal) {
            sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, "Web part " + this.context.webPartTag + " should override _calculateMinimumHeight()");
        }
        return undefined;
    };
    BaseClientSideWebPart.prototype.renderCompleted = function () {
        this._renderCompleted();
    };
    BaseClientSideWebPart.prototype.onDisplayModeChanged = function (oldDisplayMode) {
        var _this = this;
        _super.prototype.onDisplayModeChanged.call(this, oldDisplayMode);
        if (oldDisplayMode === this.displayMode) {
            return;
        }
        if (!sp_core_library_["_SPKillSwitch"].isActivated(sp_core_library_["Guid"].parse('222961df-4439-412b-9e41-2e659ae18ab6'), '5/11/2018', 'FirstRenderPromises')) {
            Promise.all(this._firstTimeRenderPromises).then(function () { _this._renderWithAccessibleTitle(); });
        }
        else {
            this._renderWithAccessibleTitle();
        }
    };
    BaseClientSideWebPart.prototype.onDispose = function () {
        if (!this.context.host.isViewportLoadingDisabled && !this._internalIsInViewport) {
            core_ViewportLoader.instance.unregister(this);
        }
    };
    BaseClientSideWebPart.prototype.onAfterResize = function (newWidth) {
    };
    BaseClientSideWebPart.prototype.renderError = function (error) {
        this.context.statusRenderer.clearLoadingIndicator(this.domElement);
        this.context.statusRenderer.renderError(this.domElement, error);
        sp_diagnostics_["_TraceLogger"].logError(this._logSource, error);
    };
    BaseClientSideWebPart.prototype.clearError = function () {
        this.context.statusRenderer.clearError(this.domElement);
    };
    BaseClientSideWebPart.prototype._refresh = function () {
        this._renderWithAccessibleTitle();
    };
    BaseClientSideWebPart.prototype._dynamicPropertyRefresh = function () {
        if (this.renderedOnce) {
            this.render();
        }
    };
    BaseClientSideWebPart.prototype._internalSetDisplayMode = function (newDisplayMode) {
        if (this.displayMode !== newDisplayMode) {
            this._width = undefined;
        }
        _super.prototype._internalSetDisplayMode.call(this, newDisplayMode);
    };
    BaseClientSideWebPart.prototype._internalInitialize = function (webPartContext, addedFromPersistedData, mode) {
        _super.prototype._internalInitialize.call(this, webPartContext, addedFromPersistedData, mode);
        this._renderedOnce = false;
        this['__type'] = 'BaseClientSideWebPart'; 
        this.render = this.render.bind(this);
        this.onDispose = this.onDispose.bind(this);
        this.renderError = this.renderError.bind(this);
        this.clearError = this.clearError.bind(this);
        this.renderCompleted = this.renderCompleted.bind(this);
    };
    BaseClientSideWebPart.prototype._internalFirstTimeRender = function (scrollableParent, qosMonitor) {
        var _this = this;
        if (this._renderPromiseResolver) {
            throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.FirstTimeRenderCalledMoreThanOnce, this.context.webPartTag);
        }
        sp_diagnostics_["_TraceLogger"].logVerboseData({
            source: this._logSource,
            message: sp_core_library_["Text"].format(Strings_resx.StartedFirstTimeRender, this.context.webPartTag),
            serviceScope: this.context.serviceScope
        });
        return new Promise(function (resolve, reject) {
            if (!_this.properties && qosMonitor) {
                qosMonitor.writeUnexpectedFailure('PropertyBagNull');
                throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.PropertyBagNull, _this.context.webPartTag);
            }
            var minHeight = _this._calculateMinimumHeight();
            if (minHeight) {
                _this.domElement.style.minHeight = minHeight + "px";
            }
            _this._renderPromiseResolver = resolve;
            _this._renderPromiseRejecter = reject;
            if (!_this.context.host.isViewportLoadingDisabled) {
                sp_telemetry_["_PerformanceLogger"].markComponent(_this.context.webPartTag, 'loadingDelayed');
                _this._internalDelayedRender(scrollableParent);
            }
            else {
                _this._internalRenderInViewPort();
            }
        });
    };
    BaseClientSideWebPart.prototype._internalDelayedRender = function (scrollableParent) {
        core_ViewportLoader.instance.register(this, scrollableParent);
        if (!this._internalIsInViewport) {
            sp_diagnostics_["_TraceLogger"].logVerboseData({
                source: this._logSource,
                message: "Web part " + this.context.webPartTag + " is not in initial viewport, rendering delayed.",
                serviceScope: this.context.serviceScope
            });
        }
    };
    BaseClientSideWebPart.prototype._internalRenderInViewPort = function () {
        var _this = this;
        if (!this.context.host.isViewportLoadingDisabled) {
            sp_telemetry_["_PerformanceLogger"].markComponent(this.context.webPartTag, 'inViewportLoading');
            sp_diagnostics_["_TraceLogger"].logVerboseData({
                source: this._logSource,
                message: "Actually started first time render for web part " + this.context.webPartTag + ".",
                serviceScope: this.context.serviceScope
            });
        }
        if (!this._renderPromiseResolver || !this._renderPromiseRejecter) {
            throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.RenderPromiseUndefined, this.context.webPartTag);
        }
        var initPromise = this.onInit();
        if (!initPromise) {
            var error = SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.OnInitReturnedNullPromise, this.context.webPartTag);
            this._renderPromiseRejecter(error);
            this._clearRenderPromises();
            return;
        }
        this._firstTimeRenderPromises.push(initPromise);
        initPromise
            .then(function () { return _this._yieldToEventLoop(); })
            .then(function () {
            sp_diagnostics_["_TraceLogger"].logVerboseData({
                source: _this._logSource,
                message: sp_core_library_["Text"].format(Strings_resx.OnInitCompleted, _this.context.webPartTag),
                serviceScope: _this.context.serviceScope
            });
            sp_telemetry_["_PerformanceLogger"].markComponent(_this.context.webPartTag, 'init');
            var getDataPromise = Promise.resolve();
            getDataPromise = _this._internalGetData();
            if (!getDataPromise) {
                throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.GetDataReturnedNullPromise, _this.context.webPartTag);
            }
            _this._firstTimeRenderPromises.push(getDataPromise);
            getDataPromise
                .then(function () { return _this._yieldToEventLoop(); })
                .then(function () {
                sp_telemetry_["_PerformanceLogger"].markComponent(_this.context.webPartTag, 'getDataComplete');
                _this.context.statusRenderer.clearLoadingIndicator(_this.domElement);
                _this._renderWithAccessibleTitle();
                sp_telemetry_["_PerformanceLogger"].markComponent(_this.context.webPartTag, 'syncRender');
                if (!_this.isRenderAsync) {
                    _this._tryToLogLoadRenderDone();
                    _this._resolveOnRenderPromise();
                }
                else {
                    _this._startAsyncRenderGuardTimer();
                }
            });
        }).catch(function (e) {
            if (_this._renderPromiseRejecter) {
                _this._renderPromiseRejecter(e);
                _this._clearRenderPromises();
            }
        });
    };
    BaseClientSideWebPart.prototype._renderWithAccessibleTitle = function () {
        sp_telemetry_["_PerformanceLogger"].devMark("webpart(" + this.context.webPartTag + ")._renderWithAccessibleTitle");
        this.render();
        if (this.displayMode === sp_core_library_["DisplayMode"].Edit) {
            var accessibleContext = this.accessibleTitle || this._getDefaultAccessibleTitle();
            if (accessibleContext) {
                var contextualLabelId = "cswpAccessibleLabelContextual_" + this.context.instanceId;
                var accessibleDiv = this.domElement.querySelector("#" + contextualLabelId);
                var isNewLabelElement = !accessibleDiv;
                if (isNewLabelElement) {
                    accessibleDiv = document.createElement('div');
                    accessibleDiv.id = contextualLabelId;
                    accessibleDiv.className = cswp_base_module_scss.screenReaderOnly;
                    accessibleDiv.setAttribute('aria-hidden', 'true');
                }
                accessibleDiv.textContent = accessibleContext;
                if (isNewLabelElement) {
                    this.domElement.appendChild(accessibleDiv);
                }
            }
            classicPages_ClassicPageUtils.disableAutomaticPostbacks(this.domElement, sp_core_library_["Environment"].type);
        }
        this.domElement.style.minHeight = null; 
    };
    BaseClientSideWebPart.prototype._startAsyncRenderGuardTimer = function () {
        var _this = this;
        this._clearAsyncRenderGuardTimer();
        this._asyncRenderGuardTimer = window.setTimeout(function () {
            _this._asyncRenderTimeout();
        }, 25000);
    };
    BaseClientSideWebPart.prototype._renderCompleted = function () {
        if (this._asyncRenderGuardTimer) {
            this._tryToLogLoadRenderDone();
            this._clearAsyncRenderGuardTimer();
            this._asyncRenderQosMonitor.writeSuccess({
                'alias': this.context.manifest.alias,
                'webPartId': this.context.manifest.id
            });
            this._resolveOnRenderPromise();
        }
    };
    BaseClientSideWebPart.prototype._asyncRenderTimeout = function () {
        if (this._asyncRenderGuardTimer) {
            this._clearAsyncRenderGuardTimer();
            var error = SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.RenderCompletedCallNotCalled, this.context.webPartTag);
            sp_diagnostics_["_TraceLogger"].logErrorData({
                source: this._logSource,
                error: error,
                serviceScope: this.context.serviceScope
            });
            this._asyncRenderQosMonitor.writeUnexpectedFailure('Timeout', error, {
                'alias': this.context.manifest.alias,
                'webPartId': this.context.manifest.id,
                'instanceId': this.instanceId
            });
            this._resolveOnRenderPromise();
        }
    };
    BaseClientSideWebPart.prototype._clearAsyncRenderGuardTimer = function () {
        if (this._asyncRenderGuardTimer) {
            window.clearTimeout(this._asyncRenderGuardTimer);
            this._asyncRenderGuardTimer = undefined;
        }
    };
    BaseClientSideWebPart.prototype._resolveOnRenderPromise = function () {
        this._renderedOnce = true;
        var message = sp_core_library_["Text"].format(this.isRenderAsync ? Strings_resx.CompletedAsyncRender : Strings_resx.CompletedSyncRender, this.context.webPartTag);
        sp_diagnostics_["_TraceLogger"].logVerboseData({
            source: this._logSource,
            message: message,
            serviceScope: this.context.serviceScope
        });
        sp_telemetry_["_PerformanceLogger"].devMark("webpart(" + this.context.webPartTag + ").complete");
        if (this._renderPromiseResolver) {
            this._renderPromiseResolver();
        }
        this._clearRenderPromises();
    };
    BaseClientSideWebPart.prototype._clearRenderPromises = function () {
        this._renderPromiseResolver = undefined;
        this._renderPromiseRejecter = undefined;
        this.domElement.style.minHeight = null; 
    };
    BaseClientSideWebPart.prototype._tryToLogLoadRenderDone = function () {
        if (!common_KillSwitches.isLogWebPartLoadRenderDoneKillSwitchActivated() && !this._renderedOnce) {
            var logEntry = new sp_diagnostics_["_LogEntry"]('BaseClientSideWebPart', 'RenderDone', sp_diagnostics_["_LogType"].Event, {
                alias: "WebPart." + this.manifest.alias + "." + this.manifest.id,
                isInternal: (!!this.manifest.isInternal).toString(),
                displayMode: String(this.displayMode),
                isFirstRender: (!this._renderedFromPersistedData).toString(),
                isAsyncRender: this.isRenderAsync.toString()
            });
            sp_diagnostics_["_EngagementLogger"].logEventWithLogEntry(logEntry);
        }
    };
    BaseClientSideWebPart.prototype._isSPDPaintStarvationFixKillSwitchActivated = function () {
        return sp_core_library_["_SPKillSwitch"].isActivated(sp_core_library_["Guid"].parse('c63a9c71-8035-47c6-b57b-09d203db6b6a'), '01/24/2019', 'Fix paint starvation problem for SPD App');
    };
    BaseClientSideWebPart.prototype._yieldToEventLoop = function (arg) {
        if (!this._isSPDPaintStarvationFixKillSwitchActivated() &&
            navigator.userAgent.indexOf('SharePointDesktop') !== -1) {
            sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, 'yielding execution to event loop');
            return new Promise(function (resolve) { return setTimeout(function () { return resolve(arg); }, 0); });
        }
        else {
            return Promise.resolve(arg);
        }
    };
    return BaseClientSideWebPart;
}(core_BaseWebPart));
/* harmony default export */ var core_BaseClientSideWebPart = (BaseClientSideWebPart_BaseClientSideWebPart);

// EXTERNAL MODULE: external "@ms/sp-load-themed-styles"
var sp_load_themed_styles_ = __webpack_require__(13);
var sp_load_themed_styles__default = /*#__PURE__*/__webpack_require__.n(sp_load_themed_styles_);

// EXTERNAL MODULE: external "@microsoft/sp-loader"
var sp_loader_ = __webpack_require__(6);
var sp_loader__default = /*#__PURE__*/__webpack_require__.n(sp_loader_);

// EXTERNAL MODULE: external "@microsoft/sp-http"
var sp_http_ = __webpack_require__(14);
var sp_http__default = /*#__PURE__*/__webpack_require__.n(sp_http_);

// EXTERNAL MODULE: external "@microsoft/sp-page-context"
var sp_page_context_ = __webpack_require__(15);
var sp_page_context__default = /*#__PURE__*/__webpack_require__.n(sp_page_context_);

// CONCATENATED MODULE: ./lib/core/ErrorMessage.js

var ErrorMessage_ErrorMessage =  (function () {
    function ErrorMessage(props) {
        this._props = props;
    }
    ErrorMessage.prototype.render = function () {
        var container = document.createElement('div');
        container.className = cswp_base_module_scss.errorBox;
        container.setAttribute('role', 'alert');
        container.setAttribute('aria-live', 'assertive');
        var errorMessage = document.createElement('span');
        errorMessage.className = cswp_base_module_scss.errorBoxText;
        errorMessage.innerText = this._props.errorMessage;
        container.appendChild(errorMessage);
        return container;
    };
    return ErrorMessage;
}());
/* harmony default export */ var core_ErrorMessage = (ErrorMessage_ErrorMessage);

// CONCATENATED MODULE: ./lib/core/FriendlyErrorMessage.js



var FriendlyErrorMessage_FriendlyErrorMessage =  (function () {
    function FriendlyErrorMessage(props) {
        this._toggleExpandedDetails = this._toggleExpandedDetails.bind(this);
        this._errorMessage = new core_ErrorMessage(props).render();
        this._errorMessage.style.display = 'none';
    }
    FriendlyErrorMessage.prototype.render = function () {
        var container = document.createElement('div');
        container.className = cswp_base_module_scss.errorBox;
        var headerContainer = document.createElement('div');
        var header = document.createElement('h2');
        header.className = cswp_base_module_scss.somethingWentWrongText;
        header.innerText = Strings_resx.WebpartErrorSomethingWentWrong;
        headerContainer.appendChild(header);
        container.appendChild(header);
        var siteAdminText = document.createElement('span');
        siteAdminText.className = cswp_base_module_scss.siteAdminText;
        siteAdminText.innerText = Strings_resx.WebpartErrorSiteAdminAdvice;
        container.appendChild(siteAdminText);
        var buttonContainer = document.createElement('div');
        var techDetailsButton = document.createElement('button');
        techDetailsButton.className = cswp_base_module_scss.detailsButton;
        techDetailsButton.innerText = Strings_resx.WebpartErrorTechnicalDetails;
        techDetailsButton.onclick = this._toggleExpandedDetails;
        buttonContainer.appendChild(techDetailsButton);
        container.appendChild(buttonContainer);
        container.appendChild(this._errorMessage);
        return container;
    };
    FriendlyErrorMessage.prototype._toggleExpandedDetails = function () {
        if (this._errorMessage.style.display === 'none') {
            this._errorMessage.style.display = '';
        }
        else {
            this._errorMessage.style.display = 'none';
        }
    };
    return FriendlyErrorMessage;
}());
/* harmony default export */ var core_FriendlyErrorMessage = (FriendlyErrorMessage_FriendlyErrorMessage);

// CONCATENATED MODULE: ./lib/core/styles/spinner.module.scss.js
__webpack_require__(16);
var spinner_module_scss_styles = {
    spinnerContainer: 'spinnerContainer_f8aa9bb4',
    spinner: 'spinner_f8aa9bb4',
    spinnerRing: 'spinnerRing_f8aa9bb4',
    spinnerSlice: 'spinnerSlice_f8aa9bb4',
    spin: 'spin_f8aa9bb4',
    spinnerLoadingMessage: 'spinnerLoadingMessage_f8aa9bb4',
    spinnerAccessibilityMessage: 'spinnerAccessibilityMessage_f8aa9bb4',
};
/* harmony default export */ var spinner_module_scss = (spinner_module_scss_styles);

// CONCATENATED MODULE: ./lib/core/SpinnerFactory.js

var SpinnerFactory_SpinnerFactory =  (function () {
    function SpinnerFactory() {
    }
    SpinnerFactory.createSpinner = function (loadingMessage) {
        var spinnerContainerDiv = document.createElement('div');
        spinnerContainerDiv.className = spinner_module_scss.spinnerContainer;
        var spinnerDiv = document.createElement('div');
        spinnerDiv.className = spinner_module_scss.spinner;
        spinnerDiv.innerHTML = "<svg class=" + spinner_module_scss.spinnerSlice + " xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 21 21\">\n      <defs>\n        <style>\n          .slice {\n            fill: none;\n            stroke: currentColor;\n            stroke-miterlimit:10;\n            stroke-width:2px;\n          }\n        </style>\n      </defs>\n      <path class=\"slice\" d=\"M17.5,6.5a10,10,0,0,1,10,10\" transform=\"translate(-7 -6)\"/>\n    </svg>\n    <svg class=" + spinner_module_scss.spinnerRing + " xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 21 21\">\n      <defs>\n        <style>\n          .ring {\n            fill: none;\n            stroke: currentColor;\n            stroke-miterlimit:10;\n            stroke-width:2px;\n          }\n        </style>\n      </defs>\n      <path class=\"ring\" d=\"M10,0A10,10,0,1,1,0,10,10,10,0,0,1,10,0Z\" transform=\"translate(0.5 0.5)\"/>\n    </svg>";
        spinnerContainerDiv.appendChild(spinnerDiv);
        var spinnerLoadingMessageDiv = document.createElement('div');
        spinnerLoadingMessageDiv.className = spinner_module_scss.spinnerLoadingMessage;
        spinnerLoadingMessageDiv.innerText = loadingMessage;
        spinnerContainerDiv.appendChild(spinnerLoadingMessageDiv);
        var spinnerAccessibilityContainerDiv = document.createElement('div');
        spinnerAccessibilityContainerDiv.setAttribute('role', 'status');
        spinnerAccessibilityContainerDiv.setAttribute('aria-live', 'polite');
        var spinnerAccessibilityMessageDiv = document.createElement('div');
        spinnerAccessibilityMessageDiv.className = spinner_module_scss.spinnerAccessibilityMessage;
        spinnerAccessibilityMessageDiv.innerText = loadingMessage;
        spinnerAccessibilityContainerDiv.appendChild(spinnerAccessibilityMessageDiv);
        spinnerContainerDiv.appendChild(spinnerAccessibilityContainerDiv);
        return spinnerContainerDiv;
    };
    return SpinnerFactory;
}());
/* harmony default export */ var core_SpinnerFactory = (SpinnerFactory_SpinnerFactory);

// CONCATENATED MODULE: ./lib/core/ClientSideWebPartStatusRenderer.js











var ClientSideWebPartStatusRenderer_ClientSideWebPartStatusRenderer =  (function () {
    function ClientSideWebPartStatusRenderer() {
        this._errorId = 'cswp-error';
        this._logSource = sp_diagnostics_["_LogSource"].create('ClientSideWebPartStatusRenderer');
        this._activeIndicatorCache = new Map();
    }
    ClientSideWebPartStatusRenderer.prototype.displayLoadingIndicator = function (domElement, loadingMessage, timeout) {
        this._createLoadingIndicator(domElement, loadingMessage, timeout);
    };
    ClientSideWebPartStatusRenderer.prototype._displayLoadingIndicator = function (domElement, loadingMessage, performanceLogEventName, timeout) {
        this._createLoadingIndicator(domElement, loadingMessage, timeout, performanceLogEventName);
    };
    ClientSideWebPartStatusRenderer.prototype.clearLoadingIndicator = function (domElement) {
        sp_core_library_["Validate"].isNotNullOrUndefined(domElement, 'domElement');
        if (this._activeIndicatorCache.has(domElement)) {
            var cacheEntry = this._getCacheEntry(domElement);
            sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, Strings_resx.ClearLoadingIndicator);
            if (cacheEntry.loadingTimer) {
                window.clearTimeout(cacheEntry.loadingTimer);
            }
            if (cacheEntry.placeholder) {
                if (cacheEntry.placeholder.parentElement) {
                    cacheEntry.placeholder.parentElement.removeChild(cacheEntry.placeholder);
                }
            }
            this._activeIndicatorCache.delete(domElement);
        }
    };
    ClientSideWebPartStatusRenderer.prototype.renderError = function (domElement, error) {
        sp_core_library_["Validate"].isNotNullOrUndefined(domElement, 'domElement');
        sp_core_library_["Validate"].isNotNullOrUndefined(error, 'error');
        var errorText = '';
        if (error instanceof sp_core_library_["SPError"]) {
            errorText = error.toStringForUI();
        }
        else {
            var vanillaError = error;
            var stack = vanillaError.stack;
            var newLineSeparator = '\r\n';
            var callStack = stack ? sp_core_library_["Text"].format(Strings_resx.WebpartErrorCallStackText, newLineSeparator, stack) : '';
            errorText = sp_core_library_["Text"].format(Strings_resx.WebpartErrorErrorText, newLineSeparator, "" + (vanillaError.message || error), callStack);
        }
        var cacheEntry = this._getCacheEntry(domElement);
        cacheEntry.isErrorBeingRendered = true;
        var errorComponent;
        if (false) {
            errorComponent = new FriendlyErrorMessage({ errorMessage: errorText }).render();
        }
        else {
            errorComponent = new core_ErrorMessage({ errorMessage: errorText }).render();
        }
        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
        if (divErr) {
            divErr.style.display = 'block';
        }
        else {
            divErr = document.createElement('div');
            divErr.setAttribute('data-sp-id', this._errorId);
            this._clearChildren(domElement);
            domElement.appendChild(divErr);
            classicPages_ClassicPageUtils.disableAutomaticPostbacks(domElement, sp_core_library_["Environment"].type);
        }
        divErr.setAttribute('data-automation-id', 'webPartError');
        divErr.innerHTML = '';
        divErr.appendChild(errorComponent);
    };
    ClientSideWebPartStatusRenderer.prototype.clearError = function (domElement) {
        sp_core_library_["Validate"].isNotNullOrUndefined(domElement, 'domElement');
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._activeIndicatorCache.get(domElement);
        if (cacheEntry && cacheEntry.isErrorBeingRendered) {
            cacheEntry.isErrorBeingRendered = false;
            var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
            if (divErr) {
                divErr.style.display = 'none';
                divErr.removeAttribute('data-automation-id');
            }
        }
    };
    ClientSideWebPartStatusRenderer.prototype._createLoadingIndicator = function (domElement, loadingMessage, timeout, performanceLogEventName) {
        var _this = this;
        sp_core_library_["Validate"].isNotNullOrUndefined(domElement, 'domElement');
        if (!timeout || (timeout && isNaN(timeout))) {
            timeout = 1500; 
        }
        var cacheEntry = this._getCacheEntry(domElement);
        if (cacheEntry.loadingTimer) {
            window.clearTimeout(cacheEntry.loadingTimer);
        }
        this._renderSpinner(domElement, loadingMessage, false);
        cacheEntry.loadingTimer = window.setTimeout(function () {
            if (performanceLogEventName) {
                sp_telemetry_["_PerformanceLogger"].markComponent(performanceLogEventName, 'displaySpinner');
            }
            _this._renderSpinner(domElement, loadingMessage, true);
        }, timeout);
    };
    ClientSideWebPartStatusRenderer.prototype._renderSpinner = function (domElement, loadingMessage, showSpinner) {
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._getCacheEntry(domElement);
        if (cacheEntry.isErrorBeingRendered) {
            return;
        }
        sp_diagnostics_["_TraceLogger"].logVerbose(this._logSource, Strings_resx.DisplayLoadingIndicator);
        if (!cacheEntry.placeholder) {
            cacheEntry.placeholder = this._createSpinnerElement(domElement, showSpinner, loadingMessage);
        }
        else {
            cacheEntry.placeholder.style.display = showSpinner ? 'block' : 'none';
        }
    };
    ClientSideWebPartStatusRenderer.prototype._getCacheEntry = function (domElement) {
        if (this._activeIndicatorCache.has(domElement)) {
            return this._activeIndicatorCache.get(domElement);
        }
        var cacheEntry = {
            loadingTimer: undefined,
            placeholder: undefined,
            isErrorBeingRendered: false
        };
        this._activeIndicatorCache.set(domElement, cacheEntry);
        return cacheEntry;
    };
    ClientSideWebPartStatusRenderer.prototype._createSpinnerElement = function (domElement, showSpinner, loadingMessage) {
        this._clearChildren(domElement);
        var spinnerContainerDiv = core_SpinnerFactory.createSpinner(sp_core_library_["Text"].format(Strings_resx.LoadingStatus, loadingMessage));
        spinnerContainerDiv.style.display = showSpinner ? 'block' : 'none';
        return domElement.appendChild(spinnerContainerDiv);
    };
    ClientSideWebPartStatusRenderer.prototype._clearChildren = function (element) {
        while (element.hasChildNodes()) {
            if (element.lastChild) {
                element.removeChild(element.lastChild);
            }
        }
    };
    ClientSideWebPartStatusRenderer = __decorate([
        decorators_["sealed"]
    ], ClientSideWebPartStatusRenderer);
    return ClientSideWebPartStatusRenderer;
}());
/* harmony default export */ var core_ClientSideWebPartStatusRenderer = (ClientSideWebPartStatusRenderer_ClientSideWebPartStatusRenderer);

// CONCATENATED MODULE: ./lib/utils/ExecuteWithoutFailing.js


function executeWithoutFailing(method, logSource) {
    sp_core_library_["Validate"].isNotNullOrUndefined(method, 'method');
    try {
        method();
    }
    catch (e) {
        if (logSource) {
            sp_diagnostics_["_TraceLogger"].logError(logSource, new Error('Error: ' + e));
        }
    }
}

// CONCATENATED MODULE: ./lib/core/loaders/IframedWebPartControllerLoader.js
function IframedWebPartControllerLoader() {
    return __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 20)).then(function (iframedWebPartControllerModule) { return iframedWebPartControllerModule.default; });
}

// CONCATENATED MODULE: ./lib/PropertyPaneLoader.js



var PropertyPaneLoader_PropertyPaneLoader =  (function () {
    function PropertyPaneLoader(serviceScope) {
        this._logSource = sp_diagnostics_["_LogSource"].create('PropertyPaneLoader');
        this._serviceScope = serviceScope;
    }
    Object.defineProperty(PropertyPaneLoader.prototype, "propertyPane", {
        get: function () {
            var _this = this;
            if (!this._propertyPaneController) {
                var propertyPaneQosMonitor_1 = new sp_diagnostics_["_QosMonitor"]('PropertyPaneLoader.loadPropertyPaneModule');
                if (false) {
                    var propertyPaneController = require('@microsoft/sp-property-pane')._PropertyPaneController;
                    return Promise.resolve(new propertyPaneController());
                }
                else {
                    return sp_loader_["SPComponentLoader"].loadComponentById(PropertyPaneLoader._propertyPaneModuleId)
                        .then(function (propertyPane) {
                        if (!_this._propertyPaneController) {
                            _this._propertyPaneController = new propertyPane._PropertyPaneController();
                        }
                        return Promise.resolve(_this._propertyPaneController);
                    })
                        .catch(function (error) {
                        sp_diagnostics_["_TraceLogger"].logErrorData({
                            source: _this._logSource,
                            error: error
                        });
                        propertyPaneQosMonitor_1.writeUnexpectedFailure('UnhandledError', error);
                        return Promise.reject(error);
                    });
                }
            }
            else {
                return Promise.resolve(this._propertyPaneController);
            }
        },
        enumerable: true,
        configurable: true
    });
    PropertyPaneLoader.serviceKey = sp_core_library_["ServiceKey"].create('sp-webpart-base:PropertyPaneLoader', PropertyPaneLoader);
    PropertyPaneLoader._propertyPaneModuleId = 'f9e737b7-f0df-4597-ba8c-3060f82380db';
    return PropertyPaneLoader;
}());
/* harmony default export */ var lib_PropertyPaneLoader = (PropertyPaneLoader_PropertyPaneLoader);

// CONCATENATED MODULE: ./lib/core/ClientSideWebPartManager.js























var THUMBNAIL_MAX_URL_LENGTH = 255; 
var SPPPLAT_IFRAMED_WEBPART_CONTROLLER_FLIGHT_ID = 1147;
var ClientSideWebPartManager_ClientSideWebPartManager =  (function () {
    function ClientSideWebPartManager(host) {
        this._webparts = new Map();
        this._logSource = sp_diagnostics_["_LogSource"].create('ClientSideWebPartManager');
        this._loadWebPartRequests = 0;
        this._statusRenderer = new core_ClientSideWebPartStatusRenderer();
        this._iframedWebpartInstanceIds = new Set();
        this._propertyPaneConsumerQueue = new Map();
        this._webPartRenderedCount = 0;
        this._displayMode = sp_core_library_["DisplayMode"].Read;
        sp_core_library_["Validate"].isNotNullOrUndefined(host, 'host');
        this._host = host;
        this._pageContext = host.serviceScope.consume(sp_page_context_["PageContext"].serviceKey);
        this._onContainerResize = this._onContainerResize.bind(this);
        this._onPropertyPaneNotifications = this._onPropertyPaneNotifications.bind(this);
        this.requestPropertyPaneAction = this.requestPropertyPaneAction.bind(this);
        this.isPropertyPaneRenderedByWebPart = this.isPropertyPaneRenderedByWebPart.bind(this);
        this.isPropertyPaneOpen = this.isPropertyPaneOpen.bind(this);
        this._instantiateWebPart = this._instantiateWebPart.bind(this);
        this._handleErrorLoadingWebpart = this._handleErrorLoadingWebpart.bind(this);
        this._handleModulePromiseRejection = this._handleModulePromiseRejection.bind(this);
        this._onFirstTimeWebpartRender = this._onFirstTimeWebpartRender.bind(this);
        this._getViewportRenderedEndTime = this._getViewportRenderedEndTime.bind(this);
        this._onAllWebpartsAdded = this._onAllWebpartsAdded.bind(this);
        if (ClientSideWebPartManager._webPartManagerList.length === 0) {
            this._initialzeOnResizeEventHandler();
        }
        ClientSideWebPartManager._webPartManagerList.push(this);
    }
    ClientSideWebPartManager._addPerfProperty = function (key, value, addToExistingValue) {
        if (addToExistingValue === void 0) { addToExistingValue = false; }
        if (addToExistingValue) {
            var previousValue = sp_telemetry_["_PerformanceLogger"].getPerformanceProperty(key);
            if (previousValue && !isNaN(previousValue)) {
                value = value + previousValue;
            }
        }
        sp_telemetry_["_PerformanceLogger"].setPerformanceProperty(key, value);
    };
    Object.defineProperty(ClientSideWebPartManager, "isMaintenanceMode", {
        get: function () {
            var urlParams = new sp_core_library_["UrlQueryParameterCollection"](window.location.href);
            return urlParams.getValue('maintenanceMode') === 'true';
        },
        enumerable: true,
        configurable: true
    });
    ClientSideWebPartManager.prototype.loadWebPart = function (context) {
        var _this = this;
        this._loadWebPartRequests++;
        var instanceRequestCount = this._loadWebPartRequests;
        var loadModulePromise = undefined;
        var loadWebPartPromise = new Promise(function (resolve, reject) {
            _this._validateInput(context);
            if (sp_core_library_["_SPFlight"].isEnabled(SPPPLAT_IFRAMED_WEBPART_CONTROLLER_FLIGHT_ID) &&
                context.webpartLoadExtraLogInfo.pageLayoutType &&
                context.webpartLoadExtraLogInfo.pageLayoutType !== 'MinimalWebPartContainer' &&
                (context.manifest.isolationLevel === WebPartIsolationLevel.DomIsolation ||
                    !!context.manifest.isolatedDomain)) {
                _this._iframedWebpartInstanceIds.add(context.instanceId);
                var domainUrl_1 = _this._ensureUrl(context.manifest.isolatedDomain, _this._pageContext.site.absoluteUrl);
                return IframedWebPartControllerLoader().then(function (iframedWebPartControllerModule) {
                    if (!_this._iframedWebPartController) {
                        _this._iframedWebPartController = new iframedWebPartControllerModule(_this._host);
                    }
                    resolve(_this._iframedWebPartController.loadWebPart(domainUrl_1, _this._pageContext, context));
                }).catch(function (error) {
                    reject(error);
                });
            }
            else {
                var qosMonitor_1 = _this._createLoadQosMonitor(context.manifest);
                var webPartTag_1 = _this._createWebPartTag(context.manifest, context.instanceId);
                sp_diagnostics_["_TraceLogger"].logVerboseData({
                    source: _this._logSource,
                    message: sp_core_library_["Text"].format(Strings_resx.LoadWebpartCalled, _this._loadWebPartRequests, context.totalWebparts, context.manifest.alias + "." + context.instanceId),
                    serviceScope: _this._host.serviceScope
                });
                sp_telemetry_["_PerformanceLogger"].devMark("ClientSideWebPartManager.loadWebPart(" + webPartTag_1 + ").start");
                if (context.displayMode === undefined) {
                    context.displayMode = sp_core_library_["DisplayMode"].Read;
                }
                _this._displayMode = context.displayMode;
                sp_telemetry_["_PageMetricsLogger"].recordMetric(core_WebPartMetrics.webParts);
                var webpartLoadExtraData = context.webpartLoadExtraLogInfo;
                webpartLoadExtraData.alias = _this._createWebPartTag(context.manifest, context.manifest.id);
                var logEntry = new sp_diagnostics_["_LogEntry"]('ClientSideWebPartManager', 'WebPartLoad', sp_diagnostics_["_LogType"].Event, webpartLoadExtraData);
                sp_diagnostics_["_EngagementLogger"].logEventWithLogEntry(logEntry);
                if (!_this._validateManifest(context.manifest, context.displayMode, webPartTag_1)) {
                    var error = SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.ManifestInvalid, webPartTag_1);
                    _this.renderError(context.domElement, error);
                    reject(error);
                }
                var manifest_1 = context.manifest; 
                var instanceId_1 = context.instanceId;
                var domElement_1 = context.domElement;
                var title = context.webPartData && context.webPartData.title
                    ? context.webPartData.title
                    : (manifest_1.title && manifest_1.title.default 
                        ? manifest_1.title.default 
                        : manifest_1.preconfiguredEntries[0].title.default);
                if (manifest_1.isInternal && _this._statusRenderer._displayLoadingIndicator) {
                    _this._statusRenderer._displayLoadingIndicator(domElement_1, title, webPartTag_1);
                }
                else {
                    _this._statusRenderer.displayLoadingIndicator(domElement_1, title);
                }
                sp_telemetry_["_PerformanceLogger"].startMarkForComponent(webPartTag_1);
                loadModulePromise = _this._loadWebPartModules(context, webPartTag_1, qosMonitor_1);
                loadModulePromise.then(function (baseComponent) {
                    sp_telemetry_["_PerformanceLogger"].devMark("ClientSideWebPartManager.loadWebPart(" + webPartTag_1 + ").end");
                    try {
                        _this._initializeWebPart({
                            context: context,
                            moduleLibrary: baseComponent,
                            webPartTag: webPartTag_1,
                            qosMonitor: qosMonitor_1
                        });
                    }
                    catch (error) {
                        reject(error);
                        return;
                    }
                    return _this._renderWebPart({
                        context: context,
                        webPartTag: webPartTag_1,
                        qosMonitor: qosMonitor_1,
                        instanceRequestCount: instanceRequestCount
                    })
                        .then(function () {
                        sp_telemetry_["_PerformanceLogger"].endMarkForComponent(webPartTag_1);
                        _this._onFirstTimeWebpartRender(manifest_1, webPartTag_1, qosMonitor_1);
                        resolve();
                    }).catch(reject); 
                })
                    .then(function () { return _this._loadLegacyFabricCssIfRequired(context, qosMonitor_1); })
                    .catch(function (err) {
                    _this._handleModulePromiseRejection(manifest_1, instanceId_1, domElement_1, webPartTag_1, err, qosMonitor_1);
                    reject(err);
                });
            }
        });
        if (sp_core_library_["Environment"].type !== sp_core_library_["EnvironmentType"].ClassicSharePoint &&
            context.totalWebparts &&
            context.totalWebparts === instanceRequestCount) {
            ClientSideWebPartManager._addPerfProperty('allWebPartsAdded', sp_telemetry_["_PerformanceLogger"].now());
            var addedPromise = loadModulePromise ||
                Promise.reject('No module promise');
            addedPromise.then(function () {
                sp_diagnostics_["_TraceLogger"].logVerboseData({
                    source: _this._logSource,
                    message: "All " + context.totalWebparts + " web parts requested to load, has been processed",
                    serviceScope: _this._host.serviceScope
                });
                _this._onAllWebpartsAdded(context);
            }, function () { return _this._onAllWebpartsAdded(context || { totalWebparts: 1 }); });
        }
        return loadWebPartPromise.then(function () { return _this._onWebPartRendered(context, sp_telemetry_["_PerformanceLogger"].now()); }, function (error) {
            _this._onWebPartRendered(context, sp_telemetry_["_PerformanceLogger"].now());
            return Promise.reject(error);
        });
    };
    ClientSideWebPartManager.prototype.setPropertyPaneConsumer = function (id, control) {
        sp_core_library_["Validate"].isNonemptyString(id, 'id');
        sp_core_library_["Validate"].isNotNullOrUndefined(control, 'control');
        this._webparts.set(id, control);
        this._registerWebPartAsPropertyPaneConsumer(id);
    };
    ClientSideWebPartManager.prototype.fetchWebPartManifests = function () {
        var _this = this;
        if (!this._toolboxManifestsPromise && (
        !this._pageContext.web ||
            !this._pageContext.web.serverRelativeUrl ||
            sp_core_library_["Environment"].type === sp_core_library_["EnvironmentType"].Local ||
            sp_core_library_["Environment"].type === sp_core_library_["EnvironmentType"].Test)) {
            this._toolboxManifestsPromise = Promise.resolve();
        }
        if (!this._toolboxManifestsPromise) {
            var requestCorrelationId_1;
            var qosMonitor_2 = new sp_diagnostics_["_QosMonitor"]('ClientSideWebPartManager.FetchWebParts');
            var requestUrl_1 = sp_core_library_["UrlUtilities"].removeEndSlash(this._pageContext.web.serverRelativeUrl) + "/_api/web/GetClientSideWebParts";
            this._host.serviceScope.whenFinished(function () {
                var httpClient = _this._host.serviceScope.consume(sp_http_["SPHttpClient"].serviceKey);
                _this._toolboxManifestsPromise = httpClient.get(requestUrl_1, sp_http_["SPHttpClient"].configurations.v1)
                    .then(function (response) {
                    requestCorrelationId_1 = response.correlationId ? response.correlationId.toString() : undefined;
                    if (response.ok) {
                        return response.json();
                    }
                    else {
                        throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.ManifestDownloadFailed);
                    }
                })
                    .then(function (value) {
                    var manifests = value.value.map(function (manifestObject) { return JSON.parse(manifestObject.Manifest); });
                    _this._disambiguateWebPartManifestLocales(manifests);
                    sp_loader_["SPComponentLoader"].registerManifests(manifests);
                    sp_diagnostics_["_TraceLogger"].logVerboseData({
                        source: _this._logSource,
                        message: Strings_resx.CompletedLoadingWebPartManifests,
                        serviceScope: _this._host.serviceScope
                    });
                    qosMonitor_2.writeSuccess();
                })
                    .catch(function (error) {
                    _this._toolboxManifestsPromise = undefined;
                    sp_diagnostics_["_TraceLogger"].logErrorData({
                        source: _this._logSource,
                        error: error,
                        serviceScope: _this._host.serviceScope
                    });
                    qosMonitor_2.writeUnexpectedFailure('Rejected', error, {
                        correlationId: requestCorrelationId_1
                    });
                    throw error;
                });
            });
        }
        return this._toolboxManifestsPromise;
    };
    ClientSideWebPartManager.prototype.getWebPartManifests = function () {
        var manifests = sp_loader_["SPComponentLoader"]._getManifestReferences();
        var result = []; 
        if (manifests) {
            for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
                var manifest = manifests_1[_i];
                if (manifest && manifest.componentType === 'WebPart') {
                    result.push(manifest); 
                }
            }
        }
        return result;
    };
    ClientSideWebPartManager.prototype.setDisplayMode = function (displayMode, instanceId) {
        this._setDisplayMode(displayMode, instanceId);
    };
    ClientSideWebPartManager.prototype._setDisplayMode = function (displayMode, instanceId) {
        var _this = this;
        this._displayMode = displayMode;
        if (this._displayMode === sp_core_library_["DisplayMode"].Read) {
            this._closeIsolatedPropertyPaneIfRequired();
        }
        var setDisplayModePromise = this._loadPropertyPaneModule();
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                webPart._internalSetDisplayMode(displayMode);
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                sp_core_library_["Validate"].isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                _this._iframedWebPartController.setDisplayMode(displayMode, id);
            }
        });
        this._startDirtyBitTimer(displayMode);
        return setDisplayModePromise;
    };
    ClientSideWebPartManager.prototype.serialize = function (instanceId) {
        var _this = this;
        var sd = new Map();
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                sd.set(id, webPart._internalSerialize());
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                sp_core_library_["Validate"].isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                sd.set(id, _this._iframedWebPartController.serialize(id));
            }
        });
        return sd;
    };
    ClientSideWebPartManager.prototype.setWebPartData = function (webPartData, instanceId) {
        sp_core_library_["Validate"].isNotNullOrUndefined(webPartData, 'web part data');
        sp_core_library_["Validate"].isNonemptyString(instanceId, 'web part instance id');
        var wp = this._webparts.get(instanceId);
        if (wp) {
            wp._internalSetWebPartData(webPartData);
            sp_core_library_["_SPEventManager"].instance.raiseEvent(this._getDataUpdatedEventName(webPartData.instanceId), {});
        }
    };
    ClientSideWebPartManager.prototype.dispose = function () {
        this.disposeWebparts();
        var currentIdx = ClientSideWebPartManager._webPartManagerList.indexOf(this);
        if (currentIdx >= 0) {
            ClientSideWebPartManager._webPartManagerList.splice(currentIdx, 1);
        }
    };
    ClientSideWebPartManager.prototype.disposeWebparts = function (instanceId) {
        var _this = this;
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                _this._deleteWebPart(id);
                executeWithoutFailing(function () { webPart._internalDispose(); }, _this._logSource);
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                sp_core_library_["Validate"].isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                _this._iframedWebPartController.deleteWebPart(id);
            }
        });
    };
    ClientSideWebPartManager.prototype.tryGeneratePreviewImageUrl = function (instanceIds) {
        var _this = this;
        var previewImageUrl = undefined;
        var previewFromAlias = undefined;
        this._executeForIdsOrAll(instanceIds, function (instanceId, webPart) {
            if (webPart) {
                if (!previewImageUrl) {
                    var webParthThumbnail = webPart.previewImageUrl;
                    if (webParthThumbnail) {
                        previewFromAlias = webPart.context.manifest.alias;
                        if (webParthThumbnail.length < THUMBNAIL_MAX_URL_LENGTH) {
                            previewImageUrl = webPart.previewImageUrl;
                        }
                        else {
                            sp_diagnostics_["_TraceLogger"].logVerboseData({
                                source: _this._logSource,
                                eventName: 'tryGeneratePreviewImageUrl',
                                message: previewFromAlias + " attempted preview URL of " + webPart.previewImageUrl.length + " chars."
                            });
                        }
                    }
                }
            }
            else if (_this._iframedWebpartInstanceIds.has(instanceId)) {
                return undefined;
            }
        });
        if (!previewImageUrl && previewFromAlias) {
            var pathLengthError = new Error('tryGeneratePreviewImageUrl PathLengthError.');
            sp_diagnostics_["_TraceLogger"].logError(this._logSource, pathLengthError);
            throw pathLengthError;
        }
        return previewImageUrl;
    };
    ClientSideWebPartManager.prototype.requestPropertyPaneAction = function (instanceId, propertyPaneAction, renderedByWebPart) {
        if (propertyPaneAction === void 0) { propertyPaneAction = 4 ; }
        var qosMonitor = new sp_diagnostics_["_QosMonitor"]('ClientSideWebPartManager.requestPropertyPaneAction');
        if (this._iframedWebpartInstanceIds.has(instanceId)) { 
            if (this._propertyPane && this._propertyPane.isOpen()) {
                this._propertyPane.requestAction(instanceId, 2 , renderedByWebPart);
            }
            this._iframedWebPartController.requestPropertyPaneAction(propertyPaneAction, instanceId);
        }
        else { 
            if (this._iframedWebPartController) {
                this._iframedWebPartController.requestPropertyPaneAction(2 );
            }
            if (this._propertyPane) {
                this._propertyPane.requestAction(instanceId, propertyPaneAction,  renderedByWebPart);
            }
        }
    };
    ClientSideWebPartManager.prototype.isPropertyPaneRenderedByWebPart = function () {
        return this._propertyPane && this._propertyPane.isRenderedByConsumer();
    };
    ClientSideWebPartManager.prototype.isPropertyPaneOpen = function () {
        return this._propertyPane && this._propertyPane.isOpen();
    };
    ClientSideWebPartManager.prototype.onWebPartDelete = function (instanceId) {
        this.disposeWebparts(instanceId);
    };
    ClientSideWebPartManager.prototype.renderError = function (domElement, error) {
        var _this = this;
        executeWithoutFailing(function () {
            _this._statusRenderer.renderError(domElement, error);
            sp_diagnostics_["_TraceLogger"].logErrorData({
                source: _this._logSource,
                error: error,
                serviceScope: _this._host.serviceScope
            });
        }, this._logSource);
    };
    ClientSideWebPartManager.prototype.notifyWebPartContainerResize = function (instanceId) {
        var _this = this;
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                webPart._internalOnAfterResize();
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                sp_core_library_["Validate"].isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                _this._iframedWebPartController.notifyContainerResize(id);
            }
        });
    };
    ClientSideWebPartManager.prototype._getWebPartContext = function (context) {
        var webPartTag = this._createWebPartTag(context.manifest, context.instanceId);
        var parameters = __assign({}, (this._host.getAdditionalContextProperties && this._host.getAdditionalContextProperties()), { parentServiceScope: context.serviceScope || this._host.serviceScope, manifest: this._getManifestInstance(context), instanceId: context.instanceId, webPartTag: webPartTag, domElement: context.domElement, statusRenderer: this._statusRenderer, isPropertyPaneRenderedByWebPart: this.isPropertyPaneRenderedByWebPart, isPropertyPaneOpen: this.isPropertyPaneOpen, formFactor: context.formFactor || 0 , host: this._host, requestPropertyPaneAction: this.requestPropertyPaneAction, loggingTag: webPartTag, _dataUpdatedEvent: new sp_core_library_["SPEvent"](this._getDataUpdatedEventName(context.instanceId)) });
        var webPartContext = new core_WebPartContext(parameters);
        return webPartContext;
    };
    ClientSideWebPartManager.prototype._loadWebPartModules = function (context, webPartTag, qosMonitor) {
        sp_diagnostics_["_TraceLogger"].logVerboseData({
            source: this._logSource,
            message: sp_core_library_["Text"].format(Strings_resx.StartedLoadingWebPart, webPartTag),
            serviceScope: this._host.serviceScope
        });
        var modulePromise = sp_loader_["SPComponentLoader"].loadComponent(context.manifest);
        var moduleLoadPromises = [];
        moduleLoadPromises.push(modulePromise);
        this._loadDynamicComponentDependencies(context.webPartData, webPartTag, moduleLoadPromises);
        return Promise.all(moduleLoadPromises)
            .then(function (moduleLibraries) {
            sp_telemetry_["_PerformanceLogger"].devMark("ClientSideWebPartManager.loadWebPart(" + webPartTag + ").end");
            return Promise.resolve(moduleLibraries[0]);
        })
            .catch(function (error) {
            return modulePromise;
        });
    };
    ClientSideWebPartManager.prototype._onWebPartRendered = function (context, renderEndTime) {
        this._webPartRenderedCount++;
        if (context.onAllWebPartsRendered) {
            if (sp_core_library_["Environment"].type !== sp_core_library_["EnvironmentType"].ClassicSharePoint &&
                context.totalWebparts &&
                context.totalWebparts === this._webPartRenderedCount) {
                window.setTimeout(function () { return context.onAllWebPartsRendered(renderEndTime); }, 0);
            }
        }
    };
    ClientSideWebPartManager.prototype._disambiguateWebPartManifestLocales = function (manifests) {
        var currentLocale = this._pageContext.cultureInfo.currentUICultureName
            ? this._pageContext.cultureInfo.currentUICultureName.toLowerCase()
            : undefined;
        if (currentLocale) {
            var disambiguateLocale_1 = function (values) {
                var foundMatch = undefined;
                for (var locale in values) {
                    if (locale && locale.toLowerCase() === currentLocale && values[locale]) {
                        foundMatch = values[locale];
                        break;
                    }
                }
                return {
                    default: foundMatch || values.default
                };
            };
            manifests.forEach(function (manifest) {
                if (manifest.componentType === 'WebPart') {
                    var wpManifest = manifest;
                    wpManifest.preconfiguredEntries.forEach(function (entry) {
                        entry.title = disambiguateLocale_1(entry.title);
                        entry.description = disambiguateLocale_1(entry.description);
                        if (entry.group) {
                            entry.group = disambiguateLocale_1(entry.group);
                        }
                    });
                }
            });
        }
    };
    ClientSideWebPartManager.prototype._validateInput = function (context) {
        sp_core_library_["Validate"].isNotNullOrUndefined(context, 'web part manager context');
        sp_core_library_["Validate"].isNotNullOrUndefined(context.domElement, 'web part element');
        sp_core_library_["Validate"].isNotNullOrUndefined(context.instanceId, 'web part instanceId');
        sp_core_library_["Validate"].isNotNullOrUndefined(context.manifest, 'web part manifest');
        sp_core_library_["Validate"].isTrue(!this._webparts.get(context.instanceId), "Duplicate web part instanceId is not allowed: " + context.instanceId);
    };
    ClientSideWebPartManager.prototype._validateManifest = function (manifest,  mode, webPartTag) {
        if (!manifest) {
            if (mode === sp_core_library_["DisplayMode"].Read) {
                throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.ManifestNull, webPartTag);
            }
            else {
                return false;
            }
        }
        var cm = sp_lodash_subset_["cloneDeep"](manifest);
        sp_core_library_["Validate"].isTrue(cm.manifestVersion == 2, 'Only version 2 manifests are currently supported');
        sp_core_library_["Validate"].isTrue(!!cm.id, 'web part id cannot be null or undefined');
        sp_core_library_["Validate"].isNotNullOrUndefined(sp_core_library_["Guid"].tryParse(cm.id), 'web part id has to be a GUID');
        sp_core_library_["Validate"].isTrue(!!cm.version, 'webp art version cannot be null or undefined');
        return true;
    };
    ClientSideWebPartManager.prototype._executeForIdsOrAll = function (instanceIds, callback) {
        var _this = this;
        if (instanceIds) {
            instanceIds.forEach(function (instanceId) {
                var webPart = _this._webparts.get(instanceId);
                callback(instanceId, webPart);
            });
        }
        else {
            this._webparts.forEach(function (webPart, instanceId) {
                if (_this._instanceOfBase(webPart)) {
                    callback(instanceId, webPart);
                }
            });
            if (this._iframedWebPartController) {
                this._iframedWebPartController.getAllInstanceIds().forEach(function (instanceId) {
                    callback(instanceId);
                });
            }
        }
    };
    ClientSideWebPartManager.prototype._instanceOfBase = function (wpi) {
        return wpi && (wpi instanceof core_BaseClientSideWebPart || wpi['__type'] === 'BaseClientSideWebPart');
    };
    ClientSideWebPartManager.prototype._getLoadedModuleList = function (moduleLibrary) {
        var loadedModulesString = '';
        for (var m in moduleLibrary) {
            if (moduleLibrary.hasOwnProperty(m)) {
                if (loadedModulesString) {
                    loadedModulesString += ',';
                }
                loadedModulesString += "" + m;
            }
        }
        return loadedModulesString;
    };
    ClientSideWebPartManager.prototype._startDirtyBitTimer = function (mode) {
        var _this = this;
        if (mode === sp_core_library_["DisplayMode"].Read) {
            if (this._dirtyBitTimer && sp_core_library_["Environment"].type !== sp_core_library_["EnvironmentType"].ClassicSharePoint) {
                window.clearInterval(this._dirtyBitTimer);
                this._dirtyBitTimer = undefined;
            }
        }
        else if (!this._dirtyBitTimer) {
            this._dirtyBitTimer = window.setInterval(function () {
                _this._executeForIdsOrAll(undefined, function (_instanceId, wp) {
                    if (wp) {
                        wp._internalSetDirtyBit();
                    }
                    else if (_this._iframedWebpartInstanceIds.has(_instanceId)) {
                        _this._iframedWebPartController.startDirtyBitTimer(_instanceId);
                    }
                });
            }, 1000);
        }
    };
    ClientSideWebPartManager.prototype._createSuccessExtraData = function (alias, isInternal, manifestId, moduleLoadTime, initTime, renderTime) {
        var successExtraData = {
            alias: alias,
            isInternal: isInternal,
            manifestId: manifestId,
            moduleLoadTime: Math.floor(moduleLoadTime),
            initTime: Math.floor(initTime),
            renderTime: Math.floor(renderTime)
        };
        return successExtraData;
    };
    ClientSideWebPartManager.prototype._createUnexpectedFailureExtraData = function (alias, instanceId, isInternal, manifestId) {
        var unexpectedFailureExtraData = {
            alias: alias,
            instanceId: instanceId,
            isInternal: isInternal,
            manifestId: manifestId
        };
        return unexpectedFailureExtraData;
    };
    ClientSideWebPartManager.prototype._createLoadQosMonitor = function (manifest) {
        return new sp_diagnostics_["_QosMonitor"]("WebPart.Load", true);
    };
    ClientSideWebPartManager.prototype._createWebPartTag = function (manifest, instanceId) {
        return "WebPart." + manifest.alias + "." + (manifest.isInternal ? 'internal' : 'external') + "." + instanceId;
    };
    ClientSideWebPartManager.prototype._deleteWebPart = function (id) {
        sp_core_library_["Validate"].isNotNullOrUndefined(id, 'id');
        if (this._propertyPane) {
            this._propertyPane.onConsumerDelete(id);
        }
        var wpi = this._webparts.get(id);
        if (wpi && this._instanceOfBase(wpi)) {
            sp_diagnostics_["_TraceLogger"].logVerboseData({
                source: this._logSource,
                message: sp_core_library_["Text"].format(Strings_resx.WebpartDeleteRequested, wpi.context.webPartTag),
                serviceScope: this._host.serviceScope
            });
            this._loadWebPartRequests--;
            this._webPartRenderedCount--;
            if (this._loadWebPartRequests < 0) {
                sp_diagnostics_["_TraceLogger"].logErrorData({
                    source: this._logSource,
                    error: new Error(Strings_resx.UnexpectedLoadRequestNegativeCount),
                    serviceScope: this._host.serviceScope
                });
            }
        }
        this._webparts.delete(id);
    };
    ClientSideWebPartManager.prototype._getManifestInstance = function (context) {
        var manifest = context.manifest;
        var manifestClone = sp_lodash_subset_["cloneDeep"](manifest);
        delete manifestClone.preconfiguredEntries;
        return manifestClone;
    };
    ClientSideWebPartManager.prototype._getArrayOrUndefined = function (instanceId) {
        return instanceId ? [instanceId] : undefined;
    };
    ClientSideWebPartManager.prototype._initialzeOnResizeEventHandler = function () {
        window.addEventListener('resize', sp_lodash_subset_["debounce"](this._onContainerResize, 1000));
        window.addEventListener('message', this._onPropertyPaneNotifications);
    };
    ClientSideWebPartManager.prototype._onContainerResize = function () {
        ClientSideWebPartManager._webPartManagerList.forEach(function (wpm) {
            wpm._webparts.forEach(function (wp) { wp._internalOnAfterResize(); });
        });
    };
    ClientSideWebPartManager.prototype._onPropertyPaneNotifications = function (event) {
        if (event && event.origin === window.location.origin) {
            switch (event.data) {
                case 'Property pane will open':
                    this._closeIsolatedPropertyPaneIfRequired();
                    break;
                case 'Property pane toggled':
                    this._onContainerResize();
                    break;
            }
        }
    };
    ClientSideWebPartManager.prototype._onAllWebpartsAdded = function (context, startTime) {
        var _this = this;
        var timeout = 2000;
        var endTime = this._getViewportRenderedEndTime();
        if (endTime || (startTime && (sp_telemetry_["_PerformanceLogger"].now() - startTime) > timeout)) {
            var qosViewportLoad = new sp_diagnostics_["_QosMonitor"]("Viewport.Load", true);
            if (endTime === undefined) {
                qosViewportLoad.writeExpectedFailure('Timed out waiting viewport web parts');
                endTime = sp_telemetry_["_PerformanceLogger"].now();
            }
            else {
                qosViewportLoad.writeSuccess();
            }
            window.setTimeout(function () { _this._onViewportWebpartsLoaded(context, endTime); }, 0);
        }
        else {
            window.setTimeout(function () { return _this._onAllWebpartsAdded(context, startTime ? startTime : sp_telemetry_["_PerformanceLogger"].now()); }, 100);
        }
    };
    ClientSideWebPartManager.prototype._onViewportWebpartsLoaded = function (context, endTime) {
        sp_core_library_["Validate"].isNotNullOrUndefined(endTime, 'endTime');
        if (sp_core_library_["Environment"].type !== sp_core_library_["EnvironmentType"].ClassicSharePoint) {
            this._registerWebpartsInViewport();
            sp_diagnostics_["_TraceLogger"].logVerboseData({
                source: this._logSource,
                message: 'All Web parts in the viewports are rendered at ' + endTime,
                serviceScope: this._host.serviceScope
            });
        }
        if (context.onViewportWebPartsRendered) {
            context.onViewportWebPartsRendered(endTime);
        }
        if (context.totalWebparts || sp_core_library_["Environment"].type === sp_core_library_["EnvironmentType"].ClassicSharePoint) {
            core_ViewportLoader.instance.loadOutsideViewPort();
        }
    };
    ClientSideWebPartManager.prototype._getViewportRenderedEndTime = function () {
        var _this = this;
        var isAllInViewportRendered = true;
        var endTime = undefined;
        var noWebPartInInitialViewport = true;
        this._webparts.forEach(function (wpi) {
            if (_this._instanceOfBase(wpi)
                && !sp_telemetry_["_PerformanceLogger"].shouldSkipComponent(wpi.context.webPartTag)
                && core_ViewportLoader.isInIntialViewport(wpi)) {
                noWebPartInInitialViewport = false;
                isAllInViewportRendered = isAllInViewportRendered ? wpi._renderedOnce : isAllInViewportRendered;
                if (isAllInViewportRendered) { 
                    var curEndTime = sp_telemetry_["_PerformanceLogger"].getComponentEndTime(wpi.context.webPartTag);
                    if (curEndTime && (!endTime || curEndTime > endTime)) {
                        endTime = curEndTime;
                    }
                }
            }
        });
        if (noWebPartInInitialViewport) {
            return sp_telemetry_["_PerformanceLogger"].now();
        }
        else {
            return isAllInViewportRendered ? endTime : undefined;
        }
    };
    ClientSideWebPartManager.prototype._registerWebpartsInViewport = function () {
        var _this = this;
        var externalWebpartsInViewport = 0; 
        var internalWebpartsInViewport = 0; 
        var totalInternalWebParts = 0; 
        var totalExternalWebParts = 0; 
        this._webparts.forEach(function (wpi) {
            if (_this._instanceOfBase(wpi)) {
                wpi.context.manifest.isInternal ? totalInternalWebParts++ : totalExternalWebParts++;
                if (core_ViewportLoader.isInIntialViewport(wpi)) {
                    sp_telemetry_["_PageMetricsLogger"].recordMetric(core_WebPartMetrics.webPartsCountedInViewport);
                    sp_telemetry_["_PerformanceLogger"].addComponent(wpi.context.webPartTag);
                    wpi.context.manifest.isInternal ? internalWebpartsInViewport++ : externalWebpartsInViewport++;
                    sp_diagnostics_["_TraceLogger"].logVerboseData({
                        source: _this._logSource,
                        message: "Web part " + wpi.context.webPartTag + " is added into EUPL calculation.",
                        serviceScope: _this._host.serviceScope
                    });
                }
                else if (wpi._internalIsInViewport) {
                    sp_telemetry_["_PageMetricsLogger"].recordMetric(core_WebPartMetrics.webPartsLoadedNotInViewport);
                }
            }
        });
        var sumCount = true;
        ClientSideWebPartManager._addPerfProperty('totalInternalWebParts', totalInternalWebParts, sumCount);
        ClientSideWebPartManager._addPerfProperty('totalExternalWebParts', totalExternalWebParts, sumCount);
        ClientSideWebPartManager._addPerfProperty('externalWebPartsInViewport', externalWebpartsInViewport, sumCount);
        ClientSideWebPartManager._addPerfProperty('internalWebPartsInViewport', internalWebpartsInViewport, sumCount);
    };
    ClientSideWebPartManager.prototype._instantiateWebPart = function (moduleLibrary, webPartTag) {
        var wp = moduleLibrary; 
        if (wp && wp.default) {
            wp = wp.default;
        }
        if (!wp) {
            throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.ModuleNotLoaded, webPartTag, this._getLoadedModuleList(moduleLibrary));
        }
        if (typeof (wp) !== 'function' && wp.default) {
            wp = wp.default;
        }
        if (typeof (wp) !== 'function') {
            throw SPWebPartError_SPWebPartError.createWithLogProperties(SPWebPartErrorCode.IncorrectBoostrapModule, { actualType: typeof (wp), wp: wp }, webPartTag);
        }
        var typedWebPartClass = wp;
        var wpi = new typedWebPartClass();
        if (!wpi._internalInitialize) {
            throw SPWebPartError_SPWebPartError.createWithLogProperties(SPWebPartErrorCode.MissingExpectedWebPartMemberError, { actualType: typeof (wp), wp: wp }, webPartTag, '_internalInitialize');
        }
        return wpi;
    };
    ClientSideWebPartManager.prototype._handleErrorLoadingWebpart = function (manifest,  instanceId, domElement, ex, qosMonitor) {
        var _this = this;
        var wpi = this._webparts.get(instanceId);
        if (wpi) {
            executeWithoutFailing(function () { _this._statusRenderer.clearLoadingIndicator(domElement); }, this._logSource);
            executeWithoutFailing(function () { wpi._internalDispose(); }, this._logSource);
            executeWithoutFailing(function () { _this._webparts.delete(instanceId); }, this._logSource);
        }
        executeWithoutFailing(function () {
            var extraData = _this._createUnexpectedFailureExtraData(manifest.alias, instanceId, manifest.isInternal, manifest.id);
            qosMonitor.writeUnexpectedFailure('UnhandledLoadError', ex, extraData);
        }, this._logSource);
        this.renderError(domElement, ex);
    };
    ClientSideWebPartManager.prototype._handleModulePromiseRejection = function (manifest,  instanceId, domElement, webPartTag, error, qosMonitor) {
        var _this = this;
        executeWithoutFailing(function () {
            var extraData = _this._createUnexpectedFailureExtraData(manifest.alias, instanceId, manifest.isInternal, manifest.id);
            qosMonitor.writeUnexpectedFailure('ScriptLoad', error, extraData);
        }, this._logSource);
        this.renderError(domElement, error);
    };
    ClientSideWebPartManager.prototype._onFirstTimeWebpartRender = function (manifest,  webPartTag, qosMonitor) {
        var start = sp_telemetry_["_PerformanceLogger"].readComponentBreakdown(webPartTag, 'start');
        var moduleLoaded = sp_telemetry_["_PerformanceLogger"].readComponentBreakdown(webPartTag, 'modulesLoaded');
        var inViewportLoaded = sp_telemetry_["_PerformanceLogger"].readComponentBreakdown(webPartTag, 'inViewportLoading');
        var initialized = sp_telemetry_["_PerformanceLogger"].readComponentBreakdown(webPartTag, 'init');
        var end = sp_telemetry_["_PerformanceLogger"].readComponentBreakdown(webPartTag, 'end');
        var extraData = this._createSuccessExtraData(manifest.alias, manifest.isInternal, manifest.id, moduleLoaded - start, initialized - inViewportLoaded, end - initialized);
        qosMonitor.writeSuccess(extraData);
        classicPages_ClassicPageUtils.removeFabricLinks();
        sp_diagnostics_["_TraceLogger"].logVerboseData({
            source: this._logSource,
            message: sp_core_library_["Text"].format(Strings_resx.ModulesLoadedForWebPart, webPartTag),
            serviceScope: this._host.serviceScope
        });
    };
    ClientSideWebPartManager.prototype._getDataUpdatedEventName = function (webPartInstanceId) {
        return "WebPart_" + webPartInstanceId + "_dataUpdated";
    };
    ClientSideWebPartManager.prototype._initializeWebPart = function (options) {
        var context = options.context, moduleLibrary = options.moduleLibrary, webPartTag = options.webPartTag, qosMonitor = options.qosMonitor;
        try {
            sp_telemetry_["_PerformanceLogger"].markComponentModuleLoaded(webPartTag);
            sp_diagnostics_["_TraceLogger"].logVerboseData({
                source: this._logSource,
                message: sp_core_library_["Text"].format(Strings_resx.ModulesLoadedForWebPart, webPartTag),
                serviceScope: this._host.serviceScope
            });
            if (!moduleLibrary) {
                throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.ModuleUndefined, webPartTag);
            }
            var wpi = this._instantiateWebPart(moduleLibrary, webPartTag);
            wpi._internalInitialize(this._getWebPartContext(context), 
            context.addedFromPersistedData, context.displayMode);
            if (!this._instanceOfBase(wpi)) {
                throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.NonBaseWebPart, webPartTag);
            }
            this._webparts.set(context.instanceId, wpi);
            this._registerWebPartAsPropertyPaneConsumer(context.instanceId);
            this._startDirtyBitTimer(context.displayMode);
            var webPartData = sp_lodash_subset_["cloneDeep"](context.webPartData);
            if (webPartData) {
                wpi._internalDeserialize(webPartData);
            }
        }
        catch (error) {
            this._handleErrorLoadingWebpart(context.manifest, context.instanceId, context.domElement, error, qosMonitor);
            throw error;
        }
    };
    ClientSideWebPartManager.prototype._renderWebPart = function (options) {
        var _this = this;
        var context = options.context, webPartTag = options.webPartTag, qosMonitor = options.qosMonitor, instanceRequestCount = options.instanceRequestCount;
        try {
            var wpi_1 = this._webparts.get(context.instanceId);
            sp_load_themed_styles_["flush"]();
            return this._loadPropertyPaneModule().then(function () {
                var webpartFirstRenderPromise = wpi_1._internalFirstTimeRender(
                context.scrollableParent, qosMonitor);
                if ((sp_core_library_["Environment"].type === sp_core_library_["EnvironmentType"].ClassicSharePoint) && core_ViewportLoader.isInIntialViewport(wpi_1)) {
                    sp_telemetry_["_PerformanceLogger"].addComponent(webPartTag);
                    sp_diagnostics_["_TraceLogger"].logVerboseData({
                        source: _this._logSource,
                        message: "Web part " + webPartTag + " is added into EUPL calculation.",
                        serviceScope: _this._host.serviceScope
                    });
                }
                if (instanceRequestCount === 1 &&
                    sp_core_library_["Environment"].type === sp_core_library_["EnvironmentType"].ClassicSharePoint &&
                    !_this._host.isViewportLoadingDisabled) {
                    _this._onAllWebpartsAdded(context);
                }
                return webpartFirstRenderPromise;
            }).catch(function (error) { throw error; });
        }
        catch (ex) {
            this._handleErrorLoadingWebpart(context.manifest, context.instanceId, context.domElement, ex, qosMonitor);
            return Promise.reject(ex);
        }
    };
    ClientSideWebPartManager.prototype._loadDynamicComponentDependencies = function (webPartData, webPartTag, moduleLoadPromises) {
        if (webPartData
            && webPartData.serverProcessedContent
            && webPartData.serverProcessedContent.componentDependencies) {
            var componentDependencies = webPartData.serverProcessedContent.componentDependencies;
            if (componentDependencies) {
                for (var compDependency in componentDependencies) {
                    if (compDependency && componentDependencies[compDependency]) {
                        var componentId = componentDependencies[compDependency];
                        if (!sp_core_library_["Guid"].tryParse(componentId)) {
                            var error = new Error("Web part (" + webPartTag + ") dynamic dependency " + componentId + " is not a valid guid");
                            sp_diagnostics_["_TraceLogger"].logErrorData({ source: this._logSource, error: error, serviceScope: this._host.serviceScope });
                        }
                        else {
                            moduleLoadPromises.push(sp_loader_["SPComponentLoader"].loadComponentById(componentId));
                            sp_diagnostics_["_TraceLogger"].logVerboseData({
                                source: this._logSource,
                                message: "Web part (" + webPartTag + ") loading dynamic dependency " + componentId + " started.",
                                serviceScope: this._host.serviceScope
                            });
                        }
                    }
                }
            }
        }
    };
    ClientSideWebPartManager.prototype._registerWebPartAsPropertyPaneConsumer = function (instanceId) {
        if (instanceId) {
            var wp = undefined;
            for (var _i = 0, _a = ClientSideWebPartManager._webPartManagerList; _i < _a.length; _i++) {
                var manager = _a[_i];
                wp = manager._webparts.get(instanceId);
                if (wp) {
                    if (this._propertyPane) {
                        this._propertyPane.registerConsumer(instanceId, wp);
                    }
                    else {
                        this._propertyPaneConsumerQueue.set(instanceId, wp);
                    }
                    break;
                }
            }
        }
    };
    ClientSideWebPartManager.prototype._ensureUrl = function (isolatedDomain, absoluteUrl) {
        if (!isolatedDomain) {
            return absoluteUrl;
        }
        var slashAdded = false;
        if (absoluteUrl.charAt(absoluteUrl.length - 1) !== '/') {
            absoluteUrl = absoluteUrl + '/';
            slashAdded = true;
        }
        absoluteUrl = absoluteUrl.replace(ClientSideWebPartManager._domainRegex, "https://" + isolatedDomain + "/");
        if (slashAdded) {
            absoluteUrl = absoluteUrl.substr(0, absoluteUrl.length - 1);
        }
        return absoluteUrl;
    };
    ClientSideWebPartManager.prototype._loadPropertyPaneModule = function () {
        var _this = this;
        if ((this._displayMode === sp_core_library_["DisplayMode"].Edit ||
            sp_core_library_["Environment"].type === sp_core_library_["EnvironmentType"].ClassicSharePoint) &&
            !this._propertyPane) {
            var propertyPaneQosMonitor_1 = new sp_diagnostics_["_QosMonitor"]('ClientSideWebPartManager._loadPropertyPaneModule');
            this._propertyPaneLoader = this._host.serviceScope.consume(lib_PropertyPaneLoader.serviceKey);
            return this._propertyPaneLoader.propertyPane
                .then(function (propertyPane) {
                _this._propertyPane = propertyPane;
                _this._registerPendingPropertyPaneConsumers();
            })
                .catch(function (error) {
                sp_diagnostics_["_TraceLogger"].logErrorData({
                    source: _this._logSource,
                    error: error
                });
                propertyPaneQosMonitor_1.writeUnexpectedFailure('UnhandledError', error);
                throw error;
            });
        }
        else {
            return Promise.resolve();
        }
    };
    ClientSideWebPartManager.prototype._registerPendingPropertyPaneConsumers = function () {
        var _this = this;
        this._propertyPaneConsumerQueue.forEach(function (consumer, instanceId) {
            _this._propertyPane.registerConsumer(instanceId, consumer);
        });
    };
    ClientSideWebPartManager.prototype._closeIsolatedPropertyPaneIfRequired = function () {
        ClientSideWebPartManager._webPartManagerList.forEach(function (cswpm) {
            if (cswpm._iframedWebPartController) {
                cswpm._iframedWebPartController.requestPropertyPaneAction(2 );
            }
        });
    };
    ClientSideWebPartManager.prototype._loadLegacyFabricCssIfRequired = function (context, qosMonitor) {
        var _this = this;
        var manifest = context.manifest;
        if (!sp_component_base_["_ComponentBaseKillSwitches"].isStopLoadingLegacyFabricCSSKillSwitchActivated()) {
            return sp_component_base_["_LegacyThirdPartyFabricCoreLoader"].forceLoad(manifest)
                .then(function () { return Promise.resolve(); })
                .catch(function (error) {
                sp_diagnostics_["_TraceLogger"].logErrorData({
                    source: _this._logSource,
                    error: error,
                    serviceScope: _this._host.serviceScope
                });
                qosMonitor.writeUnexpectedFailure('Error loading legacy-third-party-fabric-core.', error);
                Promise.reject(error);
            });
        }
        else {
            return sp_component_base_["_LegacyThirdPartyFabricCoreLoader"].load(context.manifest.isInternal)
                .then(function () { return Promise.resolve(); })
                .catch(function (error) {
                sp_diagnostics_["_TraceLogger"].logErrorData({
                    source: _this._logSource,
                    error: error,
                    serviceScope: _this._host.serviceScope
                });
                qosMonitor.writeUnexpectedFailure('Error loading legacy-third-party-fabric-core.', error);
                Promise.reject(error);
            });
        }
    };
    ClientSideWebPartManager._webPartManagerList = [];
    ClientSideWebPartManager._domainRegex = new RegExp('^https://[^/]*/');
    return ClientSideWebPartManager;
}());
/* harmony default export */ var core_ClientSideWebPartManager = (ClientSideWebPartManager_ClientSideWebPartManager);

// CONCATENATED MODULE: ./lib/core/ClientSideWebPartMaintenanceModeManager.js







var SP_MAINTENANCE_MODE_MANIFEST_ID = '88019639-8c06-4ba6-8545-03a1f38f8393';
var ClientSideWebPartMaintenanceModeManager_ClientSideWebPartMaintenanceModeManager =  (function (_super) {
    __extends(ClientSideWebPartMaintenanceModeManager, _super);
    function ClientSideWebPartMaintenanceModeManager(host) {
        var _this = _super.call(this, host) || this;
        _this._wpMaintenanceModeData = new Map();
        return _this;
    }
    ClientSideWebPartMaintenanceModeManager.prototype.loadWebPart = function (context) {
        this._loadWebPartInMaintenanceMode(context);
        this._wpMaintenanceModeData.set(context.instanceId, context.webPartData);
        return Promise.resolve();
    };
    ClientSideWebPartMaintenanceModeManager.prototype.serialize = function (instanceId) {
        return this._wpMaintenanceModeData;
    };
    ClientSideWebPartMaintenanceModeManager.prototype.dispose = function (instanceId) {
        if (instanceId) {
            this._wpMaintenanceModeData.delete(instanceId);
        }
        else {
            this._wpMaintenanceModeData = new Map();
        }
    };
    ClientSideWebPartMaintenanceModeManager.prototype._loadWebPartInMaintenanceMode = function (context) {
        var webPartContext = this._getWebPartContext(context);
        webPartContext.serviceScope.finish();
        sp_loader_["SPComponentLoader"].loadComponentById(SP_MAINTENANCE_MODE_MANIFEST_ID).then(function (uiComponentModule) {
            uiComponentModule.MaintenanceModeRenderer.render(webPartContext, context.webPartData).then(function () {
                classicPages_ClassicPageUtils.disableAutomaticPostbacks(context.domElement, sp_core_library_["Environment"].type);
            });
        });
    };
    ClientSideWebPartMaintenanceModeManager = __decorate([
        decorators_["sealed"]
    ], ClientSideWebPartMaintenanceModeManager);
    return ClientSideWebPartMaintenanceModeManager;
}(core_ClientSideWebPartManager));
/* harmony default export */ var core_ClientSideWebPartMaintenanceModeManager = (ClientSideWebPartMaintenanceModeManager_ClientSideWebPartMaintenanceModeManager);

// CONCATENATED MODULE: ./lib/core/ClientSideWebPartManagerFactory.js




var ClientSideWebPartManagerFactory_ClientSideWebPartManagerFactory =  (function () {
    function ClientSideWebPartManagerFactory() {
    }
    ClientSideWebPartManagerFactory.create = function (host) {
        if (core_ClientSideWebPartManager.isMaintenanceMode) {
            return new core_ClientSideWebPartMaintenanceModeManager(host);
        }
        else {
            return new core_ClientSideWebPartManager(host);
        }
    };
    ClientSideWebPartManagerFactory = __decorate([
        decorators_["sealed"]
    ], ClientSideWebPartManagerFactory);
    return ClientSideWebPartManagerFactory;
}());
/* harmony default export */ var core_ClientSideWebPartManagerFactory = (ClientSideWebPartManagerFactory_ClientSideWebPartManagerFactory);

// CONCATENATED MODULE: ./lib/core/WebPartDataConverter.js






var WebPartDataConverter_WebPartDataConverter =  (function () {
    function WebPartDataConverter() {
    }
    WebPartDataConverter_1 = WebPartDataConverter;
    Object.defineProperty(WebPartDataConverter, "_parsingDocument", {
        get: function () {
            if (!this._tempDoc) {
                this._tempDoc = document.implementation.createHTMLDocument('tempDocument');
            }
            return this._tempDoc;
        },
        enumerable: true,
        configurable: true
    });
    WebPartDataConverter.isWebPartHtml = function (htmlString) {
        sp_core_library_["Validate"].isNonemptyString(htmlString, 'htmlString');
        return htmlString.indexOf('<div') === 0 && htmlString.indexOf(WebPartDataConverter_1._webPartDataAttribute) !== -1;
    };
    WebPartDataConverter.convertWebPartDataToHtml = function (webpartData) {
        sp_core_library_["Validate"].isNotNullOrUndefined(webpartData, 'web part data');
        var wpdata = sp_lodash_subset_["cloneDeep"](webpartData);
        WebPartDataConverter_1._initializeIfNeeded();
        var componentIdDiv = WebPartDataConverter_1._wpComponentIdDiv.cloneNode();
        componentIdDiv.textContent = wpdata.id;
        var htmlPropsDiv = WebPartDataConverter_1._wpHtmlPropsDiv.cloneNode();
        htmlPropsDiv.innerHTML = WebPartDataConverter_1.convertServerProcessedDataToHtml(wpdata.serverProcessedContent);
        wpdata.serverProcessedContent = undefined;
        var wpHtmlDiv = WebPartDataConverter_1._wpDiv.cloneNode();
        wpHtmlDiv.setAttribute(WebPartDataConverter_1._webPartDataAttribute, JSON.stringify(wpdata));
        wpHtmlDiv.appendChild(componentIdDiv);
        wpHtmlDiv.appendChild(htmlPropsDiv);
        var wrapper = WebPartDataConverter_1._parsingDocument.createElement('div');
        wrapper.appendChild(wpHtmlDiv);
        return wrapper.innerHTML;
    };
    WebPartDataConverter.convertHtmlToWebPartData = function (htmlString, links) {
        var wpdata;
        var wrapper = WebPartDataConverter_1._parsingDocument.createElement('div');
        wrapper.innerHTML = htmlString.trim();
        var wpHtmlDiv = wrapper.children[0];
        if (wpHtmlDiv && wpHtmlDiv.hasAttribute(WebPartDataConverter_1._webPartAttribute)) {
            var wpHtmlDivWebPartAttributeData = wpHtmlDiv.getAttribute(WebPartDataConverter_1._webPartDataAttribute);
            if (wpHtmlDivWebPartAttributeData) {
                wpdata = JSON.parse(wpHtmlDivWebPartAttributeData);
            }
            if (wpdata) {
                var htmlPropsDiv = wpHtmlDiv.querySelector("[" + WebPartDataConverter_1._htmlPropertiesAttribute + "]");
                wpdata.serverProcessedContent =
                    WebPartDataConverter_1.convertServerProcessedHtmlToData(htmlPropsDiv.innerHTML, links);
            }
        }
        return wpdata || undefined;
    };
    WebPartDataConverter.convertServerProcessedDataToHtml = function (serverContent) {
        var result = '';
        if (serverContent) {
            if (serverContent.htmlStrings) {
                result += WebPartDataConverter_1._convertServerProcessedDataToHtmlByType(serverContent.htmlStrings, 1 );
            }
            if (serverContent.searchablePlainTexts) {
                result += WebPartDataConverter_1._convertServerProcessedDataToHtmlByType(serverContent.searchablePlainTexts, 4 );
            }
            if (serverContent.links) {
                result += WebPartDataConverter_1._convertServerProcessedDataToHtmlByType(serverContent.links, 2 );
            }
            if (serverContent.imageSources) {
                result += WebPartDataConverter_1._convertServerProcessedDataToHtmlByType(serverContent.imageSources, 3 );
            }
        }
        return result;
    };
    WebPartDataConverter._convertServerProcessedDataToHtmlByType = function (properties, type) {
        var result = '';
        for (var propPath in properties) { 
            var value = properties[propPath];
            result += WebPartDataConverter_1._getHtmlString(propPath, type, value);
        }
        return result;
    };
    WebPartDataConverter.convertServerProcessedHtmlToData = function (htmlString, links) {
        var serverContent = {
            htmlStrings: {},
            searchablePlainTexts: {},
            links: {},
            imageSources: {}
        };
        if (!htmlString || htmlString === '') {
            return serverContent;
        }
        var tempNode = WebPartDataConverter_1._parsingDocument.createElement('DIV');
        tempNode.innerHTML = htmlString;
        var nodes = tempNode.children;
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var key = node.getAttribute(WebPartDataConverter_1._propNameAttribute);
            if (key) {
                switch (node.tagName) {
                    case 'DIV':
                        if (node.hasAttribute(WebPartDataConverter_1._searchablePlainTextAttribute) &&
                            serverContent.searchablePlainTexts) {
                            serverContent.searchablePlainTexts[key] = node.textContent;
                        }
                        else if (serverContent.htmlStrings) {
                            serverContent.htmlStrings[key] = node.innerHTML;
                        }
                        break;
                    case 'LINK':
                    case 'A':
                        if (links) {
                            WebPartDataConverter_1._extractSPLink(node, links, serverContent, key, false);
                        }
                        else {
                            var aTagAttribute = node.getAttribute('href');
                            if (aTagAttribute && serverContent.links) {
                                serverContent.links[key] = aTagAttribute;
                            }
                        }
                        break;
                    case 'IMG':
                    case 'SPIMG':
                        if (links) {
                            WebPartDataConverter_1._extractSPLink(node, links, serverContent, key, true);
                        }
                        else {
                            var srcAttribute = node.getAttribute('src');
                            if (serverContent.imageSources && srcAttribute) {
                                serverContent.imageSources[key] = srcAttribute;
                            }
                            var hrefAttribute = node.getAttribute('href');
                            if (hrefAttribute && serverContent && serverContent.imageSources &&
                                (serverContent.imageSources[key] === undefined || serverContent.imageSources[key] === null)) {
                                serverContent.imageSources[key] = hrefAttribute;
                            }
                        }
                        break;
                }
            }
        }
        return serverContent;
    };
    WebPartDataConverter._getHtmlString = function (propName, propType, propValue) {
        var htmlPropsString = '';
        if (propName && typeof propValue === 'string' && propValue) {
            switch (propType) {
                case 1 :
                    var htmlDiv = this._parsingDocument.createElement('DIV');
                    htmlDiv.setAttribute(WebPartDataConverter_1._propNameAttribute, propName);
                    var sanitizedValue = WebPartDataConverter_1._normalizeHTML(propValue);
                    htmlDiv.innerHTML = sanitizedValue;
                    htmlPropsString = htmlDiv.outerHTML;
                    break;
                case 4 :
                    var plainTextDiv = this._parsingDocument.createElement('DIV');
                    plainTextDiv.setAttribute(WebPartDataConverter_1._propNameAttribute, propName);
                    plainTextDiv.setAttribute(WebPartDataConverter_1._searchablePlainTextAttribute, 'true');
                    plainTextDiv.textContent = propValue;
                    htmlPropsString = plainTextDiv.outerHTML;
                    break;
                case 2 :
                    var anchorDiv = this._parsingDocument.createElement('A');
                    anchorDiv.setAttribute(WebPartDataConverter_1._propNameAttribute, propName);
                    anchorDiv.setAttribute('href', propValue);
                    htmlPropsString = anchorDiv.outerHTML;
                    break;
                case 3 :
                    var imgDiv = this._parsingDocument.createElement('IMG');
                    imgDiv.setAttribute(WebPartDataConverter_1._propNameAttribute, propName);
                    imgDiv.setAttribute('src', propValue);
                    htmlPropsString = imgDiv.outerHTML;
                    break;
            }
        }
        return htmlPropsString;
    };
    WebPartDataConverter._normalizeHTML = function (htmlString) {
        if (!htmlString || htmlString === '') {
            return htmlString;
        }
        var tempDiv = WebPartDataConverter_1._parsingDocument.createElement('DIV');
        tempDiv.innerHTML =
            "<div class='child1'></div>" +
                ("<div class='main'>" + htmlString + "</div>") +
                "<div class='child3'></div>";
        var children = tempDiv.children;
        if (!children[0] || children[0].className !== 'child1' ||
            !children[1] || children[1].className !== 'main' ||
            !children[2] || children[2].className !== 'child3') {
            return '';
        }
        var mainDiv = children[1];
        var scriptTags = mainDiv.querySelectorAll('script');
        for (var i = 0; i < scriptTags.length; i++) {
            var scriptTag = scriptTags[0];
            if (scriptTag && scriptTag.parentElement) {
                scriptTag.parentElement.removeChild(scriptTag);
            }
        }
        return mainDiv.innerHTML;
    };
    WebPartDataConverter._initializeIfNeeded = function () {
        if (!WebPartDataConverter_1._wpDiv) {
            WebPartDataConverter_1._wpDiv = WebPartDataConverter_1._parsingDocument.createElement('div');
            WebPartDataConverter_1._wpDiv.setAttribute(WebPartDataConverter_1._webPartAttribute, '');
            WebPartDataConverter_1._wpDiv.setAttribute(WebPartDataConverter_1._webPartDataVersionAttribute, '1.0');
            WebPartDataConverter_1._wpComponentIdDiv = WebPartDataConverter_1._parsingDocument.createElement('div');
            WebPartDataConverter_1._wpComponentIdDiv.setAttribute(WebPartDataConverter_1._componentIdAttribute, '');
            WebPartDataConverter_1._wpHtmlPropsDiv = WebPartDataConverter_1._parsingDocument.createElement('div');
            WebPartDataConverter_1._wpHtmlPropsDiv.setAttribute(WebPartDataConverter_1._htmlPropertiesAttribute, '');
        }
    };
    WebPartDataConverter._extractSPLink = function (node, links, serverContent, key, isImage) {
        if (links.length <= 0) {
            return;
        }
        var spLinkAttribute = node.getAttribute('data-sp-splink');
        if (spLinkAttribute) {
            var result = WebPartDataConverter_1._linkPlaceHolderRegex.exec(spLinkAttribute);
            if (result) {
                var index = parseInt(result[1], 10);
                if (!isNaN(index) && !!links[index]) {
                    if (isImage && serverContent.imageSources) {
                        serverContent.imageSources[key] = links[index];
                    }
                    else if (serverContent.links) {
                        serverContent.links[key] = links[index];
                    }
                }
                else {
                    throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.InvalidSPLinkIndex, result[1]);
                }
            }
            else {
                throw SPWebPartError_SPWebPartError.create(SPWebPartErrorCode.InvalidSPLinkAttributeFormat, spLinkAttribute);
            }
        }
    };
    var WebPartDataConverter_1;
    WebPartDataConverter._componentIdAttribute = 'data-sp-componentid';
    WebPartDataConverter._htmlPropertiesAttribute = 'data-sp-htmlproperties';
    WebPartDataConverter._propNameAttribute = 'data-sp-prop-name';
    WebPartDataConverter._searchablePlainTextAttribute = 'data-sp-searchableplaintext';
    WebPartDataConverter._webPartAttribute = 'data-sp-webpart';
    WebPartDataConverter._webPartDataAttribute = 'data-sp-webpartdata';
    WebPartDataConverter._webPartDataVersionAttribute = 'data-sp-webpartdataversion';
    WebPartDataConverter._linkPlaceHolderRegex = /^__SPLINK__(\d+)__$/;
    WebPartDataConverter = WebPartDataConverter_1 = __decorate([
        decorators_["sealed"]
    ], WebPartDataConverter);
    return WebPartDataConverter;
}());

/* harmony default export */ var core_WebPartDataConverter = (WebPartDataConverter_WebPartDataConverter);

// CONCATENATED MODULE: ./lib/components/container/MinimalWebPartContainer.js


var MinimalWebPartContainer_MinimalWebPartContainer =  (function () {
    function MinimalWebPartContainer(props) {
        this._validateProps(props);
        this._props = props;
        this._webPartManager = core_ClientSideWebPartManagerFactory.create(this._props.host);
    }
    Object.defineProperty(MinimalWebPartContainer.prototype, "webPartManager", {
        get: function () {
            return this._webPartManager;
        },
        enumerable: true,
        configurable: true
    });
    MinimalWebPartContainer.prototype.render = function (domElement) {
        var _this = this;
        sp_core_library_["Validate"].isNotNullOrUndefined(domElement, 'domElement');
        this._domElement = domElement;
        if (this._props.openPropertyPane) {
            this._domElement.style.display = 'none';
        }
        else {
            this._domElement.style.display = 'block';
        }
        return this._renderWebPart(this._domElement).then(function () {
            if (_this._props.openPropertyPane) {
                _this._webPartManager.requestPropertyPaneAction(_this._props.webPartInstanceId, 1 );
            }
            else { 
                if (_this._props.requestDisplayModeStatus) {
                    _this._props.requestDisplayModeStatus();
                }
                if (_this._props.sendDimensionsToParent) {
                    window.setInterval(_this._sendDimensionsCallback.bind(_this), 200);
                }
            }
        });
    };
    MinimalWebPartContainer.prototype.dispose = function () {
        this._webPartManager.disposeWebparts(this._props.webPartInstanceId);
        this._webPartManager.dispose();
    };
    MinimalWebPartContainer.prototype.setWebPartData = function (webPartData, instanceId) {
        this._webPartManager.setWebPartData(webPartData, instanceId);
    };
    MinimalWebPartContainer.prototype.serialize = function () {
        var serializedResult = this._webPartManager.serialize(this._props.webPartInstanceId);
        var webPartData = serializedResult.get(this._props.webPartInstanceId);
        sp_core_library_["Validate"].isNotNullOrUndefined(webPartData, 'webPartData');
        return webPartData;
    };
    MinimalWebPartContainer.prototype.setDisplayMode = function (displayMode) {
        return this._webPartManager._setDisplayMode(displayMode, this._props.webPartInstanceId);
    };
    MinimalWebPartContainer.prototype.requestPropertyPaneAction = function (instanceId, propertyPaneAction, webPartData) {
        if (webPartData) {
            this._webPartManager.setWebPartData(webPartData, instanceId);
        }
        this._webPartManager.requestPropertyPaneAction(instanceId, propertyPaneAction);
    };
    MinimalWebPartContainer.prototype._getHeight = function () {
        sp_core_library_["Validate"].isNotNullOrUndefined(this._domElement, 'domElement');
        var domElementChild = this._domElement.children.item(0);
        return domElementChild.offsetHeight;
    };
    MinimalWebPartContainer.prototype._getWidth = function () {
        sp_core_library_["Validate"].isNotNullOrUndefined(this._domElement, 'domElement');
        var domElementChild = this._domElement.children.item(0);
        return domElementChild.offsetWidth;
    };
    MinimalWebPartContainer.prototype._sendDimensionsCallback = function () {
        this._props.sendDimensionsToParent(this._getHeight());
    };
    MinimalWebPartContainer.prototype._renderWebPart = function (domElement) {
        var _this = this;
        return this._webPartManager.loadWebPart({
            domElement: domElement,
            instanceId: this._props.webPartInstanceId,
            manifest: this._props.manifest,
            displayMode: this._props.displayMode || (this._props.openPropertyPane ? sp_core_library_["DisplayMode"].Edit : sp_core_library_["DisplayMode"].Read),
            webPartData: this._props.webPartData,
            addedFromPersistedData: true,
            totalWebparts: 1,
            formFactor: this._props.formFactor,
            webpartLoadExtraLogInfo: {
                pageLayoutType: 'MinimalWebPartContainer',
                columnType: '0',
                displayMode: 'Read',
                webPartContainer: 'MinimalWebPartContainer'
            }
        })
            .catch(function (error) {
            _this._webPartManager.renderError(domElement, error);
        });
    };
    MinimalWebPartContainer.prototype._validateProps = function (props) {
        sp_core_library_["Validate"].isNotNullOrUndefined(props, 'props');
        sp_core_library_["Validate"].isNotNullOrUndefined(props.webPartData, 'props.webPartData');
        sp_core_library_["Validate"].isNotNullOrUndefined(props.webPartInstanceId, 'props.webPartInstanceId');
        sp_core_library_["Validate"].isNotNullOrUndefined(props.manifest, 'props.manifest');
        sp_core_library_["Validate"].isNotNullOrUndefined(props.serviceScope, 'props.applicationContext.serviceScope');
    };
    return MinimalWebPartContainer;
}());
/* harmony default export */ var container_MinimalWebPartContainer = (MinimalWebPartContainer_MinimalWebPartContainer);

// CONCATENATED MODULE: ./lib/index.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "BaseWebPartContext", function() { return core_BaseWebPartContext; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "WebPartContext", function() { return core_WebPartContext; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "WebPartIsolationLevel", function() { return WebPartIsolationLevel; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "BaseWebPart", function() { return core_BaseWebPart; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "BaseClientSideWebPart", function() { return core_BaseClientSideWebPart; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ClientSideWebPartManager", function() { return core_ClientSideWebPartManager; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ClientSideWebPartManagerFactory", function() { return core_ClientSideWebPartManagerFactory; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "WebPartDataConverter", function() { return core_WebPartDataConverter; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneCustomField", function() { return SPPropertyPane_PropertyPaneCustomField; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneButton", function() { return SPPropertyPane_PropertyPaneButton; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneCheckbox", function() { return SPPropertyPane_PropertyPaneCheckbox; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneChoiceGroup", function() { return SPPropertyPane_PropertyPaneChoiceGroup; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneDropdown", function() { return SPPropertyPane_PropertyPaneDropdown; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneDynamicField", function() { return SPPropertyPane_PropertyPaneDynamicField; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneDynamicFieldSet", function() { return SPPropertyPane_PropertyPaneDynamicFieldSet; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneHorizontalRule", function() { return SPPropertyPane_PropertyPaneHorizontalRule; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneLabel", function() { return SPPropertyPane_PropertyPaneLabel; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneLink", function() { return SPPropertyPane_PropertyPaneLink; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneSlider", function() { return SPPropertyPane_PropertyPaneSlider; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneTextField", function() { return SPPropertyPane_PropertyPaneTextField; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneToggle", function() { return SPPropertyPane_PropertyPaneToggle; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneDynamicTextField", function() { return SPPropertyPane_PropertyPaneDynamicTextField; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneFieldType", function() { return SPPropertyPane_PropertyPaneFieldType; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneButtonType", function() { return PropertyPaneButtonType; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "PropertyPaneDropdownOptionType", function() { return PropertyPaneDropdownOptionType; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "_MinimalWebPartContainer", function() { return container_MinimalWebPartContainer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "_PropertyPaneLoader", function() { return lib_PropertyPaneLoader; });













/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_10__;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(12);
var loader = __webpack_require__(8);

if(typeof content === "string") content = [[module.i, content]];

// add the styles to the DOM
for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1], true);

if(content.locals) module.exports = content.locals;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(7)(false);
// imports


// module
exports.push([module.i, ".errorBox_ceffbba5{padding:12px 0;overflow:hidden;position:relative;top:0;left:0;right:0;z-index:1;display:inline-block}[dir=ltr] .errorBox_ceffbba5{text-align:left}[dir=rtl] .errorBox_ceffbba5{text-align:right}.errorBoxText_ceffbba5{position:relative;display:inline-block;white-space:pre-wrap;color:#666;font-weight:700}.detailsButton_ceffbba5{text-transform:uppercase;color:#0078d4;border:none;background:0 0;margin-top:20px}[dir=ltr] .detailsButton_ceffbba5{padding-left:0}[dir=rtl] .detailsButton_ceffbba5{padding-right:0}.somethingWentWrongText_ceffbba5{font-weight:400;color:#0078d4}.siteAdminText_ceffbba5{font-weight:700;color:#0078d4}.screenReaderOnly_ceffbba5{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}", ""]);

// exports


/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_13__;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_14__;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_15__;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(17);
var loader = __webpack_require__(8);

if(typeof content === "string") content = [[module.i, content]];

// add the styles to the DOM
for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1], true);

if(content.locals) module.exports = content.locals;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(7)(false);
// imports


// module
exports.push([module.i, "@-webkit-keyframes spin_f8aa9bb4{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}to{-webkit-transform:rotate(315deg);transform:rotate(315deg)}}@keyframes spin_f8aa9bb4{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}to{-webkit-transform:rotate(315deg);transform:rotate(315deg)}}.spinnerContainer_f8aa9bb4{position:relative;width:100%;margin:164px 0}.spinner_f8aa9bb4{position:relative;width:20px;height:20px;margin:auto}.spinnerRing_f8aa9bb4,.spinnerSlice_f8aa9bb4{position:absolute}.spinnerRing_f8aa9bb4{z-index:0;color:\"[theme:themeLight, default: #c7e0f4]\"}.spinnerSlice_f8aa9bb4{z-index:10;color:\"[theme:themePrimary, default: #0078d4]\";-webkit-animation:spin_f8aa9bb4 1.5s infinite;animation:spin_f8aa9bb4 1.5s infinite;-webkit-animation-timing-function:easeInOutCirc;animation-timing-function:easeInOutCirc}.spinnerLoadingMessage_f8aa9bb4{margin-top:10px;text-align:center;color:\"[theme:themePrimary, default: #0078d4]\"}.spinnerAccessibilityMessage_f8aa9bb4{position:absolute;width:1px;height:1px;margin:-1px;padding:0;border-width:0;overflow:hidden}", ""]);

// exports


/***/ })
/******/ ])});;
//# sourceMappingURL=sp-webpart-base.js.map