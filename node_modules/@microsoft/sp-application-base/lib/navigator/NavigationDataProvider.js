import { Validate } from '@microsoft/sp-core-library';
import { SPHttpClient } from '@microsoft/sp-http';
import { _SPLoaderFlights } from '@microsoft/sp-loader';
var NavigationDataProvider =  (function () {
    function NavigationDataProvider(serviceScope, validator) {
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        Validate.isNotNullOrUndefined(validator, 'validator');
        this._spHttpClient = serviceScope.consume(SPHttpClient.serviceKey);
        this._dataValidator = validator;
    }
    NavigationDataProvider.prototype.getData = function (url, props) {
        Validate.isNonemptyString(url, 'url');
        return _SPLoaderFlights._useNewBootSequence() ?
            this._getStore().then(function (store) { return store.getData(url, props); }) :
            Promise.resolve({
                preloadedData: this._fetchData(url)
            });
    };
    NavigationDataProvider.prototype.invalidate = function (url) {
        return this._getStore().then(function (store) {
            store.remove(url);
        });
    };
    NavigationDataProvider.prototype._getStore = function () {
        var _this = this;
        if (this._navigationStore) {
            return Promise.resolve(this._navigationStore);
        }
        return this._navigationStorePromise || (this._navigationStorePromise = import('./NavigationDataStore' )
            .then(function (dataStore) {
            _this._navigationStore = new dataStore.default(NavigationDataProvider.storeKey, function (url, headers) {
                return _this._fetchData(url, headers);
            }, _this._dataValidator);
            return _this._navigationStore;
        }));
    };
    NavigationDataProvider.prototype._fetchData = function (url, requestHeaders) {
        return this._spHttpClient.get(url + (url.indexOf('?') === -1 ? '?' : '&') + 'as=json', SPHttpClient.configurations.v1, requestHeaders ? { headers: requestHeaders } : undefined).then(function (response) {
            if (!response.ok) {
                throw new Error(response.statusMessage);
            }
            else {
                return response.json();
            }
        });
    };
    NavigationDataProvider.storeKey = 'sp-application-base:NavigationDataStore';
    return NavigationDataProvider;
}());
export default NavigationDataProvider;
