import { _LogSource, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import PlaceholderManager from './PlaceholderManager';
var PlaceholderProvider =  (function () {
    function PlaceholderProvider(serviceScope, sequence) {
        var _this = this;
        this._placeholderContents = [];
        this._isDisposed = false;
        this._sequence = sequence;
        serviceScope.whenFinished(function () {
            _this._placeholderManager = serviceScope.consume(PlaceholderManager.serviceKey);
        });
    }
    PlaceholderProvider.prototype.dispose = function () {
        if (!this._isDisposed) {
            this._placeholderContents.forEach(function (content) { return content.dispose(); });
            delete this._placeholderContents;
            delete this._placeholderManager;
        }
        this._isDisposed = true;
    };
    Object.defineProperty(PlaceholderProvider.prototype, "isDisposed", {
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderProvider.prototype.tryCreateContent = function (name, options) {
        _TraceLogger.logVerbose(PlaceholderProvider._logSource, "Creating placeholder content in placeholder \"" + name + "\"");
        var qosMonitor = new _QosMonitor('Placeholder.tryCreateContent');
        if (this._placeholderManager.changedEvent._listenerCount() === 0) {
            console.log('tryCreateContent was called, but PlaceholderProvider.changedEvent has no handlers. ' +
                'This is likely to cause an error in the future.  You should probably be calling ' +
                'tryCreateContent in the PlaceholderProvider.changedEvent callback.');
        }
        if (!this._placeholderManager.isEnabled || !this._placeholderManager.placeholders.has(name)) {
            var error = new Error("No placeholder found with the name '" + name + "'");
            qosMonitor.writeExpectedFailure('PlaceholderNotFound', error, { name: name });
            return undefined;
        }
        var placeholder = this._placeholderManager.placeholders.get(name);
        if (!placeholder) {
            var error = new Error('Placeholder dictionary has only the key but not the value for the placeholder');
            qosMonitor.writeUnexpectedFailure('NoValueInPlaceholdersMap', error, { name: name });
            return undefined;
        }
        var content;
        try {
            content = placeholder.createPlaceholderContent(this._sequence, options);
        }
        catch (error) {
            qosMonitor.writeUnexpectedFailure('CreateContentFailed', error, { name: name });
            return undefined;
        }
        if (content) {
            this._placeholderContents.push(content);
            qosMonitor.writeSuccess({ name: name });
        }
        else {
            var error = new Error('Placeholder could not create new content');
            qosMonitor.writeUnexpectedFailure('CreateContentUndefined', error, { name: name });
        }
        return content;
    };
    Object.defineProperty(PlaceholderProvider.prototype, "placeholderNames", {
        get: function () {
            if (!this._placeholderManager.isEnabled) {
                return [];
            }
            var array = [];
            this._placeholderManager.placeholders.forEach(function (value, key) { return array.push(key); });
            return array;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaceholderProvider.prototype, "changedEvent", {
        get: function () {
            return this._placeholderManager.changedEvent;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderProvider._logSource = _LogSource.create('PlaceholderProvider');
    return PlaceholderProvider;
}());
export default PlaceholderProvider;
