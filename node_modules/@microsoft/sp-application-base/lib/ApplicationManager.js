import { Environment, EnvironmentType, Guid, Text, Validate, _SPKillSwitch } from '@microsoft/sp-core-library';
import { _LogSource, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import { SPComponentLoader, _SPLoaderFlights } from '@microsoft/sp-loader';
import { _PerformanceLogger } from '@ms/sp-telemetry';
import { ApplicationLoadType } from './ApplicationLoadType';
import Navigator from './navigator/Navigator';
import SPPageChrome from './pageChrome/SPPageChrome';
import strings from './SPApplicationBase.resx';
var startQosScenarioName = 'ApplicationManager.start';
var initializeQosScenarioName = 'ApplicationManager.initialize';
var applicationFailedToLoadFailure = 'ApplicationFailedToLoad';
var shellStartFailure = 'SPShell.Start';
var ApplicationManager =  (function () {
    function ApplicationManager(serviceScope, navigator) {
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._serviceScope = serviceScope;
        this._navigator = navigator || new Navigator(this._serviceScope, this);
    }
    ApplicationManager._isChromelessApplication = function (componentId) {
        return Environment.type === EnvironmentType.ClassicSharePoint ||
            componentId === 'b1ab4aaa-f779-405c-8683-d3a750b5d18d';
    };
    Object.defineProperty(ApplicationManager.prototype, "currentApplicationId", {
        get: function () {
            var appComponentId = this._currentApplication && this._currentApplication.componentId;
            return appComponentId ? Guid.parse(appComponentId) : Guid.empty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationManager.prototype, "currentApplication", {
        get: function () {
            Validate.isNotNullOrUndefined(this._currentApplication, 'currentApplication');
            return this._currentApplication;
        },
        enumerable: true,
        configurable: true
    });
    ApplicationManager.prototype.startApplication = function (preloadedData, pageChrome) {
        var _this = this;
        try {
            Validate.isNonemptyString(preloadedData.clientSideApplicationId, 'preloadedData.clientSideApplicationId');
        }
        catch (error) {
            return Promise.reject(error);
        }
        var qosMonitor = new _QosMonitor(startQosScenarioName);
        function error(message, failureId) {
            var err = new Error(message);
            _TraceLogger.logError(ApplicationManager._logSource, err);
            qosMonitor.writeUnexpectedFailure(failureId, err);
            throw err;
        }
        var applicationId = preloadedData.clientSideApplicationId;
        if (!this._isChromelessApplication(applicationId) && !pageChrome) {
            pageChrome = new SPPageChrome(this._serviceScope);
        }
        var appManifest = SPComponentLoader.tryGetManifestById(applicationId);
        var appComponent = !!appManifest ? SPComponentLoader.tryGetLoadedComponent(appManifest) : undefined;
        if (appComponent) {
            if (!_SPLoaderFlights._useNewBootSequence()) {
                this._navigator.navigateToPreloadedData(preloadedData);
            }
            return this._initializeApplicationWithTelemetry(appComponent, applicationId, pageChrome, qosMonitor, error).then(function (app) {
                if (!_SPLoaderFlights._useNewBootSequence()) {
                    _this._navigator._loadApplicationCustomizers(preloadedData);
                }
                return app;
            });
        }
        else {
            var appComponentPromise = this._loadApplicationComponent(applicationId, error);
            if (!_SPLoaderFlights._useNewBootSequence()) {
                this._navigator.navigateToPreloadedData(preloadedData);
            }
            return appComponentPromise.then(function (application) {
                return _this._initializeApplicationWithTelemetry(application, applicationId, pageChrome, qosMonitor, error).then(function (app) {
                    if (!_SPLoaderFlights._useNewBootSequence()) {
                        _this._navigator._loadApplicationCustomizers(preloadedData);
                    }
                    return app;
                });
            });
        }
    };
    Object.defineProperty(ApplicationManager.prototype, "_applicationLoadType", {
        get: function () {
            return this._previousApplication ?
                ApplicationLoadType.InPlaceNavigation :
                ApplicationLoadType.FullPageLoad;
        },
        enumerable: true,
        configurable: true
    });
    ApplicationManager.prototype._shouldCreateNewAppInstance = function () {
        return !_SPKillSwitch.isActivated(Guid.parse('b37f208b-f531-4e75-924d-2ef4324d3f6b'), '12/06/2018', 'CreateNewAppInstance');
    };
    ApplicationManager.prototype._initializeApplicationWithTelemetry = function (application, applicationId, pageChrome, qosMonitor, error) {
        _PerformanceLogger.markApplicationStart();
        return this._initializeApplication(this._shouldCreateNewAppInstance() && application.application ?
            new application.application() :
            application.default, applicationId, pageChrome)
            .then(function (result) {
            qosMonitor.writeSuccess();
            return result;
        }).catch(function (e) {
            return error(Text.format(strings.applicationFailedToInitializeError, e), shellStartFailure);
        });
    };
    ApplicationManager.prototype._loadApplicationComponent = function (applicationId, error) {
        return SPComponentLoader.loadComponentById(applicationId)
            .catch(function (e) {
            return error(Text.format(strings.applicationFailedToLoadWithMessageError, applicationId, e.message), applicationFailedToLoadFailure);
        });
    };
    ApplicationManager.prototype._isChromelessApplication = function (applicationId) {
        return ApplicationManager._isChromelessApplication(applicationId);
    };
    ApplicationManager.prototype._initializeApplication = function (application, applicationId, pageChrome) {
        var _this = this;
        if (application['__type'] !== 'BaseApplication') { 
            return Promise.reject(new Error('The application is not a subclass of BaseApplication'));
        }
        var qosMonitor = new _QosMonitor(initializeQosScenarioName);
        var applicationManifest = SPComponentLoader.tryGetManifestById(applicationId);
        var qosApplicationData = {
            alias: application.alias || applicationManifest.alias,
            isInternal: applicationManifest.isInternal,
            manifestId: applicationManifest.id
        };
        if (_SPLoaderFlights._useNewBootSequence() && this._currentApplication) {
            this._previousApplication = this._currentApplication;
        }
        this._currentApplication = application;
        if (this._previousApplication) {
            this._previousApplication._unload();
        }
        try {
            return this._currentApplication._load({
                manifest: applicationManifest,
                parentServiceScope: this._serviceScope,
                navigator: this._navigator,
                instanceId: applicationManifest.id,
                loggingTag: "Application." + applicationManifest.id,
                chrome: pageChrome,
                loadType: this._applicationLoadType
            }).then(function () {
                if (_this._previousApplication) {
                    _this._previousApplication.dispose();
                    if (_this._shouldCreateNewAppInstance()) {
                        _this._previousApplication = undefined;
                    }
                }
                if (!_this._isChromelessApplication(applicationId)) {
                    _this._currentApplication._loadTheme();
                    _this._currentApplication._render();
                }
                qosMonitor.writeSuccess(qosApplicationData);
                return application;
            }).catch(function (e) {
                qosMonitor.writeUnexpectedFailure('AsyncError', e, qosApplicationData);
                return Promise.reject(e);
            });
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure('GeneralError', e, qosApplicationData);
            return Promise.reject(e);
        }
    };
    ApplicationManager._logSource = _LogSource.create('ApplicationManager');
    return ApplicationManager;
}());
export default ApplicationManager;
