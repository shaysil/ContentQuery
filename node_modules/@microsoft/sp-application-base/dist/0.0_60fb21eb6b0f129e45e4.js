webpackJsonp4df9bb86_ab0a_4aab_ab5f_48bf167048fb_1_8_0([0],{

/***/ 123:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__microsoft_sp_diagnostics__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__microsoft_sp_diagnostics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__microsoft_sp_diagnostics__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__microsoft_sp_core_library__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__microsoft_sp_core_library___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__microsoft_sp_core_library__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__microsoft_sp_lodash_subset__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__microsoft_sp_lodash_subset___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__microsoft_sp_lodash_subset__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_Killswitches__ = __webpack_require__(23);




var fetchAppDataQosScenarioName = 'NavigationDataStore.fetchAppData';
var NavigationDataStore =  (function () {
    function NavigationDataStore(id, executor, validator, refreshThresholdMs, maxStoreSize) {
        __WEBPACK_IMPORTED_MODULE_1__microsoft_sp_core_library__["Validate"].isNonemptyString(id, 'id');
        __WEBPACK_IMPORTED_MODULE_1__microsoft_sp_core_library__["Validate"].isNotNullOrUndefined(executor, 'executor');
        __WEBPACK_IMPORTED_MODULE_1__microsoft_sp_core_library__["Validate"].isNotNullOrUndefined(validator, 'validator');
        this._id = id;
        this._executor = executor;
        this._dataValidator = validator;
        this._refreshThreshold = refreshThresholdMs || NavigationDataStore.refreshThresholdMs;
        this._maxStoreSize = maxStoreSize || NavigationDataStore.maxStoreSize;
        var storeItems = NavigationDataStore._initStore(id, this._maxStoreSize);
        this._buildMinHeap(storeItems);
    }
    NavigationDataStore._leftChild = function (index) {
        return 2 * index + 1;
    };
    NavigationDataStore._rightChild = function (index) {
        return 2 * index + 2;
    };
    NavigationDataStore._parent = function (index) {
        return Math.floor((index - 1) / 2);
    };
    NavigationDataStore._swap = function (items, leftIdx, rightIdx) {
        var temp = items[rightIdx];
        items[rightIdx] = items[leftIdx];
        items[leftIdx] = temp;
    };
    NavigationDataStore._initStore = function (id, maxSize) {
        var items = [];
        try {
            var serializedEntry = sessionStorage.getItem(id);
            if (serializedEntry && serializedEntry.length > 0) {
                var entries = JSON.parse(serializedEntry);
                if (Array.isArray(entries) && entries.length > 0) {
                    items = entries;
                    if (items.length > maxSize) {
                        items.splice(maxSize);
                    }
                }
            }
        }
        catch (e) {
        }
        return items;
    };
    NavigationDataStore._updateStore = function (id, items) {
        try {
            sessionStorage.setItem(id, JSON.stringify(items));
        }
        catch (e) {
        }
    };
    NavigationDataStore._generatePreloadHeaders = function (props) {
        var headers = new Headers();
        if (__WEBPACK_IMPORTED_MODULE_3__common_Killswitches__["a" /* Killswitches */].usePrefetchHeader() && props && props.isPrefetchRequest) {
            headers.append('X-RequestPrefetchLink', '1');
        }
        return headers;
    };
    NavigationDataStore._generatePrefetchHeaders = function (props) {
        var headers = new Headers();
        headers.append('X-RequestPrefetchData', '1');
        if (__WEBPACK_IMPORTED_MODULE_3__common_Killswitches__["a" /* Killswitches */].usePrefetchHeader() && props && props.isPrefetchRequest) {
            headers.append('X-RequestPrefetchLink', '1');
        }
        return headers;
    };
    Object.defineProperty(NavigationDataStore.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationDataStore.prototype, "items", {
        get: function () {
            return this._store.items;
        },
        enumerable: true,
        configurable: true
    });
    NavigationDataStore.prototype.getData = function (url, props) {
        __WEBPACK_IMPORTED_MODULE_1__microsoft_sp_core_library__["Validate"].isNonemptyString(url, 'key');
        var cachedItem = undefined;
        var cachedItemIdx = -1;
        if (props && props.enableCache) {
            var cachedEntry = this._findItem(url);
            cachedItem = cachedEntry.item;
            cachedItemIdx = cachedEntry.index;
            if (cachedItem && cachedItem.fetchedTimeStamp) {
                var threshold = Date.now() - this._refreshThreshold;
                var hasExpired = cachedItem.fetchedTimeStamp <= threshold;
                if (!hasExpired) {
                    var preloadedDataPromise = Promise.resolve(Object(__WEBPACK_IMPORTED_MODULE_2__microsoft_sp_lodash_subset__["cloneDeep"])(cachedItem.preloadedData));
                    var prefetchedDataPromise = props.enableDataPrefetch ?
                        Promise.resolve(cachedItem.prefetchedData ? Object(__WEBPACK_IMPORTED_MODULE_2__microsoft_sp_lodash_subset__["cloneDeep"])(cachedItem.prefetchedData) : undefined) :
                        undefined;
                    return Promise.resolve({
                        preloadedData: preloadedDataPromise,
                        prefetchedData: prefetchedDataPromise
                    });
                }
            }
        }
        return this._fetchData(url, props, cachedItem, cachedItemIdx);
    };
    NavigationDataStore.prototype.remove = function (url) {
        var cachedEntry = this._findItem(url);
        if (cachedEntry) {
            this._store.items.splice(cachedEntry.index, 1);
            this._buildMinHeap(this._store.items);
            NavigationDataStore._updateStore(this._id, this._store.items);
        }
    };
    NavigationDataStore.prototype._fetchData = function (url, props, cachedItem, cachedItemIdx) {
        var _this = this;
        var preloadedDataPromise = this._executor(url, NavigationDataStore._generatePreloadHeaders(props))
            .then(function (navData) {
            _this._dataValidator(navData);
            if (props && props.enableCache) {
                if (cachedItem) {
                    cachedItem.fetchedTimeStamp = Date.now();
                    cachedItem.preloadedData = navData;
                    _this._heapify(cachedItemIdx);
                }
                else {
                    var storeItem = {
                        preloadedData: navData,
                        fetchedTimeStamp: Date.now(),
                        url: url
                    };
                    _this._insert(storeItem);
                }
                NavigationDataStore._updateStore(_this._id, _this._store.items);
            }
            return Object(__WEBPACK_IMPORTED_MODULE_2__microsoft_sp_lodash_subset__["cloneDeep"])(navData);
        });
        var prefetchedDataPromise = undefined; 
        if (props && props.enableDataPrefetch) {
            var qosMonitor_1 = new __WEBPACK_IMPORTED_MODULE_0__microsoft_sp_diagnostics__["_QosMonitor"](fetchAppDataQosScenarioName);
            prefetchedDataPromise =
                this._executor(url, NavigationDataStore._generatePrefetchHeaders(props)).then(function (appData) {
                    var storeEntry = props && props.enableCache ?
                        _this._findItem(url) :
                        undefined;
                    if (storeEntry && storeEntry.item) {
                        storeEntry.item.prefetchedData = appData;
                        NavigationDataStore._updateStore(_this._id, _this._store.items);
                    }
                    qosMonitor_1.writeSuccess();
                    return Object(__WEBPACK_IMPORTED_MODULE_2__microsoft_sp_lodash_subset__["cloneDeep"])(appData);
                }).catch(function (e) {
                    qosMonitor_1.writeUnexpectedFailure(e);
                    throw e;
                });
        }
        return Promise.resolve({
            preloadedData: preloadedDataPromise,
            prefetchedData: prefetchedDataPromise
        });
    };
    NavigationDataStore.prototype._heapify = function (index) {
        var leftIdx = NavigationDataStore._leftChild(index);
        var rightIdx = NavigationDataStore._rightChild(index);
        var smallestIdx = undefined;
        if (leftIdx < this._store.size &&
            this._store.items[leftIdx].fetchedTimeStamp < this._store.items[index].fetchedTimeStamp) {
            smallestIdx = leftIdx;
        }
        else {
            smallestIdx = index;
        }
        if (rightIdx < this._store.size &&
            this._store.items[rightIdx].fetchedTimeStamp < this._store.items[smallestIdx].fetchedTimeStamp) {
            smallestIdx = rightIdx;
        }
        if (smallestIdx !== index) {
            NavigationDataStore._swap(this._store.items, index, smallestIdx);
            this._heapify(smallestIdx);
        }
    };
    NavigationDataStore.prototype._extractMin = function () {
        if (this._store.size < 1) {
            return undefined;
        }
        var minItem = this._store.items[0];
        this._store.items[0] = this._store.items[this._store.size - 1];
        this._store.size -= 1;
        this._heapify(0);
        this._store.items.splice(this._store.size);
        return minItem;
    };
    NavigationDataStore.prototype._reduceKey = function (index, item) {
        this._store.items[index] = item;
        while (index >= 0 && this._store.items[NavigationDataStore._parent(index)] < this._store.items[index]) {
            NavigationDataStore._swap(this._store.items, index, NavigationDataStore._parent(index));
            index = NavigationDataStore._parent(index);
        }
    };
    NavigationDataStore.prototype._insert = function (item) {
        if (this._store.size === this._maxStoreSize) {
            this._extractMin();
        }
        this._store.size += 1;
        this._reduceKey(this._store.size - 1, item);
    };
    NavigationDataStore.prototype._buildMinHeap = function (items) {
        this._store = {
            items: items,
            size: items.length
        };
        for (var idx = Math.floor(this._store.size / 2); idx >= 0; idx--) {
            this._heapify(idx);
        }
    };
    NavigationDataStore.prototype._findItem = function (url) {
        var cachedItem = undefined;
        var cachedItemIdx = -1;
        for (cachedItemIdx = 0; cachedItemIdx < this._store.size; cachedItemIdx++) {
            var item = this._store.items[cachedItemIdx];
            if (item && item.url === url) {
                cachedItem = item;
                break;
            }
        }
        return {
            item: cachedItem,
            index: cachedItemIdx
        };
    };
    NavigationDataStore.refreshThresholdMs = 30 * 60 * 1000; 
    NavigationDataStore.maxStoreSize = 7;
    return NavigationDataStore;
}());
/* harmony default export */ __webpack_exports__["default"] = (NavigationDataStore);


/***/ })

});
//# sourceMappingURL=0.0_60fb21eb6b0f129e45e4.js.map