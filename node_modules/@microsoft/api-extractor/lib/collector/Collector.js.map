{"version":3,"file":"Collector.js","sourceRoot":"","sources":["../../src/collector/Collector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport * as path from 'path';\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\nimport {\r\n  PackageJsonLookup,\r\n  IPackageJson,\r\n  Sort,\r\n  InternalError\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { ILogger } from '../api/ILogger';\r\nimport {\r\n  IExtractorPoliciesConfig,\r\n  IExtractorValidationRulesConfig,\r\n  ExtractorValidationRulePolicy\r\n} from '../api/IExtractorConfig';\r\nimport { TypeScriptMessageFormatter } from '../analyzer/TypeScriptMessageFormatter';\r\nimport { CollectorEntity } from './CollectorEntity';\r\nimport { AstSymbolTable } from '../analyzer/AstSymbolTable';\r\nimport { AstModule, AstModuleExportInfo } from '../analyzer/AstModule';\r\nimport { AstSymbol } from '../analyzer/AstSymbol';\r\nimport { ReleaseTag } from '../aedoc/ReleaseTag';\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\nimport { TypeScriptHelpers } from '../analyzer/TypeScriptHelpers';\r\nimport { CollectorPackage } from './CollectorPackage';\r\nimport { PackageDocComment } from '../aedoc/PackageDocComment';\r\nimport { DeclarationMetadata } from './DeclarationMetadata';\r\nimport { SymbolMetadata } from './SymbolMetadata';\r\nimport { TypeScriptInternals } from '../analyzer/TypeScriptInternals';\r\n\r\n/**\r\n * Options for Collector constructor.\r\n */\r\nexport interface ICollectorOptions {\r\n  /**\r\n   * Configuration for the TypeScript compiler.  The most important options to set are:\r\n   *\r\n   * - target: ts.ScriptTarget.ES5\r\n   * - module: ts.ModuleKind.CommonJS\r\n   * - moduleResolution: ts.ModuleResolutionKind.NodeJs\r\n   * - rootDir: inputFolder\r\n   */\r\n  program: ts.Program;\r\n\r\n  /**\r\n   * The entry point for the project.  This should correspond to the \"main\" field\r\n   * from NPM's package.json file.  If it is a relative path, it will be relative to\r\n   * the project folder described by IExtractorAnalyzeOptions.compilerOptions.\r\n   */\r\n  entryPointFile: string;\r\n\r\n  logger: ILogger;\r\n\r\n  policies: IExtractorPoliciesConfig;\r\n\r\n  validationRules: IExtractorValidationRulesConfig;\r\n}\r\n\r\n/**\r\n * The main entry point for the \"api-extractor\" utility.  The Analyzer object invokes the\r\n * TypeScript Compiler API to analyze a project, and constructs the AstItem\r\n * abstract syntax tree.\r\n */\r\nexport class Collector {\r\n  public readonly program: ts.Program;\r\n  public readonly typeChecker: ts.TypeChecker;\r\n  public readonly astSymbolTable: AstSymbolTable;\r\n\r\n  public readonly packageJsonLookup: PackageJsonLookup;\r\n\r\n  public readonly policies: IExtractorPoliciesConfig;\r\n  public readonly validationRules: IExtractorValidationRulesConfig;\r\n\r\n  public readonly logger: ILogger;\r\n\r\n  public readonly package: CollectorPackage;\r\n\r\n  private readonly _program: ts.Program;\r\n\r\n  private readonly _tsdocParser: tsdoc.TSDocParser;\r\n\r\n  private _astEntryPoint: AstModule | undefined;\r\n\r\n  private readonly _entities: CollectorEntity[] = [];\r\n  private readonly _entitiesByAstSymbol: Map<AstSymbol, CollectorEntity> = new Map<AstSymbol, CollectorEntity>();\r\n  private readonly _entitiesBySymbol: Map<ts.Symbol, CollectorEntity> = new Map<ts.Symbol, CollectorEntity>();\r\n\r\n  private readonly _starExportedExternalModulePaths: string[] = [];\r\n\r\n  private readonly _dtsTypeReferenceDirectives: Set<string> = new Set<string>();\r\n  private readonly _dtsLibReferenceDirectives: Set<string> = new Set<string>();\r\n\r\n  constructor(options: ICollectorOptions) {\r\n    this.packageJsonLookup = new PackageJsonLookup();\r\n\r\n    this.policies = options.policies;\r\n    this.validationRules = options.validationRules;\r\n\r\n    this.logger = options.logger;\r\n    this._program = options.program;\r\n\r\n    const packageFolder: string | undefined = this.packageJsonLookup.tryGetPackageFolderFor(options.entryPointFile);\r\n    if (!packageFolder) {\r\n      throw new Error('Unable to find a package.json for entry point: ' + options.entryPointFile);\r\n    }\r\n\r\n    const packageJson: IPackageJson = this.packageJsonLookup.tryLoadPackageJsonFor(packageFolder)!;\r\n\r\n    const entryPointSourceFile: ts.SourceFile | undefined = options.program.getSourceFile(options.entryPointFile);\r\n    if (!entryPointSourceFile) {\r\n      throw new Error('Unable to load file: ' + options.entryPointFile);\r\n    }\r\n\r\n    this.package = new CollectorPackage({\r\n      packageFolder,\r\n      packageJson,\r\n      entryPointSourceFile\r\n    });\r\n\r\n    this.program = options.program;\r\n    this.typeChecker = options.program.getTypeChecker();\r\n\r\n    this._tsdocParser = new tsdoc.TSDocParser();\r\n    this.astSymbolTable = new AstSymbolTable(this.program, this.typeChecker, this.packageJsonLookup, this.logger);\r\n  }\r\n\r\n  /**\r\n   * Returns a list of names (e.g. \"example-library\") that should appear in a reference like this:\r\n   *\r\n   * ```\r\n   * /// <reference types=\"example-library\" />\r\n   * ```\r\n   */\r\n  public get dtsTypeReferenceDirectives(): ReadonlySet<string> {\r\n    return this._dtsTypeReferenceDirectives;\r\n  }\r\n\r\n  /**\r\n   * A list of names (e.g. \"runtime-library\") that should appear in a reference like this:\r\n   *\r\n   * ```\r\n   * /// <reference lib=\"runtime-library\" />\r\n   * ```\r\n   */\r\n  public get dtsLibReferenceDirectives(): ReadonlySet<string> {\r\n    return this._dtsLibReferenceDirectives;\r\n  }\r\n\r\n  public get entities(): ReadonlyArray<CollectorEntity> {\r\n    return this._entities;\r\n  }\r\n\r\n  /**\r\n   * A list of module specifiers (e.g. `\"@microsoft/node-core-library/lib/FileSystem\"`) that should be emitted\r\n   * as star exports (e.g. `export * from \"@microsoft/node-core-library/lib/FileSystem\"`).\r\n   */\r\n  public get starExportedExternalModulePaths(): ReadonlyArray<string> {\r\n    return this._starExportedExternalModulePaths;\r\n  }\r\n\r\n  /**\r\n   * Perform the analysis.\r\n   */\r\n  public analyze(): void {\r\n    if (this._astEntryPoint) {\r\n      throw new Error('DtsRollupGenerator.analyze() was already called');\r\n    }\r\n\r\n    // This runs a full type analysis, and then augments the Abstract Syntax Tree (i.e. declarations)\r\n    // with semantic information (i.e. symbols).  The \"diagnostics\" are a subset of the everyday\r\n    // compile errors that would result from a full compilation.\r\n    for (const diagnostic of this._program.getSemanticDiagnostics()) {\r\n      const errorText: string = TypeScriptMessageFormatter.format(diagnostic.messageText);\r\n      this.reportError(`TypeScript: ${errorText}`, diagnostic.file, diagnostic.start);\r\n    }\r\n\r\n    // Build the entry point\r\n    const astEntryPoint: AstModule = this.astSymbolTable.fetchEntryPointModule(\r\n      this.package.entryPointSourceFile);\r\n    this._astEntryPoint = astEntryPoint;\r\n\r\n    const packageDocCommentTextRange: ts.TextRange | undefined = PackageDocComment.tryFindInSourceFile(\r\n      this.package.entryPointSourceFile, this);\r\n\r\n    if (packageDocCommentTextRange) {\r\n      const range: tsdoc.TextRange = tsdoc.TextRange.fromStringRange(this.package.entryPointSourceFile.text,\r\n        packageDocCommentTextRange.pos, packageDocCommentTextRange.end);\r\n\r\n      this.package.tsdocParserContext = this._tsdocParser.parseRange(range);\r\n      this.package.tsdocComment = this.package.tsdocParserContext!.docComment;\r\n    }\r\n\r\n    const exportedAstSymbols: AstSymbol[] = [];\r\n\r\n    // Create a CollectorEntity for each top-level export\r\n\r\n    const astModuleExportInfo: AstModuleExportInfo = this.astSymbolTable.fetchAstModuleExportInfo(astEntryPoint);\r\n    for (const [exportName, astSymbol] of astModuleExportInfo.exportedLocalSymbols) {\r\n      this._createEntityForSymbol(astSymbol, exportName);\r\n\r\n      exportedAstSymbols.push(astSymbol);\r\n    }\r\n\r\n    // Create a CollectorEntity for each indirectly referenced export.\r\n    // Note that we do this *after* the above loop, so that references to exported AstSymbols\r\n    // are encountered first as exports.\r\n    const alreadySeenAstSymbols: Set<AstSymbol> = new Set<AstSymbol>();\r\n    for (const exportedAstSymbol of exportedAstSymbols) {\r\n      this._createEntityForIndirectReferences(exportedAstSymbol, alreadySeenAstSymbols);\r\n\r\n      this.fetchMetadata(exportedAstSymbol);\r\n    }\r\n\r\n    this._makeUniqueNames();\r\n\r\n    for (const starExportedExternalModule of astModuleExportInfo.starExportedExternalModules) {\r\n      if (starExportedExternalModule.externalModulePath !== undefined) {\r\n        this._starExportedExternalModulePaths.push(starExportedExternalModule.externalModulePath);\r\n      }\r\n    }\r\n\r\n    Sort.sortBy(this._entities, x => x.getSortKey());\r\n    Sort.sortSet(this._dtsTypeReferenceDirectives);\r\n    Sort.sortSet(this._dtsLibReferenceDirectives);\r\n    this._starExportedExternalModulePaths.sort();\r\n  }\r\n\r\n  public tryGetEntityBySymbol(symbol: ts.Symbol): CollectorEntity | undefined {\r\n    return this._entitiesBySymbol.get(symbol);\r\n  }\r\n\r\n  public fetchMetadata(astSymbol: AstSymbol): SymbolMetadata;\r\n  public fetchMetadata(astDeclaration: AstDeclaration): DeclarationMetadata;\r\n  public fetchMetadata(symbolOrDeclaration: AstSymbol | AstDeclaration): SymbolMetadata | DeclarationMetadata {\r\n    if (symbolOrDeclaration.metadata === undefined) {\r\n      const astSymbol: AstSymbol = symbolOrDeclaration instanceof AstSymbol\r\n        ? symbolOrDeclaration : symbolOrDeclaration.astSymbol;\r\n      this._fetchSymbolMetadata(astSymbol);\r\n    }\r\n    return symbolOrDeclaration.metadata as SymbolMetadata | DeclarationMetadata;\r\n  }\r\n\r\n  /**\r\n   * Removes the leading underscore, for example: \"_Example\" --> \"example*Example*_\"\r\n   *\r\n   * @remarks\r\n   * This causes internal definitions to sort alphabetically case-insensitive, then case-sensitive, and\r\n   * initially ignoring the underscore prefix, while still deterministically comparing it.\r\n   * The star is used as a delimiter because it is not a legal  identifier character.\r\n   */\r\n  public static getSortKeyIgnoringUnderscore(identifier: string): string {\r\n    let parts: string[];\r\n\r\n    if (identifier[0] === '_') {\r\n      const withoutUnderscore: string = identifier.substr(1);\r\n      parts = [withoutUnderscore.toLowerCase(), '*', withoutUnderscore, '*', '_'];\r\n    } else {\r\n      parts = [identifier.toLowerCase(), '*', identifier];\r\n    }\r\n\r\n    return parts.join('');\r\n  }\r\n\r\n  private _createEntityForSymbol(astSymbol: AstSymbol, exportedName: string | undefined): void {\r\n    let entity: CollectorEntity | undefined = this._entitiesByAstSymbol.get(astSymbol);\r\n\r\n    if (!entity) {\r\n      entity = new CollectorEntity(astSymbol);\r\n\r\n      this._entitiesByAstSymbol.set(astSymbol, entity);\r\n      this._entitiesBySymbol.set(astSymbol.followedSymbol, entity);\r\n      this._entities.push(entity);\r\n\r\n      this._collectReferenceDirectives(astSymbol);\r\n    }\r\n\r\n    if (exportedName) {\r\n      entity.addExportName(exportedName);\r\n    }\r\n  }\r\n\r\n  private _createEntityForIndirectReferences(astSymbol: AstSymbol, alreadySeenAstSymbols: Set<AstSymbol>): void {\r\n    if (alreadySeenAstSymbols.has(astSymbol)) {\r\n      return;\r\n    }\r\n    alreadySeenAstSymbols.add(astSymbol);\r\n\r\n    astSymbol.forEachDeclarationRecursive((astDeclaration: AstDeclaration) => {\r\n      for (const referencedAstSymbol of astDeclaration.referencedAstSymbols) {\r\n        this._createEntityForSymbol(referencedAstSymbol, undefined);\r\n        this._createEntityForIndirectReferences(referencedAstSymbol, alreadySeenAstSymbols);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Ensures a unique name for each item in the package typings file.\r\n   */\r\n  private _makeUniqueNames(): void {\r\n    const usedNames: Set<string> = new Set<string>();\r\n\r\n    // First collect the explicit package exports (named)\r\n    for (const entity of this._entities) {\r\n      for (const exportName of entity.exportNames) {\r\n        if (usedNames.has(exportName)) {\r\n          // This should be impossible\r\n          throw new InternalError(`A package cannot have two exports with the name \"${exportName}\"`);\r\n        }\r\n\r\n        usedNames.add(exportName);\r\n      }\r\n    }\r\n\r\n    // Next generate unique names for the non-exports that will be emitted (and the default export)\r\n    for (const entity of this._entities) {\r\n\r\n      // If this entity is exported exactly once, then emit the exported name\r\n      if (entity.singleExportName !== undefined && entity.singleExportName !== ts.InternalSymbolName.Default) {\r\n        entity.nameForEmit = entity.singleExportName;\r\n        continue;\r\n      }\r\n\r\n      // If the localName happens to be the same as one of the exports, then emit that name\r\n      if (entity.exportNames.has(entity.astSymbol.localName)) {\r\n        entity.nameForEmit = entity.astSymbol.localName;\r\n        continue;\r\n      }\r\n\r\n      // In all other cases, generate a unique name based on the localName\r\n      let suffix: number = 1;\r\n      let nameForEmit: string = entity.astSymbol.localName;\r\n      while (usedNames.has(nameForEmit)) {\r\n        nameForEmit = `${entity.astSymbol.localName}_${++suffix}`;\r\n      }\r\n      entity.nameForEmit = nameForEmit;\r\n      usedNames.add(nameForEmit);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reports an error message to the registered ApiErrorHandler.\r\n   */\r\n  public reportError(message: string, sourceFile: ts.SourceFile | undefined, start: number | undefined): void {\r\n    if (sourceFile && start) {\r\n      const lineAndCharacter: ts.LineAndCharacter = sourceFile.getLineAndCharacterOfPosition(start);\r\n\r\n      // If the file is under the packageFolder, then show a relative path\r\n      const relativePath: string = path.relative(this.package.packageFolder, sourceFile.fileName);\r\n      const shownPath: string = relativePath.substr(0, 2) === '..' ? sourceFile.fileName : relativePath;\r\n\r\n      // Format the error so that VS Code can follow it.  For example:\r\n      // \"src\\MyClass.ts(15,1): The JSDoc tag \"@blah\" is not supported by AEDoc\"\r\n      this.logger.logError(`${shownPath}(${lineAndCharacter.line + 1},${lineAndCharacter.character + 1}): `\r\n        + message);\r\n    } else {\r\n      this.logger.logError(message);\r\n    }\r\n  }\r\n\r\n  private _fetchSymbolMetadata(astSymbol: AstSymbol): void {\r\n    if (astSymbol.metadata) {\r\n      return;\r\n    }\r\n\r\n    // When we solve an astSymbol, then we always also solve all of its parents and all of its declarations\r\n    if (astSymbol.parentAstSymbol && astSymbol.parentAstSymbol.metadata === undefined) {\r\n      this._fetchSymbolMetadata(astSymbol.parentAstSymbol);\r\n    }\r\n\r\n    for (const astDeclaration of astSymbol.astDeclarations) {\r\n      this._calculateMetadataForDeclaration(astDeclaration);\r\n    }\r\n\r\n    // We know we solved parentAstSymbol.metadata above\r\n    const parentSymbolMetadata: SymbolMetadata | undefined = astSymbol.parentAstSymbol\r\n      ? astSymbol.parentAstSymbol.metadata as SymbolMetadata : undefined;\r\n\r\n    const symbolMetadata: SymbolMetadata = new SymbolMetadata();\r\n\r\n    // Do any of the declarations have a release tag?\r\n    let effectiveReleaseTag: ReleaseTag = ReleaseTag.None;\r\n\r\n    for (const astDeclaration of astSymbol.astDeclarations) {\r\n      // We know we solved this above\r\n      const declarationMetadata: DeclarationMetadata = astDeclaration.metadata as DeclarationMetadata;\r\n\r\n      const declaredReleaseTag: ReleaseTag = declarationMetadata.declaredReleaseTag;\r\n\r\n      if (declaredReleaseTag !== ReleaseTag.None) {\r\n        if (effectiveReleaseTag !== ReleaseTag.None && effectiveReleaseTag !== declaredReleaseTag) {\r\n          if (!astSymbol.rootAstSymbol.imported) { // for now, don't report errors for external code\r\n            // TODO: Report error message\r\n            this.reportError('Inconsistent release tags between declarations', undefined, undefined);\r\n          }\r\n        } else {\r\n          effectiveReleaseTag = declaredReleaseTag;\r\n        }\r\n      }\r\n    }\r\n\r\n    // If this declaration doesn't have a release tag, then inherit it from the parent\r\n    if (effectiveReleaseTag === ReleaseTag.None && astSymbol.parentAstSymbol) {\r\n      if (parentSymbolMetadata) {\r\n        effectiveReleaseTag = parentSymbolMetadata.releaseTag;\r\n      }\r\n    }\r\n\r\n    if (effectiveReleaseTag === ReleaseTag.None) {\r\n      if (this.validationRules.missingReleaseTags !== ExtractorValidationRulePolicy.allow) {\r\n        if (!astSymbol.rootAstSymbol.imported) { // for now, don't report errors for external code\r\n          // For now, don't report errors for forgotten exports\r\n          const entity: CollectorEntity | undefined = this._entitiesByAstSymbol.get(astSymbol.rootAstSymbol);\r\n          if (entity && entity.exported) {\r\n            // We also don't report errors for the default export of an entry point, since its doc comment\r\n            // isn't easy to obtain from the .d.ts file\r\n            if (astSymbol.rootAstSymbol.localName !== '_default') {\r\n              // TODO: Report error message\r\n              const loc: string = astSymbol.rootAstSymbol.localName + ' in '\r\n                + astSymbol.rootAstSymbol.astDeclarations[0].declaration.getSourceFile().fileName;\r\n              this.reportError('Missing release tag for ' + loc, undefined, undefined);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      effectiveReleaseTag = ReleaseTag.Public;\r\n    }\r\n\r\n    symbolMetadata.releaseTag = effectiveReleaseTag;\r\n    symbolMetadata.releaseTagSameAsParent = false;\r\n    if (parentSymbolMetadata) {\r\n      symbolMetadata.releaseTagSameAsParent = symbolMetadata.releaseTag === parentSymbolMetadata.releaseTag;\r\n    }\r\n\r\n    // Update this last when we're sure no exceptions were thrown\r\n    astSymbol.metadata = symbolMetadata;\r\n  }\r\n\r\n  private _calculateMetadataForDeclaration(astDeclaration: AstDeclaration): void {\r\n    const declarationMetadata: DeclarationMetadata = new DeclarationMetadata();\r\n    astDeclaration.metadata = declarationMetadata;\r\n\r\n    const parserContext: tsdoc.ParserContext | undefined = this._parseTsdocForAstDeclaration(astDeclaration);\r\n    if (parserContext) {\r\n      const modifierTagSet: tsdoc.StandardModifierTagSet = parserContext.docComment.modifierTagSet;\r\n\r\n      let declaredReleaseTag: ReleaseTag = ReleaseTag.None;\r\n      let inconsistentReleaseTags: boolean = false;\r\n\r\n      if (modifierTagSet.isPublic()) {\r\n        declaredReleaseTag = ReleaseTag.Public;\r\n      }\r\n      if (modifierTagSet.isBeta()) {\r\n        if (declaredReleaseTag !== ReleaseTag.None) {\r\n          inconsistentReleaseTags = true;\r\n        } else {\r\n          declaredReleaseTag = ReleaseTag.Beta;\r\n        }\r\n      }\r\n      if (modifierTagSet.isAlpha()) {\r\n        if (declaredReleaseTag !== ReleaseTag.None) {\r\n          inconsistentReleaseTags = true;\r\n        } else {\r\n          declaredReleaseTag = ReleaseTag.Alpha;\r\n        }\r\n      }\r\n      if (modifierTagSet.isInternal()) {\r\n        if (declaredReleaseTag !== ReleaseTag.None) {\r\n          inconsistentReleaseTags = true;\r\n        } else {\r\n          declaredReleaseTag = ReleaseTag.Internal;\r\n        }\r\n      }\r\n\r\n      if (inconsistentReleaseTags) {\r\n        if (!astDeclaration.astSymbol.rootAstSymbol.imported) { // for now, don't report errors for external code\r\n          // TODO: Report error message\r\n          this.reportError('Inconsistent release tags in doc comment', undefined, undefined);\r\n        }\r\n      }\r\n\r\n      declarationMetadata.tsdocParserContext = parserContext;\r\n      declarationMetadata.tsdocComment = parserContext.docComment;\r\n\r\n      declarationMetadata.declaredReleaseTag = declaredReleaseTag;\r\n\r\n      declarationMetadata.isEventProperty = modifierTagSet.isEventProperty();\r\n      declarationMetadata.isOverride = modifierTagSet.isOverride();\r\n      declarationMetadata.isSealed = modifierTagSet.isSealed();\r\n      declarationMetadata.isVirtual = modifierTagSet.isVirtual();\r\n\r\n      // Require the summary to contain at least 10 non-spacing characters\r\n      declarationMetadata.needsDocumentation = !tsdoc.PlainTextEmitter.hasAnyTextContent(\r\n        parserContext.docComment.summarySection, 10);\r\n    }\r\n  }\r\n\r\n  private _parseTsdocForAstDeclaration(astDeclaration: AstDeclaration): tsdoc.ParserContext | undefined {\r\n    const declaration: ts.Declaration = astDeclaration.declaration;\r\n    let nodeForComment: ts.Node = declaration;\r\n\r\n    if (ts.isVariableDeclaration(declaration)) {\r\n      // Variable declarations are special because they can be combined into a list.  For example:\r\n      //\r\n      // /** A */ export /** B */ const /** C */ x = 1, /** D **/ [ /** E */ y, z] = [3, 4];\r\n      //\r\n      // The compiler will only emit comments A and C in the .d.ts file, so in general there isn't a well-defined\r\n      // way to document these parts.  API Extractor requires you to break them into separate exports like this:\r\n      //\r\n      // /** A */ export const x = 1;\r\n      //\r\n      // But _getReleaseTagForDeclaration() still receives a node corresponding to \"x\", so we need to walk upwards\r\n      // and find the containing statement in order for getJSDocCommentRanges() to read the comment that we expect.\r\n      const statement: ts.VariableStatement | undefined = TypeScriptHelpers.findFirstParent(declaration,\r\n        ts.SyntaxKind.VariableStatement) as ts.VariableStatement | undefined;\r\n      if (statement !== undefined) {\r\n        // For a compound declaration, fall back to looking for C instead of A\r\n        if (statement.declarationList.declarations.length === 1) {\r\n          nodeForComment = statement;\r\n        }\r\n      }\r\n    }\r\n\r\n    const sourceFileText: string = declaration.getSourceFile().text;\r\n    const ranges: ts.CommentRange[] = TypeScriptInternals.getJSDocCommentRanges(nodeForComment, sourceFileText) || [];\r\n\r\n    if (ranges.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    // We use the JSDoc comment block that is closest to the definition, i.e.\r\n    // the last one preceding it\r\n    const range: ts.TextRange = ranges[ranges.length - 1];\r\n\r\n    const tsdocTextRange: tsdoc.TextRange = tsdoc.TextRange.fromStringRange(sourceFileText,\r\n      range.pos, range.end);\r\n\r\n    return this._tsdocParser.parseRange(tsdocTextRange);\r\n  }\r\n\r\n  private _collectReferenceDirectives(astSymbol: AstSymbol): void {\r\n    // Are we emitting declarations?\r\n    if (astSymbol.astImport) {\r\n      return; // no, it's an import\r\n    }\r\n\r\n    const seenFilenames: Set<string> = new Set<string>();\r\n\r\n    for (const astDeclaration of astSymbol.astDeclarations) {\r\n      const sourceFile: ts.SourceFile = astDeclaration.declaration.getSourceFile();\r\n      if (sourceFile && sourceFile.fileName) {\r\n        if (!seenFilenames.has(sourceFile.fileName)) {\r\n          seenFilenames.add(sourceFile.fileName);\r\n\r\n          for (const typeReferenceDirective of sourceFile.typeReferenceDirectives) {\r\n            const name: string = sourceFile.text.substring(typeReferenceDirective.pos, typeReferenceDirective.end);\r\n            this._dtsTypeReferenceDirectives.add(name);\r\n          }\r\n\r\n          for (const libReferenceDirective of sourceFile.libReferenceDirectives) {\r\n            const name: string = sourceFile.text.substring(libReferenceDirective.pos, libReferenceDirective.end);\r\n            this._dtsLibReferenceDirectives.add(name);\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}