"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-bitwise */
const ts = require("typescript");
const node_core_library_1 = require("@microsoft/node-core-library");
const IndentedWriter_1 = require("../api/IndentedWriter");
const TypeScriptHelpers_1 = require("../analyzer/TypeScriptHelpers");
const Span_1 = require("../analyzer/Span");
const ReleaseTag_1 = require("../aedoc/ReleaseTag");
const AstDeclaration_1 = require("../analyzer/AstDeclaration");
/**
 * Used with DtsRollupGenerator.writeTypingsFile()
 */
var DtsRollupKind;
(function (DtsRollupKind) {
    /**
     * Generate a *.d.ts file for an internal release, or for the trimming=false mode.
     * This output file will contain all definitions that are reachable from the entry point.
     */
    DtsRollupKind[DtsRollupKind["InternalRelease"] = 0] = "InternalRelease";
    /**
     * Generate a *.d.ts file for a preview release.
     * This output file will contain all definitions that are reachable from the entry point,
     * except definitions marked as \@alpha or \@internal.
     */
    DtsRollupKind[DtsRollupKind["BetaRelease"] = 1] = "BetaRelease";
    /**
     * Generate a *.d.ts file for a public release.
     * This output file will contain all definitions that are reachable from the entry point,
     * except definitions marked as \@beta, \@alpha, or \@internal.
     */
    DtsRollupKind[DtsRollupKind["PublicRelease"] = 2] = "PublicRelease";
})(DtsRollupKind = exports.DtsRollupKind || (exports.DtsRollupKind = {}));
class DtsRollupGenerator {
    /**
     * Generates the typings file and writes it to disk.
     *
     * @param dtsFilename    - The *.d.ts output filename
     */
    static writeTypingsFile(collector, dtsFilename, dtsKind) {
        const indentedWriter = new IndentedWriter_1.IndentedWriter();
        DtsRollupGenerator._generateTypingsFileContent(collector, indentedWriter, dtsKind);
        node_core_library_1.FileSystem.writeFile(dtsFilename, indentedWriter.toString(), {
            convertLineEndings: "\r\n" /* CrLf */,
            ensureFolderExists: true
        });
    }
    static _generateTypingsFileContent(collector, indentedWriter, dtsKind) {
        if (collector.package.tsdocParserContext) {
            indentedWriter.writeLine(collector.package.tsdocParserContext.sourceRange.toString());
            indentedWriter.writeLine();
        }
        // Emit the triple slash directives
        for (const typeDirectiveReference of collector.dtsTypeReferenceDirectives) {
            // tslint:disable-next-line:max-line-length
            // https://github.com/Microsoft/TypeScript/blob/611ebc7aadd7a44a4c0447698bfda9222a78cb66/src/compiler/declarationEmitter.ts#L162
            indentedWriter.writeLine(`/// <reference types="${typeDirectiveReference}" />`);
        }
        for (const libDirectiveReference of collector.dtsLibReferenceDirectives) {
            indentedWriter.writeLine(`/// <reference lib="${libDirectiveReference}" />`);
        }
        // Emit the imports
        for (const entity of collector.entities) {
            if (entity.astSymbol.astImport) {
                const releaseTag = collector.fetchMetadata(entity.astSymbol).releaseTag;
                if (this._shouldIncludeReleaseTag(releaseTag, dtsKind)) {
                    const astImport = entity.astSymbol.astImport;
                    if (astImport.exportName === '*') {
                        indentedWriter.write(`import * as ${entity.nameForEmit}`);
                    }
                    else if (entity.nameForEmit !== astImport.exportName) {
                        indentedWriter.write(`import { ${astImport.exportName} as ${entity.nameForEmit} }`);
                    }
                    else {
                        indentedWriter.write(`import { ${astImport.exportName} }`);
                    }
                    indentedWriter.writeLine(` from '${astImport.modulePath}';`);
                }
            }
        }
        // Emit the regular declarations
        for (const entity of collector.entities) {
            if (!entity.astSymbol.astImport) {
                const releaseTag = collector.fetchMetadata(entity.astSymbol).releaseTag;
                if (!this._shouldIncludeReleaseTag(releaseTag, dtsKind)) {
                    indentedWriter.writeLine();
                    indentedWriter.writeLine(`/* Excluded from this release type: ${entity.nameForEmit} */`);
                    continue;
                }
                // Emit all the declarations for this entry
                for (const astDeclaration of entity.astSymbol.astDeclarations || []) {
                    indentedWriter.writeLine();
                    const span = new Span_1.Span(astDeclaration.declaration);
                    DtsRollupGenerator._modifySpan(collector, span, entity, astDeclaration, dtsKind);
                    indentedWriter.writeLine(span.getModifiedText());
                }
            }
            if (!entity.shouldInlineExport) {
                for (const exportName of entity.exportNames) {
                    if (exportName === ts.InternalSymbolName.Default) {
                        indentedWriter.writeLine(`export default ${entity.nameForEmit};`);
                    }
                    else if (entity.nameForEmit !== exportName) {
                        indentedWriter.writeLine(`export { ${entity.nameForEmit} as ${exportName} }`);
                    }
                    else {
                        indentedWriter.writeLine(`export { ${exportName} }`);
                    }
                }
            }
        }
        if (collector.starExportedExternalModulePaths.length > 0) {
            indentedWriter.writeLine();
            for (const starExportedExternalModulePath of collector.starExportedExternalModulePaths) {
                indentedWriter.writeLine(`export * from "${starExportedExternalModulePath}";`);
            }
        }
        // Emit "export { }" which is a special directive that prevents consumers from importing declarations
        // that don't have an explicit "export" modifier.
        indentedWriter.writeLine();
        indentedWriter.writeLine('export { }');
    }
    /**
     * Before writing out a declaration, _modifySpan() applies various fixups to make it nice.
     */
    static _modifySpan(collector, span, entity, astDeclaration, dtsKind) {
        const previousSpan = span.previousSibling;
        let recurseChildren = true;
        switch (span.kind) {
            case ts.SyntaxKind.JSDocComment:
                // If the @packagedocumentation comment seems to be attached to one of the regular API items,
                // omit it.  It gets explictly emitted at the top of the file.
                if (span.node.getText().match(/(?:\s|\*)@packagedocumentation(?:\s|\*)/g)) {
                    span.modification.skipAll();
                }
                // For now, we don't transform JSDoc comment nodes at all
                recurseChildren = false;
                break;
            case ts.SyntaxKind.ExportKeyword:
            case ts.SyntaxKind.DefaultKeyword:
            case ts.SyntaxKind.DeclareKeyword:
                // Delete any explicit "export" or "declare" keywords -- we will re-add them below
                span.modification.skipAll();
                break;
            case ts.SyntaxKind.InterfaceKeyword:
            case ts.SyntaxKind.ClassKeyword:
            case ts.SyntaxKind.EnumKeyword:
            case ts.SyntaxKind.NamespaceKeyword:
            case ts.SyntaxKind.ModuleKeyword:
            case ts.SyntaxKind.TypeKeyword:
            case ts.SyntaxKind.FunctionKeyword:
                // Replace the stuff we possibly deleted above
                let replacedModifiers = '';
                // Add a declare statement for root declarations (but not for nested declarations)
                if (!astDeclaration.parent) {
                    replacedModifiers += 'declare ';
                }
                if (entity.shouldInlineExport) {
                    replacedModifiers = 'export ' + replacedModifiers;
                }
                if (previousSpan && previousSpan.kind === ts.SyntaxKind.SyntaxList) {
                    // If there is a previous span of type SyntaxList, then apply it before any other modifiers
                    // (e.g. "abstract") that appear there.
                    previousSpan.modification.prefix = replacedModifiers + previousSpan.modification.prefix;
                }
                else {
                    // Otherwise just stick it in front of this span
                    span.modification.prefix = replacedModifiers + span.modification.prefix;
                }
                break;
            case ts.SyntaxKind.VariableDeclaration:
                // Is this a top-level variable declaration?
                // (The logic below does not apply to variable declarations that are part of an explicit "namespace" block,
                // since the compiler prefers not to emit "declare" or "export" keywords for those declarations.)
                if (!span.parent) {
                    // The VariableDeclaration node is part of a VariableDeclarationList, however
                    // the Entry.followedSymbol points to the VariableDeclaration part because
                    // multiple definitions might share the same VariableDeclarationList.
                    //
                    // Since we are emitting a separate declaration for each one, we need to look upwards
                    // in the ts.Node tree and write a copy of the enclosing VariableDeclarationList
                    // content (e.g. "var" from "var x=1, y=2").
                    const list = TypeScriptHelpers_1.TypeScriptHelpers.matchAncestor(span.node, [ts.SyntaxKind.VariableDeclarationList, ts.SyntaxKind.VariableDeclaration]);
                    if (!list) {
                        // This should not happen unless the compiler API changes somehow
                        throw new node_core_library_1.InternalError('Unsupported variable declaration');
                    }
                    const listPrefix = list.getSourceFile().text
                        .substring(list.getStart(), list.declarations[0].getStart());
                    span.modification.prefix = 'declare ' + listPrefix + span.modification.prefix;
                    span.modification.suffix = ';';
                    if (entity.shouldInlineExport) {
                        span.modification.prefix = 'export ' + span.modification.prefix;
                    }
                    const declarationMetadata = collector.fetchMetadata(astDeclaration);
                    if (declarationMetadata.tsdocParserContext) {
                        // Typically the comment for a variable declaration is attached to the outer variable statement
                        // (which may possibly contain multiple variable declarations), so it's not part of the Span.
                        // Instead we need to manually inject it.
                        let originalComment = declarationMetadata.tsdocParserContext.sourceRange.toString();
                        if (!/[\r\n]\s*$/.test(originalComment)) {
                            originalComment += '\n';
                        }
                        span.modification.prefix = originalComment + span.modification.prefix;
                    }
                }
                break;
            case ts.SyntaxKind.Identifier:
                let nameFixup = false;
                const identifierSymbol = collector.typeChecker.getSymbolAtLocation(span.node);
                if (identifierSymbol) {
                    const followedSymbol = TypeScriptHelpers_1.TypeScriptHelpers.followAliases(identifierSymbol, collector.typeChecker);
                    const referencedEntity = collector.tryGetEntityBySymbol(followedSymbol);
                    if (referencedEntity) {
                        if (!referencedEntity.nameForEmit) {
                            // This should never happen
                            throw new Error('referencedEntry.uniqueName is undefined');
                        }
                        span.modification.prefix = referencedEntity.nameForEmit;
                        nameFixup = true;
                        // For debugging:
                        // span.modification.prefix += '/*R=FIX*/';
                    }
                }
                if (!nameFixup) {
                    // For debugging:
                    // span.modification.prefix += '/*R=KEEP*/';
                }
                break;
        }
        if (recurseChildren) {
            for (const child of span.children) {
                let childAstDeclaration = astDeclaration;
                // Should we trim this node?
                let trimmed = false;
                if (AstDeclaration_1.AstDeclaration.isSupportedSyntaxKind(child.kind)) {
                    childAstDeclaration = collector.astSymbolTable.getChildAstDeclarationByNode(child.node, astDeclaration);
                    const releaseTag = collector.fetchMetadata(childAstDeclaration.astSymbol).releaseTag;
                    if (!this._shouldIncludeReleaseTag(releaseTag, dtsKind)) {
                        let nodeToTrim = child;
                        // If we are trimming a variable statement, then we need to trim the outer VariableDeclarationList
                        // as well.
                        if (child.kind === ts.SyntaxKind.VariableDeclaration) {
                            const variableStatement = child.findFirstParent(ts.SyntaxKind.VariableStatement);
                            if (variableStatement !== undefined) {
                                nodeToTrim = variableStatement;
                            }
                        }
                        const modification = nodeToTrim.modification;
                        // Yes, trim it and stop here
                        const name = childAstDeclaration.astSymbol.localName;
                        modification.omitChildren = true;
                        modification.prefix = `/* Excluded from this release type: ${name} */`;
                        modification.suffix = '';
                        if (nodeToTrim.children.length > 0) {
                            // If there are grandchildren, then keep the last grandchild's separator,
                            // since it often has useful whitespace
                            modification.suffix = nodeToTrim.children[nodeToTrim.children.length - 1].separator;
                        }
                        if (nodeToTrim.nextSibling) {
                            // If the thing we are trimming is followed by a comma, then trim the comma also.
                            // An example would be an enum member.
                            if (nodeToTrim.nextSibling.kind === ts.SyntaxKind.CommaToken) {
                                // Keep its separator since it often has useful whitespace
                                modification.suffix += nodeToTrim.nextSibling.separator;
                                nodeToTrim.nextSibling.modification.skipAll();
                            }
                        }
                        trimmed = true;
                    }
                }
                if (!trimmed) {
                    DtsRollupGenerator._modifySpan(collector, child, entity, childAstDeclaration, dtsKind);
                }
            }
        }
    }
    static _shouldIncludeReleaseTag(releaseTag, dtsKind) {
        switch (dtsKind) {
            case DtsRollupKind.InternalRelease:
                return true;
            case DtsRollupKind.BetaRelease:
                // NOTE: If the release tag is "None", then we don't have enough information to trim it
                return releaseTag === ReleaseTag_1.ReleaseTag.Beta || releaseTag === ReleaseTag_1.ReleaseTag.Public || releaseTag === ReleaseTag_1.ReleaseTag.None;
            case DtsRollupKind.PublicRelease:
                return releaseTag === ReleaseTag_1.ReleaseTag.Public || releaseTag === ReleaseTag_1.ReleaseTag.None;
        }
        throw new Error(`${DtsRollupKind[dtsKind]} is not implemented`);
    }
}
exports.DtsRollupGenerator = DtsRollupGenerator;
//# sourceMappingURL=DtsRollupGenerator.js.map