{"version":3,"file":"ApiPackage.js","sourceRoot":"","sources":["../../../src/api/model/ApiPackage.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,8CAAsE;AACtE,2EAAuG;AACvG,oEAA8E;AAC9E,kEAA0F;AAC1F,4CAAyC;AAEzC,yDAA4E;AAY5E,IAAY,oBAKX;AALD,WAAY,oBAAoB;IAC9B;;OAEG;IACH,sEAAa,CAAA;AACf,CAAC,EALW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAK/B;AA4BD;;;;;;;;;GASG;AACH,MAAa,UAAW,SAAQ,6CAAqB,CAAC,2BAAY,CAAC,qCAAiB,CAAC,CAAC;IAC7E,MAAM,CAAC,gBAAgB,CAAC,eAAuB;QACpD,MAAM,UAAU,GAAiB,4BAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAChE,OAAO,iBAAO,CAAC,WAAW,CAAC,UAAU,CAAe,CAAC;IACvD,CAAC;IAED,YAAmB,OAA2B;QAC5C,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,+BAA2B;IAC7B,CAAC;IAED,gBAAgB;IAChB,IAAW,kBAAkB;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,OAAuC,CAAC;IACtD,CAAC;IAED,gBAAgB;IACT,SAAS,CAAC,MAAqB;QACpC,IAAI,MAAM,CAAC,IAAI,kCAA2B,EAAE;YAC1C,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACnF;QACD,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAEM,qBAAqB,CAAC,UAAkB;QAC7C,OAAO,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAiC,CAAC;IAC5E,CAAC;IAEM,cAAc,CAAC,eAAuB,EAAE,OAA8B;QAC3E,MAAM,UAAU,GAAoB;YAClC,QAAQ,EAAE;gBACR,WAAW,EAAE,qBAAS,CAAC,WAAW;gBAClC,WAAW,EAAE,qBAAS,CAAC,OAAO;gBAC9B,aAAa,EAAE,oBAAoB,CAAC,MAAM;aAC3C;SACiB,CAAC;QACrB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC/B,4BAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IACtD,CAAC;CACF;AA/CD,gCA+CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ApiItem, ApiItemKind, IApiItemJson } from '../items/ApiItem';\r\nimport { ApiItemContainerMixin, IApiItemContainerMixinOptions } from '../mixins/ApiItemContainerMixin';\r\nimport { JsonFile, IJsonFileSaveOptions } from '@microsoft/node-core-library';\r\nimport { ApiDocumentedItem, IApiDocumentedItemOptions } from '../items/ApiDocumentedItem';\r\nimport { Extractor } from '../Extractor';\r\nimport { ApiEntryPoint } from './ApiEntryPoint';\r\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\r\n\r\n/**\r\n * Constructor options for {@link ApiPackage}.\r\n * @public\r\n */\r\nexport interface IApiPackageOptions extends\r\n  IApiItemContainerMixinOptions,\r\n  IApiNameMixinOptions,\r\n  IApiDocumentedItemOptions {\r\n}\r\n\r\nexport enum ApiJsonSchemaVersion {\r\n  /**\r\n   * The initial release.\r\n   */\r\n  V_1000 = 1000\r\n}\r\n\r\nexport interface IApiPackageMetadataJson {\r\n  /**\r\n   * The NPM package name for the tool that wrote the *.api.json file.\r\n   * For informational purposes only.\r\n   */\r\n  toolPackage: string;\r\n  /**\r\n   * The NPM package version for the tool that wrote the *.api.json file.\r\n   * For informational purposes only.\r\n   */\r\n  toolVersion: string;\r\n\r\n  /**\r\n   * The *.api.json schema version.  Used for determining whether the file format is\r\n   * supported, and for backwards compatibility.\r\n   */\r\n  schemaVersion: ApiJsonSchemaVersion;\r\n}\r\n\r\nexport interface IApiPackageJson extends IApiItemJson {\r\n  /**\r\n   * A file header that stores metadata about the tool that wrote the *.api.json file.\r\n   */\r\n  metadata: IApiPackageMetadataJson;\r\n}\r\n\r\n/**\r\n * Represents an NPM package containing API declarations.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * @public\r\n */\r\nexport class ApiPackage extends ApiItemContainerMixin(ApiNameMixin(ApiDocumentedItem)) {\r\n  public static loadFromJsonFile(apiJsonFilename: string): ApiPackage {\r\n    const jsonObject: IApiItemJson = JsonFile.load(apiJsonFilename);\r\n    return ApiItem.deserialize(jsonObject) as ApiPackage;\r\n  }\r\n\r\n  public constructor(options: IApiPackageOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.Package;\r\n  }\r\n\r\n  /** @override */\r\n  public get canonicalReference(): string {\r\n    return this.name;\r\n  }\r\n\r\n  public get entryPoints(): ReadonlyArray<ApiEntryPoint> {\r\n    return this.members as ReadonlyArray<ApiEntryPoint>;\r\n  }\r\n\r\n  /** @override */\r\n  public addMember(member: ApiEntryPoint): void {\r\n    if (member.kind !== ApiItemKind.EntryPoint) {\r\n      throw new Error('Only items of type ApiEntryPoint may be added to an ApiPackage');\r\n    }\r\n    super.addMember(member);\r\n  }\r\n\r\n  public findEntryPointsByPath(importPath: string): ReadonlyArray<ApiEntryPoint> {\r\n    return this.findMembersByName(importPath) as ReadonlyArray<ApiEntryPoint>;\r\n  }\r\n\r\n  public saveToJsonFile(apiJsonFilename: string, options?: IJsonFileSaveOptions): void {\r\n    const jsonObject: IApiPackageJson = {\r\n      metadata: {\r\n        toolPackage: Extractor.packageName,\r\n        toolVersion: Extractor.version,\r\n        schemaVersion: ApiJsonSchemaVersion.V_1000\r\n      }\r\n    } as IApiPackageJson;\r\n    this.serializeInto(jsonObject);\r\n    JsonFile.save(jsonObject, apiJsonFilename, options);\r\n  }\r\n}\r\n"]}