{"version":3,"file":"AstModule.js","sourceRoot":"","sources":["../../src/analyzer/AstModule.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAM3D,MAAa,mBAAmB;IAAhC;QACkB,yBAAoB,GAA2B,IAAI,GAAG,EAAqB,CAAC;QAC5E,gCAA2B,GAAmB,IAAI,GAAG,EAAa,CAAC;IACrF,CAAC;CAAA;AAHD,kDAGC;AAED;;GAEG;AACH,MAAa,SAAS;IAgBpB,YAAmB,UAAyB,EAAE,YAAuB,EAAE,kBAAsC;QAC3G,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAE7C,IAAI,CAAC,mBAAmB,GAAG,IAAI,GAAG,EAAa,CAAC;QAEhD,IAAI,CAAC,qBAAqB,GAAG,IAAI,GAAG,EAAqB,CAAC;QAE1D,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;IACvC,CAAC;IAED,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,kBAAkB,KAAK,SAAS,CAAC;IAC/C,CAAC;CACF;AA/BD,8BA+BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nimport { AstSymbol } from './AstSymbol';\r\n\r\nexport class AstModuleExportInfo {\r\n  public readonly exportedLocalSymbols: Map<string, AstSymbol> = new Map<string, AstSymbol>();\r\n  public readonly starExportedExternalModules: Set<AstModule> = new Set<AstModule>();\r\n}\r\n\r\n/**\r\n * An internal data structure that represents a source file that is analyzed by AstSymbolTable.\r\n */\r\nexport class AstModule {\r\n  public readonly sourceFile: ts.SourceFile;\r\n  public readonly moduleSymbol: ts.Symbol;\r\n\r\n  /**\r\n   * Example:  \"@microsoft/node-core-library/lib/FileSystem\"\r\n   * but never: \"./FileSystem\"\r\n   */\r\n  public readonly externalModulePath: string | undefined;\r\n\r\n  public readonly starExportedModules: Set<AstModule>;\r\n\r\n  public readonly cachedExportedSymbols: Map<string, AstSymbol>;\r\n\r\n  public astModuleExportInfo: AstModuleExportInfo | undefined;\r\n\r\n  public constructor(sourceFile: ts.SourceFile, moduleSymbol: ts.Symbol, externalModulePath: string | undefined) {\r\n    this.sourceFile = sourceFile;\r\n    this.moduleSymbol = moduleSymbol;\r\n    this.externalModulePath = externalModulePath;\r\n\r\n    this.starExportedModules = new Set<AstModule>();\r\n\r\n    this.cachedExportedSymbols = new Map<string, AstSymbol>();\r\n\r\n    this.astModuleExportInfo = undefined;\r\n  }\r\n\r\n  public get isExternal(): boolean {\r\n    return this.externalModulePath !== undefined;\r\n  }\r\n}\r\n"]}