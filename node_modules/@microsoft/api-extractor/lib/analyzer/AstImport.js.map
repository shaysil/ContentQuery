{"version":3,"file":"AstImport.js","sourceRoot":"","sources":["../../src/analyzer/AstImport.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAU3D;;;GAGG;AACH,MAAa,SAAS;IAwBpB,YAAmB,OAA0B;QAC3C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QAErC,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;IACrD,CAAC;CACF;AA9BD,8BA8BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Constructor options for AstImport\r\n */\r\nexport interface IAstImportOptions {\r\n  readonly modulePath: string;\r\n  readonly exportName: string;\r\n}\r\n\r\n/**\r\n * For a symbol that was imported from an external package, this tracks the import\r\n * statement that was used to reach it.\r\n */\r\nexport class AstImport {\r\n  /**\r\n   * The name of the external package (and possibly module path) that this definition\r\n   * was imported from.\r\n   *\r\n   * Example: \"@microsoft/node-core-library/lib/FileSystem\"\r\n   */\r\n  public readonly modulePath: string;\r\n\r\n  /**\r\n   * If modulePath is defined, then this specifies the export name for the definition.\r\n   *\r\n   * Example: \"IBuildConfig\"\r\n   */\r\n  public readonly exportName: string;\r\n\r\n  /**\r\n   * If modulePath and exportName are defined, then this is a dictionary key\r\n   * that combines them with a colon (\":\").\r\n   *\r\n   * Example: \"@microsoft/node-core-library/lib/FileSystem:FileSystem\"\r\n   */\r\n  public readonly key: string;\r\n\r\n  public constructor(options: IAstImportOptions) {\r\n    this.modulePath = options.modulePath;\r\n    this.exportName = options.exportName;\r\n\r\n    this.key = `${this.modulePath}:${this.exportName}`;\r\n  }\r\n}\r\n"]}