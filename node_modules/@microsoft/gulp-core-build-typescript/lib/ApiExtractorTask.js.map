{"version":3,"file":"ApiExtractorTask.js","sourceRoot":"","sources":["../src/ApiExtractorTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAE7B,oEAGsC;AAItC,uCAAoD;AAMpD;;;;;GAKG;AACH,MAAa,gBAAiB,SAAQ,iBAAgC;IACpE;QACE,KAAK,CACH,eAAe,EACf,EAAE,CACH,CAAC;IACJ,CAAC;IAEM,UAAU;QACf,OAAO,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,2BAA2B,CAAC,CAAC,CAAC;IACxF,CAAC;IAEM,SAAS,CAAC,WAAyB;QACxC,OAAO,8BAAU,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtF,CAAC;IAEM,WAAW;QAChB,IAAI,CAAC,2BAA2B,EAAE,CAAC;QAEnC,MAAM,gBAAgB,GAAsB;YAC1C,UAAU,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU;SACzC,CAAC;QAEF,MAAM,kBAAkB,GAA+B,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC;QAClG,MAAM,eAAe,GAAqB,kBAAkB,CAAC,YAAY,CAAC,SAAS,CAAC,gBAAgB,CAChG,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAC/D,CAAC;QAEJ,MAAM,kBAAkB,GAAwB,IAAI,kBAAkB,CACpE,eAAe,EACf,gBAAgB,EAChB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,iBAAiB,CACvB,CAAC;QAEF,OAAO,kBAAkB,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC;IAES,kBAAkB;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,wBAAwB,CAAC,CAAC,CAAC,oDAAoD;IACjH,CAAC;IAEO,8BAA8B,CAAC,QAAgB;QACrD,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,oBAAoB,CAAC,CAAC;IAChE,CAAC;CACF;AA7CD,4CA6CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { IBuildConfig } from '@microsoft/gulp-core-build';\r\nimport {\r\n  JsonFile,\r\n  FileSystem\r\n} from '@microsoft/node-core-library';\r\nimport { IExtractorConfig, IExtractorOptions } from '@microsoft/api-extractor';\r\nimport { ApiExtractorRunner as TApiExtractorRunner } from '@microsoft/rush-stack-compiler-3.2';\r\n\r\nimport { RSCTask, IRSCTaskConfig } from './RSCTask';\r\n\r\n/** @public */\r\nexport interface IApiExtractorTaskConfig extends IRSCTaskConfig {\r\n}\r\n\r\n/**\r\n * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect\r\n * common problems and generate a report of the exported public API. The task uses the entry point of a project to\r\n * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.\r\n * @beta\r\n */\r\nexport class ApiExtractorTask extends RSCTask<IApiExtractorTaskConfig>  {\r\n  constructor() {\r\n    super(\r\n      'api-extractor',\r\n      {}\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return JsonFile.load(path.resolve(__dirname, 'schemas', 'api-extractor.schema.json'));\r\n  }\r\n\r\n  public isEnabled(buildConfig: IBuildConfig): boolean {\r\n    return FileSystem.exists(this._getApiExtractorConfigFilePath(buildConfig.rootPath));\r\n  }\r\n\r\n  public executeTask(): Promise<void> {\r\n    this.initializeRushStackCompiler();\r\n\r\n    const extractorOptions: IExtractorOptions = {\r\n      localBuild: !this.buildConfig.production\r\n    };\r\n\r\n    const ApiExtractorRunner: typeof TApiExtractorRunner = this._rushStackCompiler.ApiExtractorRunner;\r\n    const extractorConfig: IExtractorConfig = ApiExtractorRunner.apiExtractor.Extractor.loadConfigObject(\r\n        this._getApiExtractorConfigFilePath(this.buildConfig.rootPath)\r\n      );\r\n\r\n    const apiExtractorRunner: TApiExtractorRunner = new ApiExtractorRunner(\r\n      extractorConfig,\r\n      extractorOptions,\r\n      this.buildFolder,\r\n      this._terminalProvider\r\n    );\r\n\r\n    return apiExtractorRunner.invoke();\r\n  }\r\n\r\n  protected _getConfigFilePath(): string {\r\n    return path.join('.', 'config', 'gcb-api-extractor.json'); // There aren't config options specific to this task\r\n  }\r\n\r\n  private _getApiExtractorConfigFilePath(rootPath: string): string {\r\n    return path.resolve(rootPath, 'config', 'api-extractor.json');\r\n  }\r\n}\r\n"]}