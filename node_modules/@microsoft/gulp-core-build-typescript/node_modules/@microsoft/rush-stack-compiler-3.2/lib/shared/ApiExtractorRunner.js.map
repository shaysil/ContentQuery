{"version":3,"file":"ApiExtractorRunner.js","sourceRoot":"","sources":["../../src/shared/ApiExtractorRunner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,4DAIkC;AAClC,yDAAyD;AAEzD,mEAAgE;AAChE,2CAAwC;AAExC;;;;;GAKG;AACH,MAAa,kBAAmB,SAAQ,6CAAqB;IAK3D,YACE,eAAiC,EACjC,gBAAmC,EACnC,QAAgB,EAChB,gBAAmC;QAEnC,KAAK,CAAC,EAAE,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAEtC,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC5C,CAAC;IAEM,MAAM;QACX,IAAI;YACF,MAAM,gBAAgB,qBACjB,IAAI,CAAC,iBAAiB,IACzB,YAAY,EAAE;oBACZ,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;oBAChE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;oBACtD,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;oBAChE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;iBAC7D,EACD,wBAAwB,EAAE,qBAAS,CAAC,qBAAqB,GAC1D,CAAC;YAEF,MAAM,SAAS,GAAc,IAAI,yBAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;YAEpF,kFAAkF;YAClF,iDAAiD;YACjD,SAAS,CAAC,cAAc,EAAE,CAAC;YAE3B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAC1B;IACH,CAAC;;AAvCa,+BAAY,GAAwB,YAAY,CAAC;AADjE,gDAyCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ITerminalProvider } from '@microsoft/node-core-library';\r\nimport {\r\n  Extractor,\r\n  IExtractorOptions,\r\n  IExtractorConfig\r\n} from '@microsoft/api-extractor';\r\nimport * as ApiExtractor from '@microsoft/api-extractor';\r\n\r\nimport { RushStackCompilerBase } from './RushStackCompilerBase';\r\nimport { ToolPaths } from './ToolPaths';\r\n\r\n/**\r\n * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect\r\n * common problems and generate a report of the exported public API. The task uses the entry point of a project to\r\n * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.\r\n * @beta\r\n */\r\nexport class ApiExtractorRunner extends RushStackCompilerBase {\r\n  public static apiExtractor: typeof ApiExtractor = ApiExtractor;\r\n  private _extractorConfig: IExtractorConfig;\r\n  private _extractorOptions: IExtractorOptions;\r\n\r\n  constructor(\r\n    extractorConfig: IExtractorConfig,\r\n    extractorOptions: IExtractorOptions,\r\n    rootPath: string,\r\n    terminalProvider: ITerminalProvider\r\n  ) {\r\n    super({}, rootPath, terminalProvider);\r\n\r\n    this._extractorConfig = extractorConfig;\r\n    this._extractorOptions = extractorOptions;\r\n  }\r\n\r\n  public invoke(): Promise<void> {\r\n    try {\r\n      const extractorOptions: IExtractorOptions = {\r\n        ...this._extractorOptions,\r\n        customLogger: {\r\n          logVerbose: this._terminal.writeVerboseLine.bind(this._terminal),\r\n          logInfo: this._terminal.writeLine.bind(this._terminal),\r\n          logWarning: this._terminal.writeWarningLine.bind(this._terminal),\r\n          logError: this._terminal.writeErrorLine.bind(this._terminal)\r\n        },\r\n        typescriptCompilerFolder: ToolPaths.typescriptPackagePath\r\n      };\r\n\r\n      const extractor: Extractor = new Extractor(this._extractorConfig, extractorOptions);\r\n\r\n      // NOTE: processProject() returns false if errors or warnings occurred, however we\r\n      // already handle this above via our customLogger\r\n      extractor.processProject();\r\n\r\n      return Promise.resolve();\r\n    } catch (e) {\r\n      return Promise.reject(e);\r\n    }\r\n  }\r\n}\r\n"]}