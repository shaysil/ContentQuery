{"version":3,"file":"ApiConstructor.js","sourceRoot":"","sources":["../../../src/api/model/ApiConstructor.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,6DAAkF;AAClF,8DAAoF;AACpF,2EAAuG;AACvG,qEAA8F;AAa9F;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAa,cAAe,SAAQ,6CAAqB,CAAC,uCAAkB,CAAC,+BAAc,CAAC,iCAAe,CAAC,CAAC,CAAC;IAErG,MAAM,CAAC,qBAAqB,CAAC,QAAiB,EAAE,aAAqB;QAC1E,IAAI,QAAQ,EAAE;YACZ,OAAO,wBAAwB,aAAa,GAAG,CAAC;SACjD;aAAM;YACL,OAAO,0BAA0B,aAAa,GAAG,CAAC;SACnD;IACH,CAAC;IAED,YAAmB,OAA+B;QAChD,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,uCAA+B;IACjC,CAAC;IAED,gBAAgB;IAChB,IAAW,kBAAkB;QAC3B,OAAO,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACjF,CAAC;CACF;AAvBD,wCAuBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { ApiStaticMixin, IApiStaticMixinOptions } from '../mixins/ApiStaticMixin';\r\nimport { IApiDeclaredItemOptions, ApiDeclaredItem } from '../items/ApiDeclaredItem';\r\nimport { IApiParameterListMixinOptions, ApiParameterListMixin } from '../mixins/ApiParameterListMixin';\r\nimport { IApiReleaseTagMixinOptions, ApiReleaseTagMixin } from '../mixins/ApiReleaseTagMixin';\r\n\r\n/**\r\n * Constructor options for {@link ApiConstructor}.\r\n * @public\r\n */\r\nexport interface IApiConstructorOptions extends\r\n  IApiParameterListMixinOptions,\r\n  IApiReleaseTagMixinOptions,\r\n  IApiStaticMixinOptions,\r\n  IApiDeclaredItemOptions {\r\n}\r\n\r\n/**\r\n * Represents a TypeScript class constructor declaration that belongs to an `ApiClass`.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiConstructor` represents a declaration using the `constructor` keyword such as in this example:\r\n *\r\n * ```ts\r\n * export class Vector {\r\n *   public x: number;\r\n *   public y: number;\r\n *\r\n *   // A class constructor:\r\n *   public constructor(x: number, y: number) {\r\n *     this.x = x;\r\n *     this.y = y;\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * Compare with {@link ApiConstructSignature}, which describes the construct signature for a class constructor.\r\n *\r\n * @public\r\n */\r\nexport class ApiConstructor extends ApiParameterListMixin(ApiReleaseTagMixin(ApiStaticMixin(ApiDeclaredItem))) {\r\n\r\n  public static getCanonicalReference(isStatic: boolean, overloadIndex: number): string {\r\n    if (isStatic) {\r\n      return `(:constructor,static,${overloadIndex})`;\r\n    } else {\r\n      return `(:constructor,instance,${overloadIndex})`;\r\n    }\r\n  }\r\n\r\n  public constructor(options: IApiConstructorOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.Constructor;\r\n  }\r\n\r\n  /** @override */\r\n  public get canonicalReference(): string {\r\n    return ApiConstructor.getCanonicalReference(this.isStatic, this.overloadIndex);\r\n  }\r\n}\r\n"]}