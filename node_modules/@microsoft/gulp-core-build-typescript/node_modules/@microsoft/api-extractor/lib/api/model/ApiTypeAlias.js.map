{"version":3,"file":"ApiTypeAlias.js","sourceRoot":"","sources":["../../../src/api/model/ApiTypeAlias.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,8DAAoF;AACpF,qEAA8F;AAC9F,yDAA4E;AAY5E;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAa,YAAa,SAAQ,2BAAY,CAAC,uCAAkB,CAAC,iCAAe,CAAC,CAAC;IAC1E,MAAM,CAAC,qBAAqB,CAAC,IAAY;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,YAAmB,OAA6B;QAC9C,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,mCAA6B;IAC/B,CAAC;IAED,gBAAgB;IAChB,IAAW,kBAAkB;QAC3B,OAAO,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;CACF;AAlBD,oCAkBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { ApiDeclaredItem, IApiDeclaredItemOptions } from '../items/ApiDeclaredItem';\r\nimport { ApiReleaseTagMixin, IApiReleaseTagMixinOptions } from '../mixins/ApiReleaseTagMixin';\r\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\r\n\r\n/**\r\n * Constructor options for {@link ApiTypeAlias}.\r\n * @public\r\n */\r\nexport interface IApiTypeAliasOptions extends\r\n  IApiNameMixinOptions,\r\n  IApiReleaseTagMixinOptions,\r\n  IApiDeclaredItemOptions {\r\n}\r\n\r\n/**\r\n * Represents a TypeScript type alias declaration.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiTypeAlias` represents a definition such as one of these examples:\r\n *\r\n * ```ts\r\n * // A union type:\r\n * export type Shape = Square | Triangle | Circle;\r\n *\r\n * // A generic type alias:\r\n * export type BoxedValue<T> = { value: T };\r\n *\r\n * export type BoxedArray<T> = { array: T[] };\r\n *\r\n * // A conditional type alias:\r\n * export type Boxed<T> = T extends any[] ? BoxedArray<T[number]> : BoxedValue<T>;\r\n *\r\n * ```\r\n *\r\n * @public\r\n */\r\nexport class ApiTypeAlias extends ApiNameMixin(ApiReleaseTagMixin(ApiDeclaredItem)) {\r\n  public static getCanonicalReference(name: string): string {\r\n    return name;\r\n  }\r\n\r\n  public constructor(options: IApiTypeAliasOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.TypeAlias;\r\n  }\r\n\r\n  /** @override */\r\n  public get canonicalReference(): string {\r\n    return ApiTypeAlias.getCanonicalReference(this.name);\r\n  }\r\n}\r\n"]}