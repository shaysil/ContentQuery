{"version":3,"file":"PackageMetadataManager.js","sourceRoot":"","sources":["../../src/analyzer/PackageMetadataManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  PackageJsonLookup,\r\n  IPackageJson,\r\n  FileSystem,\r\n  JsonFile,\r\n  NewlineKind\r\n} from '@microsoft/node-core-library';\r\nimport { Extractor } from '../api/Extractor';\r\nimport { ILogger } from '../api/ILogger';\r\n\r\n/**\r\n * Represents analyzed information for a package.json file.\r\n * This object is constructed and returned by PackageMetadataManager.\r\n */\r\nexport class PackageMetadata {\r\n  /**\r\n   * The absolute path to the package.json file being analyzed.\r\n   */\r\n  public readonly packageJsonPath: string;\r\n  /**\r\n   * The parsed contents of package.json.  Note that PackageJsonLookup\r\n   * only includes essential fields.\r\n   */\r\n  public readonly packageJson: IPackageJson;\r\n  /**\r\n   * If true, then the package's documentation comments can be assumed\r\n   * to contain API Extractor compatible TSDoc tags.\r\n   */\r\n  public readonly aedocSupported: boolean;\r\n\r\n  public constructor(packageJsonPath: string, packageJson: IPackageJson, aedocSupported: boolean) {\r\n    this.packageJsonPath = packageJsonPath;\r\n    this.packageJson = packageJson;\r\n    this.aedocSupported = aedocSupported;\r\n  }\r\n}\r\n\r\n/**\r\n * This class maintains a cache of analyzed information obtained from package.json\r\n * files.  It is built on top of the PackageJsonLookup class.\r\n *\r\n * @remarks\r\n *\r\n * IMPORTANT: Don't use PackageMetadataManager to analyze source files from the current project:\r\n * 1. Files such as tsdoc-metadata.json may not have been built yet, and thus may contain incorrect information.\r\n * 2. The current project is not guaranteed to have a package.json file at all.  For example, API Extractor can\r\n *    be invoked on a bare .d.ts file.\r\n *\r\n * Use ts.program.isSourceFileFromExternalLibrary() to test source files before passing the to PackageMetadataManager.\r\n */\r\nexport class PackageMetadataManager {\r\n  public static tsdocMetadataFilename: string = 'tsdoc-metadata.json';\r\n\r\n  private readonly _packageJsonLookup: PackageJsonLookup;\r\n  private readonly _logger: ILogger;\r\n  private readonly _packageMetadataByPackageJsonPath: Map<string, PackageMetadata>\r\n    = new Map<string, PackageMetadata>();\r\n\r\n  public static writeTsdocMetadataFile(packageJsonFolder: string): void {\r\n    // This feature is still being standardized: https://github.com/Microsoft/tsdoc/issues/7\r\n    // In the future we will use the @microsoft/tsdoc library to read this file.\r\n    const tsdocMetadataPath: string = path.join(packageJsonFolder,\r\n      'dist', PackageMetadataManager.tsdocMetadataFilename);\r\n\r\n    const fileObject: Object = {\r\n      tsdocVersion: '0.12',\r\n      toolPackages: [\r\n        {\r\n           packageName: '@microsoft/api-extractor',\r\n           packageVersion: Extractor.version\r\n        }\r\n      ]\r\n    };\r\n\r\n    const fileContent: string =\r\n      '// This file is read by tools that parse documentation comments conforming to the TSDoc standard.\\n'\r\n      + '// It should be published with your NPM package.  It should not be tracked by Git.\\n'\r\n      + JsonFile.stringify(fileObject);\r\n\r\n    FileSystem.writeFile(tsdocMetadataPath, fileContent, {\r\n      convertLineEndings: NewlineKind.CrLf,\r\n      ensureFolderExists: true\r\n    });\r\n  }\r\n\r\n  public constructor(packageJsonLookup: PackageJsonLookup, logger: ILogger) {\r\n    this._packageJsonLookup = packageJsonLookup;\r\n    this._logger = logger;\r\n  }\r\n\r\n  /**\r\n   * Finds the package.json in a parent folder of the specified source file, and\r\n   * returns a PackageMetadata object.  If no package.json was found, then undefined\r\n   * is returned.  The results are cached.\r\n   */\r\n  public tryFetchPackageMetadata(sourceFilePath: string): PackageMetadata | undefined {\r\n    const packageJsonFilePath: string | undefined\r\n      = this._packageJsonLookup.tryGetPackageJsonFilePathFor(sourceFilePath);\r\n    if (!packageJsonFilePath) {\r\n      return undefined;\r\n    }\r\n    let packageMetadata: PackageMetadata | undefined\r\n      = this._packageMetadataByPackageJsonPath.get(packageJsonFilePath);\r\n\r\n    if (!packageMetadata) {\r\n      const packageJson: IPackageJson = this._packageJsonLookup.loadPackageJson(packageJsonFilePath);\r\n\r\n      const packageJsonFolder: string = path.dirname(packageJsonFilePath);\r\n\r\n      // This feature is still being standardized: https://github.com/Microsoft/tsdoc/issues/7\r\n      // In the future we will use the @microsoft/tsdoc library to read this file.\r\n      let aedocSupported: boolean = false;\r\n\r\n      const tsdocMetadataPath: string = path.join(packageJsonFolder,\r\n        'dist', PackageMetadataManager.tsdocMetadataFilename);\r\n\r\n      if (FileSystem.exists(tsdocMetadataPath)) {\r\n        this._logger.logVerbose('Found metadata in ' + tsdocMetadataPath);\r\n        // If the file exists at all, assume it was written by API Extractor\r\n        aedocSupported = true;\r\n      }\r\n\r\n      packageMetadata = new PackageMetadata(packageJsonFilePath, packageJson, aedocSupported);\r\n      this._packageMetadataByPackageJsonPath.set(packageJsonFilePath, packageMetadata);\r\n    }\r\n\r\n    return packageMetadata;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the source file is part of a package whose .d.ts files support AEDoc annotations.\r\n   */\r\n  public isAedocSupportedFor(sourceFilePath: string): boolean {\r\n    const packageMetadata: PackageMetadata | undefined = this.tryFetchPackageMetadata(sourceFilePath);\r\n    if (!packageMetadata) {\r\n      return false;\r\n    }\r\n    return packageMetadata.aedocSupported;\r\n  }\r\n}\r\n"]}