{"version":3,"file":"ReviewFileGenerator.js","sourceRoot":"","sources":["../../src/generators/ReviewFileGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nimport { Collector } from '../collector/Collector';\r\nimport { TypeScriptHelpers } from '../analyzer/TypeScriptHelpers';\r\nimport { Span } from '../analyzer/Span';\r\nimport { CollectorEntity } from '../collector/CollectorEntity';\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\nimport { StringBuilder } from '@microsoft/tsdoc';\r\nimport { DeclarationMetadata } from '../collector/DeclarationMetadata';\r\nimport { SymbolMetadata } from '../collector/SymbolMetadata';\r\nimport { ReleaseTag } from '../aedoc/ReleaseTag';\r\nimport { Text, InternalError } from '@microsoft/node-core-library';\r\nimport { AstImport } from '../analyzer/AstImport';\r\nimport { AstSymbol } from '../analyzer/AstSymbol';\r\n\r\nexport class ReviewFileGenerator {\r\n  /**\r\n   * Compares the contents of two API files that were created using ApiFileGenerator,\r\n   * and returns true if they are equivalent.  Note that these files are not normally edited\r\n   * by a human; the \"equivalence\" comparison here is intended to ignore spurious changes that\r\n   * might be introduced by a tool, e.g. Git newline normalization or an editor that strips\r\n   * whitespace when saving.\r\n   */\r\n  public static areEquivalentApiFileContents(actualFileContent: string, expectedFileContent: string): boolean {\r\n    // NOTE: \"\\s\" also matches \"\\r\" and \"\\n\"\r\n    const normalizedActual: string = actualFileContent.replace(/[\\s]+/g, ' ');\r\n    const normalizedExpected: string = expectedFileContent.replace(/[\\s]+/g, ' ');\r\n    return normalizedActual === normalizedExpected;\r\n  }\r\n\r\n  public static generateReviewFileContent(collector: Collector): string {\r\n    const output: StringBuilder = new StringBuilder();\r\n\r\n    for (const entity of collector.entities) {\r\n      if (entity.exported) {\r\n        if (entity.astEntity instanceof AstSymbol) {\r\n          // Emit all the declarations for this entry\r\n          for (const astDeclaration of entity.astEntity.astDeclarations || []) {\r\n\r\n            output.append(ReviewFileGenerator._getAedocSynopsis(collector, astDeclaration));\r\n\r\n            const span: Span = new Span(astDeclaration.declaration);\r\n            ReviewFileGenerator._modifySpan(collector, span, entity, astDeclaration);\r\n            span.writeModifiedText(output);\r\n            output.append('\\n\\n');\r\n          }\r\n        } else {\r\n          // This definition is reexported from another package, so write it as an \"export\" line\r\n          // In general, we don't report on external packages; if that's important we assume API Extractor\r\n          // would be enabled for the upstream project.  But see GitHub issue #896 for a possible exception.\r\n          const astImport: AstImport = entity.astEntity;\r\n\r\n          if (astImport.exportName === '*') {\r\n            output.append(`export * as ${entity.nameForEmit}`);\r\n          } else if (entity.nameForEmit !== astImport.exportName) {\r\n            output.append(`export { ${astImport.exportName} as ${entity.nameForEmit} }`);\r\n          } else {\r\n            output.append(`export { ${astImport.exportName} }`);\r\n          }\r\n          output.append(` from '${astImport.modulePath}';\\n`);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (collector.starExportedExternalModulePaths.length > 0) {\r\n      output.append('\\n');\r\n      for (const starExportedExternalModulePath of collector.starExportedExternalModulePaths) {\r\n        output.append(`export * from \"${starExportedExternalModulePath}\";\\n`);\r\n      }\r\n    }\r\n\r\n    if (collector.workingPackage.tsdocComment === undefined) {\r\n      output.append('\\n');\r\n      ReviewFileGenerator._writeLineAsComment(output, '(No @packageDocumentation comment for this package)');\r\n    }\r\n\r\n    return output.toString();\r\n  }\r\n\r\n  /**\r\n   * Before writing out a declaration, _modifySpan() applies various fixups to make it nice.\r\n   */\r\n  private static _modifySpan(collector: Collector, span: Span, entity: CollectorEntity,\r\n    astDeclaration: AstDeclaration): void {\r\n\r\n    // Should we process this declaration at all?\r\n    if ((astDeclaration.modifierFlags & ts.ModifierFlags.Private) !== 0) { // tslint:disable-line:no-bitwise\r\n      span.modification.skipAll();\r\n      return;\r\n    }\r\n\r\n    let recurseChildren: boolean = true;\r\n    let sortChildren: boolean = false;\r\n\r\n    switch (span.kind) {\r\n      case ts.SyntaxKind.JSDocComment:\r\n        span.modification.skipAll();\r\n        // For now, we don't transform JSDoc comment nodes at all\r\n        recurseChildren = false;\r\n        break;\r\n\r\n      case ts.SyntaxKind.ExportKeyword:\r\n      case ts.SyntaxKind.DefaultKeyword:\r\n        span.modification.skipAll();\r\n        break;\r\n\r\n      case ts.SyntaxKind.SyntaxList:\r\n        if (span.parent) {\r\n          if (AstDeclaration.isSupportedSyntaxKind(span.parent.kind)) {\r\n            // If the immediate parent is an API declaration, and the immediate children are API declarations,\r\n            // then sort the children alphabetically\r\n            sortChildren = true;\r\n          } else if (span.parent.kind === ts.SyntaxKind.ModuleBlock) {\r\n            // Namespaces are special because their chain goes ModuleDeclaration -> ModuleBlock -> SyntaxList\r\n            sortChildren = true;\r\n          }\r\n        }\r\n        break;\r\n\r\n        case ts.SyntaxKind.VariableDeclaration:\r\n        if (!span.parent) {\r\n          // The VariableDeclaration node is part of a VariableDeclarationList, however\r\n          // the Entry.followedSymbol points to the VariableDeclaration part because\r\n          // multiple definitions might share the same VariableDeclarationList.\r\n          //\r\n          // Since we are emitting a separate declaration for each one, we need to look upwards\r\n          // in the ts.Node tree and write a copy of the enclosing VariableDeclarationList\r\n          // content (e.g. \"var\" from \"var x=1, y=2\").\r\n          const list: ts.VariableDeclarationList | undefined = TypeScriptHelpers.matchAncestor(span.node,\r\n            [ts.SyntaxKind.VariableDeclarationList, ts.SyntaxKind.VariableDeclaration]);\r\n          if (!list) {\r\n            // This should not happen unless the compiler API changes somehow\r\n            throw new InternalError('Unsupported variable declaration');\r\n          }\r\n          const listPrefix: string = list.getSourceFile().text\r\n            .substring(list.getStart(), list.declarations[0].getStart());\r\n          span.modification.prefix = 'declare ' + listPrefix + span.modification.prefix;\r\n\r\n          span.modification.suffix = ';';\r\n        }\r\n        break;\r\n\r\n      case ts.SyntaxKind.Identifier:\r\n        const referencedEntity: CollectorEntity | undefined = collector.tryGetEntityForIdentifierNode(\r\n          span.node as ts.Identifier\r\n        );\r\n\r\n        if (referencedEntity) {\r\n          if (!referencedEntity.nameForEmit) {\r\n            // This should never happen\r\n            throw new InternalError('referencedEntry.nameForEmit is undefined');\r\n          }\r\n\r\n          span.modification.prefix = referencedEntity.nameForEmit;\r\n          // For debugging:\r\n          // span.modification.prefix += '/*R=FIX*/';\r\n        } else {\r\n          // For debugging:\r\n          // span.modification.prefix += '/*R=KEEP*/';\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n    if (recurseChildren) {\r\n      for (const child of span.children) {\r\n        let childAstDeclaration: AstDeclaration = astDeclaration;\r\n\r\n        if (AstDeclaration.isSupportedSyntaxKind(child.kind)) {\r\n          childAstDeclaration = collector.astSymbolTable.getChildAstDeclarationByNode(child.node, astDeclaration);\r\n\r\n          if (sortChildren) {\r\n            span.modification.sortChildren = true;\r\n            child.modification.sortKey = Collector.getSortKeyIgnoringUnderscore(\r\n              childAstDeclaration.astSymbol.localName);\r\n          }\r\n\r\n          const aedocSynopsis: string = ReviewFileGenerator._getAedocSynopsis(collector, childAstDeclaration);\r\n          const indentedAedocSynopsis: string = ReviewFileGenerator._addIndentAfterNewlines(aedocSynopsis,\r\n            child.getIndent());\r\n\r\n          child.modification.prefix = indentedAedocSynopsis + child.modification.prefix;\r\n        }\r\n\r\n        ReviewFileGenerator._modifySpan(collector, child, entity, childAstDeclaration);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes a synopsis of the AEDoc comments, which indicates the release tag,\r\n   * whether the item has been documented, and any warnings that were detected\r\n   * by the analysis.\r\n   */\r\n  private static _getAedocSynopsis(collector: Collector, astDeclaration: AstDeclaration): string {\r\n    const output: StringBuilder = new StringBuilder();\r\n\r\n    const declarationMetadata: DeclarationMetadata = collector.fetchMetadata(astDeclaration);\r\n    const symbolMetadata: SymbolMetadata = collector.fetchMetadata(astDeclaration.astSymbol);\r\n\r\n    const footerParts: string[] = [];\r\n\r\n    if (!symbolMetadata.releaseTagSameAsParent) {\r\n      switch (symbolMetadata.releaseTag) {\r\n        case ReleaseTag.Internal:\r\n          footerParts.push('@internal');\r\n          break;\r\n        case ReleaseTag.Alpha:\r\n          footerParts.push('@alpha');\r\n          break;\r\n        case ReleaseTag.Beta:\r\n          footerParts.push('@beta');\r\n          break;\r\n        case ReleaseTag.Public:\r\n          footerParts.push('@public');\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (declarationMetadata.isSealed) {\r\n      footerParts.push('@sealed');\r\n    }\r\n\r\n    if (declarationMetadata.isVirtual) {\r\n      footerParts.push('@virtual');\r\n    }\r\n\r\n    if (declarationMetadata.isOverride) {\r\n      footerParts.push('@override');\r\n    }\r\n\r\n    if (declarationMetadata.isEventProperty) {\r\n      footerParts.push('@eventproperty');\r\n    }\r\n\r\n    if (declarationMetadata.tsdocComment) {\r\n      if (declarationMetadata.tsdocComment.deprecatedBlock) {\r\n        footerParts.push('@deprecated');\r\n      }\r\n    }\r\n\r\n    if (declarationMetadata.needsDocumentation) {\r\n      footerParts.push('(undocumented)');\r\n    }\r\n\r\n    if (footerParts.length > 0) {\r\n      ReviewFileGenerator._writeLineAsComment(output, footerParts.join(' '));\r\n    }\r\n\r\n    return output.toString();\r\n  }\r\n\r\n  private static _writeLineAsComment(output: StringBuilder, line: string): void {\r\n    output.append('// ');\r\n    output.append(line);\r\n    output.append('\\n');\r\n  }\r\n\r\n  private static _addIndentAfterNewlines(text: string, indent: string): string {\r\n    if (text.length === 0 || indent.length === 0) {\r\n      return text;\r\n    }\r\n    return Text.replaceAll(text, '\\n', '\\n' + indent);\r\n  }\r\n\r\n}\r\n"]}