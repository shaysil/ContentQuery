{"version":3,"file":"RunAction.js","sourceRoot":"","sources":["../../src/cli/RunAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport {\r\n  PackageJsonLookup,\r\n  FileSystem,\r\n  IPackageJson\r\n} from '@microsoft/node-core-library';\r\n\r\nimport {\r\n  CommandLineAction,\r\n  CommandLineStringParameter,\r\n  CommandLineFlagParameter\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport { Extractor } from '../api/Extractor';\r\nimport { IExtractorConfig } from '../api/IExtractorConfig';\r\n\r\nimport { ApiExtractorCommandLine } from './ApiExtractorCommandLine';\r\n\r\nconst AE_CONFIG_FILENAME: string = 'api-extractor.json';\r\n\r\nexport class RunAction extends CommandLineAction {\r\n  private _configFileParameter: CommandLineStringParameter;\r\n  private _localParameter: CommandLineFlagParameter;\r\n  private _typescriptCompilerFolder: CommandLineStringParameter;\r\n\r\n  constructor(parser: ApiExtractorCommandLine) {\r\n    super({\r\n      actionName: 'run',\r\n      summary: 'Invoke API Extractor on a project',\r\n      documentation: 'Invoke API Extractor on a project'\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void { // override\r\n    this._configFileParameter = this.defineStringParameter({\r\n      parameterLongName: '--config',\r\n      parameterShortName: '-c',\r\n      argumentName: 'FILE',\r\n      description: `Use the specified ${AE_CONFIG_FILENAME} file path, rather than guessing its location`\r\n    });\r\n\r\n    this._localParameter = this.defineFlagParameter({\r\n      parameterLongName: '--local',\r\n      parameterShortName: '-l',\r\n      description: 'Indicates that API Extractor is running as part of a local build,'\r\n        + ' e.g. on a developer\\'s machine. This disables certain validation that would'\r\n        + ' normally be performed for a ship/production build. For example, the *.api.ts'\r\n        + ' review file is automatically copied in a local build.'\r\n    });\r\n\r\n    this._typescriptCompilerFolder = this.defineStringParameter({\r\n      parameterLongName: '--typescript-compiler-folder',\r\n      argumentName: 'PATH',\r\n      description: 'By default API Extractor uses its own TypeScript compiler version to analyze your project.'\r\n        + ' This can often cause compiler errors due to incompatibilities between different TS versions.'\r\n        + ' Use \"--typescript-compiler-folder\" to specify the folder path for your compiler version.'\r\n    });\r\n  }\r\n\r\n  protected onExecute(): Promise<void> { // override\r\n    const lookup: PackageJsonLookup = new PackageJsonLookup();\r\n    let configFilename: string;\r\n\r\n    let typescriptCompilerFolder: string | undefined = this._typescriptCompilerFolder.value;\r\n    if (typescriptCompilerFolder) {\r\n      typescriptCompilerFolder = path.normalize(typescriptCompilerFolder);\r\n\r\n      if (FileSystem.exists(typescriptCompilerFolder)) {\r\n        typescriptCompilerFolder = lookup.tryGetPackageFolderFor(typescriptCompilerFolder);\r\n        const typescriptCompilerPackageJson: IPackageJson | undefined = typescriptCompilerFolder\r\n          ? lookup.tryLoadPackageJsonFor(typescriptCompilerFolder)\r\n          : undefined;\r\n        if (!typescriptCompilerPackageJson) {\r\n          throw new Error(\r\n            `The path specified in the ${this._typescriptCompilerFolder.longName} parameter is not a package.`\r\n          );\r\n        } else if (typescriptCompilerPackageJson.name !== 'typescript') {\r\n          throw new Error(\r\n            `The path specified in the ${this._typescriptCompilerFolder.longName} parameter is not a TypeScript`\r\n            + ' compiler package.'\r\n          );\r\n        }\r\n      } else {\r\n        throw new Error(\r\n          `The path specified in the ${this._typescriptCompilerFolder.longName} parameter does not exist.`\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._configFileParameter.value) {\r\n      configFilename = path.normalize(this._configFileParameter.value);\r\n      if (!FileSystem.exists(configFilename)) {\r\n        throw new Error('Config file not found: ' + this._configFileParameter.value);\r\n      }\r\n    } else {\r\n      // Otherwise, figure out which project we're in and look for the config file\r\n      // at the project root\r\n      const packageFolder: string | undefined = lookup.tryGetPackageFolderFor('.');\r\n\r\n      // If there is no package, then try the current directory\r\n      const baseFolder: string = packageFolder ? packageFolder : process.cwd();\r\n\r\n      // First try the standard \"config\" subfolder:\r\n      configFilename = path.join(baseFolder, 'config', AE_CONFIG_FILENAME);\r\n      if (FileSystem.exists(configFilename)) {\r\n        if (FileSystem.exists(path.join(baseFolder, AE_CONFIG_FILENAME))) {\r\n          throw new Error(`Found conflicting ${AE_CONFIG_FILENAME} files in \".\" and \"./config\" folders`);\r\n        }\r\n      } else {\r\n        // Otherwise try the top-level folder\r\n        configFilename = path.join(baseFolder, AE_CONFIG_FILENAME);\r\n\r\n        if (!FileSystem.exists(configFilename)) {\r\n          throw new Error(`Unable to find an ${AE_CONFIG_FILENAME} file`);\r\n        }\r\n      }\r\n\r\n      console.log(`Using configuration from ${configFilename}` + os.EOL + os.EOL);\r\n    }\r\n\r\n    const config: IExtractorConfig = Extractor.loadConfigObject(configFilename);\r\n    const extractor: Extractor = new Extractor(\r\n      config,\r\n      {\r\n        localBuild: this._localParameter.value,\r\n        typescriptCompilerFolder: typescriptCompilerFolder\r\n      }\r\n    );\r\n\r\n    if (!extractor.processProject()) {\r\n      console.log(os.EOL + colors.yellow('API Extractor completed with errors or warnings'));\r\n      process.exitCode = 1;\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n}\r\n"]}