{"version":3,"file":"BaseShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/base/BaseShrinkwrapFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AACjC,iCAAiC;AACjC,iDAAkD;AAClD,oEAAuE;AAEvE,6DAA0D;AAE1D;;GAEG;AACH,MAAsB,kBAAkB;IAAxC;QACY,wBAAmB,GAAgB,IAAI,GAAG,EAAU,CAAC;IAuGjE,CAAC;IArGW,MAAM,CAAC,WAAW,CAAI,UAAiC,EAAE,GAAW;QAC5E,IAAI,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YAClC,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;SACxB;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACI,IAAI,CAAC,QAAgB;QAC1B,8BAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,+BAA+B,CAAC,cAAsB,EAAE,YAAoB;QACjF,MAAM,iBAAiB,GAAuB,IAAI,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;QAChG,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;IACtF,CAAC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACI,6BAA6B,CAAC,cAAsB,EAAE,YAAoB,EAAE,eAAuB;QACxG,MAAM,iBAAiB,GACrB,IAAI,CAAC,0BAA0B,CAAC,cAAc,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;QACjF,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;IACtF,CAAC;IAaS,oBAAoB,CAAC,YAAmC;QAChE,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;YAC3C,iDAAiD;YACjD,IAAI,+BAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,6BAAa,CAAC,gBAAgB,EAAE;gBAChE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAClB;SACF;QACD,MAAM,CAAC,IAAI,EAAE,CAAC,CAAE,gCAAgC;QAChD,OAAO,MAAM,CAAC;IAChB,CAAC;IAES,sBAAsB,CAAC,iBAAyB,EAAE,YAAoB;QAC9E,2FAA2F;QAC3F,OAAO,MAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;IAC3D,CAAC;IAEO,sBAAsB,CAAC,cAAsB,EAAE,YAAoB,EAAE,iBAAyB;QACpG,MAAM,MAAM,GAA0B,aAAa,CAAC,OAAO,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;QAC1F,QAAQ,MAAM,CAAC,IAAI,EAAE;YACnB,KAAK,SAAS,CAAC;YACf,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;YACtE;gBACE,+BAA+B;gBAC/B,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;oBACjD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;oBAC7C,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,2BAA2B,MAAM,CAAC,IAAI,sBAAsB,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;iBAC3G;gBACD,OAAO,IAAI,CAAC;SACf;IACH,CAAC;CACF;AAxGD,gDAwGC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as semver from 'semver';\r\nimport npmPackageArg = require('npm-package-arg');\r\nimport { PackageName, FileSystem } from '@microsoft/node-core-library';\r\n\r\nimport { RushConstants } from '../../logic/RushConstants';\r\n\r\n/**\r\n * This class is a parser for both npm's npm-shrinkwrap.json and pnpm's shrinkwrap.yaml file formats.\r\n */\r\nexport abstract class BaseShrinkwrapFile {\r\n  protected _alreadyWarnedSpecs: Set<string> = new Set<string>();\r\n\r\n  protected static tryGetValue<T>(dictionary: { [key2: string]: T }, key: string): T | undefined {\r\n    if (dictionary.hasOwnProperty(key)) {\r\n      return dictionary[key];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Serializes and saves the shrinkwrap file to specified location\r\n   */\r\n  public save(filePath: string): void {\r\n    FileSystem.writeFile(filePath, this.serialize());\r\n  }\r\n\r\n  /**\r\n   * Returns true if the shrinkwrap file includes a top-level package that would satisfy the specified\r\n   * package name and SemVer version range\r\n   *\r\n   * @virtual\r\n   */\r\n  public hasCompatibleTopLevelDependency(dependencyName: string, versionRange: string): boolean {\r\n    const dependencyVersion: string | undefined = this.getTopLevelDependencyVersion(dependencyName);\r\n    if (!dependencyVersion) {\r\n      return false;\r\n    }\r\n\r\n    return this._checkDependencyVerson(dependencyName, versionRange, dependencyVersion);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the shrinkwrap file includes a package that would satisfying the specified\r\n   * package name and SemVer version range.  By default, the dependencies are resolved by looking\r\n   * at the root of the node_modules folder described by the shrinkwrap file.  However, if\r\n   * tempProjectName is specified, then the resolution will start in that subfolder.\r\n   *\r\n   * Consider this example:\r\n   *\r\n   * - node_modules\\\r\n   *   - temp-project\\\r\n   *     - lib-a@1.2.3\r\n   *     - lib-b@1.0.0\r\n   *   - lib-b@2.0.0\r\n   *\r\n   * In this example, hasCompatibleDependency(\"lib-b\", \">= 1.1.0\", \"temp-project\") would fail\r\n   * because it finds lib-b@1.0.0 which does not satisfy the pattern \">= 1.1.0\".\r\n   *\r\n   * @virtual\r\n   */\r\n  public tryEnsureCompatibleDependency(dependencyName: string, versionRange: string, tempProjectName: string): boolean {\r\n    const dependencyVersion: string | undefined =\r\n      this.tryEnsureDependencyVersion(dependencyName, tempProjectName, versionRange);\r\n    if (!dependencyVersion) {\r\n      return false;\r\n    }\r\n\r\n    return this._checkDependencyVerson(dependencyName, versionRange, dependencyVersion);\r\n  }\r\n\r\n  /**\r\n   * Returns the list of temp projects defined in this file.\r\n   * Example: [ '@rush-temp/project1', '@rush-temp/project2' ]\r\n   */\r\n  public abstract getTempProjectNames(): ReadonlyArray<string>;\r\n\r\n  protected abstract tryEnsureDependencyVersion(dependencyName: string,\r\n    tempProjectName: string, versionRange: string): string | undefined;\r\n  protected abstract getTopLevelDependencyVersion(dependencyName: string): string | undefined;\r\n  protected abstract serialize(): string;\r\n\r\n  protected _getTempProjectNames(dependencies: { [key: string]: {} } ): ReadonlyArray<string> {\r\n    const result: string[] = [];\r\n    for (const key of Object.keys(dependencies)) {\r\n      // If it starts with @rush-temp, then include it:\r\n      if (PackageName.getScope(key) === RushConstants.rushTempNpmScope) {\r\n        result.push(key);\r\n      }\r\n    }\r\n    result.sort();  // make the result deterministic\r\n    return result;\r\n  }\r\n\r\n  protected checkValidVersionRange(dependencyVersion: string, versionRange: string): boolean {\r\n    // If it's a SemVer pattern, then require that the shrinkwrapped version must be compatible\r\n    return semver.satisfies(dependencyVersion, versionRange);\r\n  }\r\n\r\n  private _checkDependencyVerson(dependencyName: string, versionRange: string, dependencyVersion: string): boolean {\r\n    const result: npmPackageArg.IResult = npmPackageArg.resolve(dependencyName, versionRange);\r\n    switch (result.type) {\r\n      case 'version':\r\n      case 'range':\r\n        return this.checkValidVersionRange(dependencyVersion, versionRange);\r\n      default:\r\n        // Only warn once for each spec\r\n        if (!this._alreadyWarnedSpecs.has(result.rawSpec)) {\r\n          this._alreadyWarnedSpecs.add(result.rawSpec);\r\n          console.log(colors.yellow(`WARNING: Not validating ${result.type}-based specifier: \"${result.rawSpec}\"`));\r\n        }\r\n        return true;\r\n    }\r\n  }\r\n}\r\n"]}