{"version":3,"file":"Git.js","sourceRoot":"","sources":["../../src/logic/Git.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport gitInfo = require('git-repo-info');\r\nimport * as os from 'os';\r\nimport { Executable } from '@microsoft/node-core-library';\r\n\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { AlreadyReportedError } from '../utilities/AlreadyReportedError';\r\nimport { GitEmailPolicy } from './policy/GitEmailPolicy';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\n\r\ninterface IResultOrError<TResult> {\r\n  error?: Error;\r\n  result?: TResult;\r\n}\r\n\r\nexport class Git {\r\n  private static _checkedGitPath: boolean = false;\r\n  private static _gitPath: string | undefined;\r\n\r\n  private static _gitEmailResult: IResultOrError<string> | undefined = undefined;\r\n\r\n  /**\r\n   * Returns the path to the Git binary if found. Otherwise, return undefined.\r\n   */\r\n  public static getGitPath(): string | undefined {\r\n    if (!Git._checkedGitPath) {\r\n      Git._gitPath = Executable.tryResolve('git');\r\n      Git._checkedGitPath = true;\r\n    }\r\n\r\n    return Git._gitPath;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the Git binary can be found.\r\n   */\r\n  public static isGitPresent(): boolean {\r\n    return !!Git.getGitPath();\r\n  }\r\n\r\n  /**\r\n   * Returns true if the Git binary was found and the current path is under a Git working tree.\r\n   */\r\n  public static isPathUnderGitWorkingTree(): boolean {\r\n    if (Git.isGitPresent()) { // Do we even have a Git binary?\r\n      try {\r\n        return !!gitInfo().sha;\r\n      } catch (e) {\r\n        return false; // Unexpected, but possible if the .git directory is corrupted.\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If a Git email address is configured and is nonempty, this returns it.\r\n   * Otherwise, undefined is returned.\r\n   */\r\n  public static tryGetGitEmail(rushConfiguration: RushConfiguration): string | undefined {\r\n    const emailResult: IResultOrError<string> = Git._tryGetGitEmail();\r\n    if (emailResult.result !== undefined && emailResult.result.length > 0) {\r\n      return emailResult.result;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * If a Git email address is configured and is nonempty, this returns it.\r\n   * Otherwise, configuration instructions are printed to the console,\r\n   * and AlreadyReportedError is thrown.\r\n   */\r\n  public static getGitEmail(rushConfiguration: RushConfiguration): string {\r\n    // Determine the user's account\r\n    // Ex: \"bob@example.com\"\r\n    const emailResult: IResultOrError<string> = Git._tryGetGitEmail();\r\n    if (emailResult.error) {\r\n      console.log(\r\n        [\r\n          `Error: ${emailResult.error.message}`,\r\n          'Unable to determine your Git configuration using this command:',\r\n          '',\r\n          '    git config user.email',\r\n          ''\r\n        ].join(os.EOL)\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    if (emailResult.result === undefined || emailResult.result.length === 0) {\r\n      console.log([\r\n        'This operation requires that a Git email be specified.',\r\n        '',\r\n        `If you didn't configure your email yet, try something like this:`,\r\n        '',\r\n        ...GitEmailPolicy.getEmailExampleLines(rushConfiguration),\r\n        ''\r\n      ].join(os.EOL));\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    return emailResult.result;\r\n  }\r\n\r\n  private static _tryGetGitEmail(): IResultOrError<string> {\r\n    if (Git._gitEmailResult === undefined) {\r\n      if (!Git.isGitPresent()) {\r\n        Git._gitEmailResult = {\r\n          error: new Error('Git isn\\'t present on the path')\r\n        };\r\n      } else {\r\n        try {\r\n          Git._gitEmailResult = {\r\n            result: Utilities.executeCommandAndCaptureOutput(\r\n              'git',\r\n              ['config', 'user.email'],\r\n              '.'\r\n            ).trim()\r\n          };\r\n        } catch (e) {\r\n          Git._gitEmailResult = {\r\n            error: e\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return Git._gitEmailResult;\r\n  }\r\n}\r\n"]}