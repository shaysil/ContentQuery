{"version":3,"file":"EnvironmentConfiguration.js","sourceRoot":"","sources":["../../src/api/EnvironmentConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,yBAAyB;AAmCzB;;;;;;GAMG;AACH,MAAa,wBAAwB;IAOnC;;OAEG;IACI,MAAM,KAAK,sBAAsB;QACtC,wBAAwB,CAAC,kBAAkB,EAAE,CAAC;QAC9C,OAAO,wBAAwB,CAAC,uBAAuB,CAAC;IAC1D,CAAC;IAED;;;OAGG;IACI,MAAM,KAAK,gBAAgB;QAChC,wBAAwB,CAAC,kBAAkB,EAAE,CAAC;QAC9C,OAAO,wBAAwB,CAAC,iBAAiB,CAAC;IACpD,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,UAAU;QACtB,wBAAwB,CAAC,KAAK,EAAE,CAAC;QAEjC,MAAM,mBAAmB,GAAa,EAAE,CAAC;QACzC,KAAK,MAAM,UAAU,IAAI,OAAO,CAAC,GAAG,EAAE;YACpC,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;gBACzE,MAAM,KAAK,GAAuB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBAC1D,6DAA6D;gBAC7D,MAAM,oBAAoB,GAAW,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;gBACvG,QAAQ,oBAAoB,EAAE;oBAC5B,8CAA8C,CAAC,CAAC;wBAC9C,wBAAwB,CAAC,uBAAuB,GAAG,KAAK,CAAC;wBACzD,MAAM;qBACP;oBAED,0DAAoD,CAAC,CAAC;wBACpD,wBAAwB,CAAC,iBAAiB,GAAG,KAAK,KAAK,MAAM,CAAC;wBAC9D,MAAM;qBACP;oBAED,uDAAmD;oBACnD;wBACE,uCAAuC;wBACvC,MAAM;oBACR;wBACE,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBACrC,MAAM;iBACT;aACF;SACF;QAED,kGAAkG;QAClG,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,MAAM,IAAI,KAAK,CACb,2FAA2F;gBAC3F,uCAAuC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACxE,CAAC;SACH;QAED,wBAAwB,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACtD,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,KAAK;QACjB,wBAAwB,CAAC,uBAAuB,GAAG,SAAS,CAAC;QAE7D,wBAAwB,CAAC,mBAAmB,GAAG,KAAK,CAAC;IACvD,CAAC;IAEO,MAAM,CAAC,kBAAkB;QAC/B,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,EAAE;YACjD,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;SACpG;IACH,CAAC;;AAjFc,4CAAmB,GAAY,KAAK,CAAC;AAIrC,0CAAiB,GAAY,KAAK,CAAC;AALpD,4DAmFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\n\r\n/**\r\n * Names of environment variables used by Rush.\r\n * @public\r\n */\r\nexport const enum EnvironmentVariableNames {\r\n  /**\r\n   * This variable overrides the temporary folder used by Rush.\r\n   * The default value is \"common/temp\" under the repository root.\r\n   */\r\n  RUSH_TEMP_FOLDER = 'RUSH_TEMP_FOLDER',\r\n\r\n  /**\r\n   * This variable overrides the version of Rush that will be installed by\r\n   * the version selector.  The default value is determined by the \"rushVersion\"\r\n   * field from rush.json.\r\n   */\r\n  RUSH_PREVIEW_VERSION = 'RUSH_PREVIEW_VERSION',\r\n\r\n  /**\r\n   * This variable selects a specific installation variant for Rush to use when installing\r\n   * and linking package dependencies.  For more information, see this article:\r\n   * https://rushjs.io/pages/advanced/installation_variants/\r\n   */\r\n  RUSH_VARIANT = 'RUSH_VARIANT',\r\n\r\n  /**\r\n   * If this variable is set to \"true\", Rush will create symlinks with absolute paths instead\r\n   * of relative paths. This can be necessary when a repository is moved during a build or\r\n   * if parts of a repository are moved into a sandbox.\r\n   */\r\n  RUSH_ABSOLUTE_SYMLINKS = 'RUSH_ABSOLUTE_SYMLINKS'\r\n}\r\n\r\n/**\r\n * Provides Rush-specific environment variable data. All Rush environment variables must start with \"RUSH_\". This class\r\n * is designed to be used by RushConfiguration.\r\n *\r\n * @remarks\r\n * Initialize will throw if any unknown parameters are present.\r\n */\r\nexport class EnvironmentConfiguration {\r\n  private static _hasBeenInitialized: boolean = false;\r\n\r\n  private static _rushTempFolderOverride: string | undefined;\r\n\r\n  private static _absoluteSymlinks: boolean = false;\r\n\r\n  /**\r\n   * An override for the common/temp folder path.\r\n   */\r\n  public static get rushTempFolderOverride(): string | undefined {\r\n    EnvironmentConfiguration._ensureInitialized();\r\n    return EnvironmentConfiguration._rushTempFolderOverride;\r\n  }\r\n\r\n  /**\r\n   * If \"true\", create symlinks with absolute paths instead of relative paths.\r\n   * See {@link EnvironmentVariableNames.RUSH_ABSOLUTE_SYMLINKS}\r\n   */\r\n  public static get absoluteSymlinks(): boolean {\r\n    EnvironmentConfiguration._ensureInitialized();\r\n    return EnvironmentConfiguration._absoluteSymlinks;\r\n  }\r\n\r\n  /**\r\n   * Reads and validates environment variables. If any are invalid, this function will throw.\r\n   */\r\n  public static initialize(): void {\r\n    EnvironmentConfiguration.reset();\r\n\r\n    const unknownEnvVariables: string[] = [];\r\n    for (const envVarName in process.env) {\r\n      if (process.env.hasOwnProperty(envVarName) && envVarName.match(/^RUSH_/i)) {\r\n        const value: string | undefined = process.env[envVarName];\r\n        // Environment variables are only case-insensitive on Windows\r\n        const normalizedEnvVarName: string = os.platform() === 'win32' ? envVarName.toUpperCase() : envVarName;\r\n        switch (normalizedEnvVarName) {\r\n          case EnvironmentVariableNames.RUSH_TEMP_FOLDER: {\r\n            EnvironmentConfiguration._rushTempFolderOverride = value;\r\n            break;\r\n          }\r\n\r\n          case EnvironmentVariableNames.RUSH_ABSOLUTE_SYMLINKS: {\r\n            EnvironmentConfiguration._absoluteSymlinks = value === 'true';\r\n            break;\r\n          }\r\n\r\n          case EnvironmentVariableNames.RUSH_PREVIEW_VERSION:\r\n          case EnvironmentVariableNames.RUSH_VARIANT:\r\n            // Handled by @microsoft/rush front end\r\n            break;\r\n          default:\r\n            unknownEnvVariables.push(envVarName);\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // This strictness intends to catch mistakes where variables are misspelled or not used correctly.\r\n    if (unknownEnvVariables.length > 0) {\r\n      throw new Error(\r\n        'The following environment variables were found with the \"RUSH_\" prefix, but they are not ' +\r\n        `recognized by this version of Rush: ${unknownEnvVariables.join(', ')}`\r\n      );\r\n    }\r\n\r\n    EnvironmentConfiguration._hasBeenInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Resets EnvironmentConfiguration into an un-initialized state.\r\n   */\r\n  public static reset(): void {\r\n    EnvironmentConfiguration._rushTempFolderOverride = undefined;\r\n\r\n    EnvironmentConfiguration._hasBeenInitialized = false;\r\n  }\r\n\r\n  private static _ensureInitialized(): void {\r\n    if (!EnvironmentConfiguration._hasBeenInitialized) {\r\n      throw new Error('The EnvironmentConfiguration must be initialized before values can be accessed.');\r\n    }\r\n  }\r\n}\r\n"]}