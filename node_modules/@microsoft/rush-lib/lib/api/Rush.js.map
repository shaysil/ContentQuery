{"version":3,"file":"Rush.js","sourceRoot":"","sources":["../../src/api/Rush.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,2BAAyB;AACzB,6BAA6B;AAC7B,iCAAiC;AAMjC,wEAAqE;AACrE,0DAAuD;AACvD,8DAA2D;AAC3D,oFAAiF;AAEjF;;;;GAIG;AACH,MAAa,IAAI;IAGf;;;;;;;;;OASG;IACI,MAAM,CAAC,MAAM,CAAC,eAAuB,EAAE,SAAkB;QAC9D,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAEpC,IAAI,CAAC,yDAA2B,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxD,4DAA4D;YAC5D,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;YACrB,OAAO;SACR;QAED,MAAM,MAAM,GAA0B,IAAI,6CAAqB,EAAE,CAAC;QAClE,MAAM,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAED;;;;;;;;;OASG;IACI,MAAM,CAAC,WAAW,CAAC,eAAuB,EAAE,SAAkB;QACnE,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAEpC,mCAAgB,CAAC,WAAW,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;IAC3D,CAAC;IAED;;;OAGG;IACI,MAAM,KAAK,OAAO;QACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,qBAAqB,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,mCAA4B,CAAC,CAAC;YAChH,MAAM,aAAa,GAAiB,OAAO,CAAC,qBAAqB,CAAC,CAAC;YACnE,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,OAAO,CAAC;SACvC;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEO,MAAM,CAAC,mBAAmB,CAAC,SAAkB;QACnD,OAAO,CAAC,GAAG,CACT,QAAG;YACH,MAAM,CAAC,IAAI,CAAC,iCAAiC,IAAI,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;YAC7G,MAAM,CAAC,IAAI,CAAC,MAAM,6BAAa,CAAC,cAAc,EAAE,CAAC;YACjD,QAAG,CACJ,CAAC;IACJ,CAAC;CACF;AAhED,oBAgEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { EOL } from 'os';\r\nimport * as path from 'path';\r\nimport * as colors from 'colors';\r\nimport {\r\n  IPackageJson,\r\n  FileConstants\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { RushCommandLineParser } from '../cli/RushCommandLineParser';\r\nimport { RushConstants } from '../logic/RushConstants';\r\nimport { RushXCommandLine } from '../cli/RushXCommandLine';\r\nimport { CommandLineMigrationAdvisor } from '../cli/CommandLineMigrationAdvisor';\r\n\r\n/**\r\n * General operations for the Rush engine.\r\n *\r\n * @public\r\n */\r\nexport class Rush {\r\n  private static _version: string;\r\n\r\n  /**\r\n   * This API is used by the `@microsoft/rush` front end to launch the \"rush\" command-line.\r\n   * Third-party tools should not use this API.  Instead, they should execute the \"rush\" binary\r\n   * and start a new NodeJS process.\r\n   *\r\n   * @param launcherVersion - The version of the `@microsoft/rush` wrapper used to call invoke the CLI.\r\n   * @param isManaged - True if the tool was invoked from within a project with a rush.json file, otherwise false. We\r\n   *  consider a project without a rush.json to be \"unmanaged\" and we'll print that to the command line when\r\n   *  the tool is executed. This is mainly used for debugging purposes.\r\n   */\r\n  public static launch(launcherVersion: string, isManaged: boolean): void {\r\n    Rush._printStartupBanner(isManaged);\r\n\r\n    if (!CommandLineMigrationAdvisor.checkArgv(process.argv)) {\r\n      // The migration advisor recognized an obsolete command-line\r\n      process.exitCode = 1;\r\n      return;\r\n    }\r\n\r\n    const parser: RushCommandLineParser = new RushCommandLineParser();\r\n    parser.execute();\r\n  }\r\n\r\n  /**\r\n   * This API is used by the `@microsoft/rush` front end to launch the \"rushx\" command-line.\r\n   * Third-party tools should not use this API.  Instead, they should execute the \"rushx\" binary\r\n   * and start a new NodeJS process.\r\n   *\r\n   * @param launcherVersion - The version of the `@microsoft/rush` wrapper used to call invoke the CLI.\r\n   * @param isManaged - True if the tool was invoked from within a project with a rush.json file, otherwise false. We\r\n   *  consider a project without a rush.json to be \"unmanaged\" and we'll print that to the command line when\r\n   *  the tool is executed. This is mainly used for debugging purposes.\r\n   */\r\n  public static launchRushX(launcherVersion: string, isManaged: boolean): void {\r\n    Rush._printStartupBanner(isManaged);\r\n\r\n    RushXCommandLine.launchRushX(launcherVersion, isManaged);\r\n  }\r\n\r\n  /**\r\n   * The currently executing version of the \"rush-lib\" library.\r\n   * This is the same as the Rush tool version for that release.\r\n   */\r\n  public static get version(): string {\r\n    if (!Rush._version) {\r\n      const myPackageJsonFilename: string = path.resolve(path.join(__dirname, '..', '..', FileConstants.PackageJson));\r\n      const myPackageJson: IPackageJson = require(myPackageJsonFilename);\r\n      Rush._version = myPackageJson.version;\r\n    }\r\n\r\n    return Rush._version;\r\n  }\r\n\r\n  private static _printStartupBanner(isManaged: boolean): void {\r\n    console.log(\r\n      EOL +\r\n      colors.bold(`Rush Multi-Project Build Tool ${Rush.version}` + colors.yellow(isManaged ? '' : ' (unmanaged)')) +\r\n      colors.cyan(` - ${RushConstants.rushWebSiteUrl}`) +\r\n      EOL\r\n    );\r\n  }\r\n}\r\n"]}