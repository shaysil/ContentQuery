{"version":3,"file":"VersionMismatchFinder.js","sourceRoot":"","sources":["../../src/api/VersionMismatchFinder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\n\r\nimport { RushConfiguration } from './RushConfiguration';\r\nimport { RushConstants } from '../logic/RushConstants';\r\nimport { PackageJsonDependency, DependencyType, PackageJsonEditor } from './PackageJsonEditor';\r\nimport { CommonVersionsConfiguration } from './CommonVersionsConfiguration';\r\n\r\nexport interface IVersionMismatchFinderProject {\r\n  packageName: string;\r\n  cyclicDependencyProjects: Set<string>;\r\n  packageJsonEditor: PackageJsonEditor;\r\n  skipRushCheck?: boolean;\r\n}\r\n\r\nexport interface IVersionMismatchFinderRushCheckOptions {\r\n  variant?: string | undefined;\r\n}\r\n\r\nexport interface IVersionMismatchFinderEnsureConsistentVersionsOptions {\r\n  variant?: string | undefined;\r\n}\r\n\r\nexport interface IVersionMismatchFinderGetMismatchesOptions {\r\n  variant?: string | undefined;\r\n}\r\n\r\nexport class VersionMismatchFinder {\r\n /* store it like this:\r\n  * {\r\n  *   \"@types/node\": {\r\n  *     \"1.0.0\": [ '@ms/rush' ]\r\n  *   }\r\n  * }\r\n  */\r\n  private _allowedAlternativeVersion:  Map<string, ReadonlyArray<string>>;\r\n  private _mismatches: Map<string, Map<string, string[]>>;\r\n  private _projects: IVersionMismatchFinderProject[];\r\n\r\n  public static rushCheck(\r\n    rushConfiguration: RushConfiguration,\r\n    options: IVersionMismatchFinderRushCheckOptions = {}\r\n  ): void {\r\n    VersionMismatchFinder._checkForInconsistentVersions(rushConfiguration, {\r\n      ...options,\r\n      isRushCheckCommand: true\r\n    });\r\n  }\r\n\r\n  public static ensureConsistentVersions(\r\n    rushConfiguration: RushConfiguration,\r\n    options: IVersionMismatchFinderEnsureConsistentVersionsOptions = {}\r\n  ): void {\r\n    VersionMismatchFinder._checkForInconsistentVersions(rushConfiguration, {\r\n      ...options,\r\n      isRushCheckCommand: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Populates a version mismatch finder object given a Rush Configuration.\r\n   * Intentionally considers preferred versions.\r\n   */\r\n  public static getMismatches(\r\n    rushConfiguration: RushConfiguration,\r\n    options: IVersionMismatchFinderRushCheckOptions = {}\r\n  ): VersionMismatchFinder {\r\n    // Collect all the preferred versions into a single table\r\n    const allPreferredVersions: { [dependency: string]: string } = {};\r\n\r\n    const commonVersions: CommonVersionsConfiguration = rushConfiguration.getCommonVersions(options.variant);\r\n\r\n    commonVersions.getAllPreferredVersions().forEach((version: string, dependency: string) => {\r\n      allPreferredVersions[dependency] = version;\r\n    });\r\n\r\n    // Create a fake project for the purposes of reporting conflicts with preferredVersions\r\n    // or xstitchPreferredVersions from common-versions.json\r\n    const projects: IVersionMismatchFinderProject[] = [...rushConfiguration.projects];\r\n\r\n    projects.push({\r\n      packageName: 'preferred versions from ' + RushConstants.commonVersionsFilename,\r\n      cyclicDependencyProjects: new Set<string>(),\r\n      packageJsonEditor: PackageJsonEditor.fromObject(\r\n        { dependencies: allPreferredVersions } as any, 'preferred-versions.json') // tslint:disable-line:no-any\r\n    });\r\n\r\n    return new VersionMismatchFinder(\r\n      projects,\r\n      commonVersions.allowedAlternativeVersions\r\n    );\r\n  }\r\n\r\n  private static _checkForInconsistentVersions(\r\n    rushConfiguration: RushConfiguration,\r\n    options: {\r\n      isRushCheckCommand: boolean;\r\n      variant?: string | undefined;\r\n    }): void {\r\n\r\n    if (rushConfiguration.ensureConsistentVersions || options.isRushCheckCommand) {\r\n      const mismatchFinder: VersionMismatchFinder\r\n        = VersionMismatchFinder.getMismatches(rushConfiguration, options);\r\n\r\n      mismatchFinder.print();\r\n\r\n      if (mismatchFinder.numberOfMismatches) {\r\n        console.log(colors.red(`Found ${mismatchFinder.numberOfMismatches} mis-matching dependencies!`));\r\n        process.exit(1);\r\n      } else {\r\n        if (options.isRushCheckCommand) {\r\n          console.log(colors.green(`Found no mis-matching dependencies!`));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(projects: IVersionMismatchFinderProject[],\r\n    allowedAlternativeVersions?: Map<string, ReadonlyArray<string>>) {\r\n    this._projects = projects;\r\n    this._mismatches = new Map<string, Map<string, string[]>>();\r\n    this._allowedAlternativeVersion = allowedAlternativeVersions || new Map<string, ReadonlyArray<string>>();\r\n    this._analyze();\r\n  }\r\n\r\n  public get numberOfMismatches(): number {\r\n    return this._mismatches.size;\r\n  }\r\n\r\n  public getMismatches(): Array<string> {\r\n    return this._getKeys(this._mismatches);\r\n  }\r\n\r\n  public getVersionsOfMismatch(mismatch: string): Array<string> | undefined {\r\n    return this._mismatches.has(mismatch)\r\n      ? this._getKeys(this._mismatches.get(mismatch))\r\n      : undefined;\r\n  }\r\n\r\n  public getConsumersOfMismatch(mismatch: string, version: string): Array<string> | undefined {\r\n    const mismatchedPackage: Map<string, string[]> | undefined = this._mismatches.get(mismatch);\r\n    if (!mismatchedPackage) {\r\n      return undefined;\r\n    }\r\n\r\n    const mismatchedVersion: string[] | undefined = mismatchedPackage.get(version);\r\n    return mismatchedVersion;\r\n  }\r\n\r\n  public print(): void {\r\n    // Iterate over the list. For any dependency with mismatching versions, print the projects\r\n    this.getMismatches().forEach((dependency: string) => {\r\n      console.log(colors.yellow(dependency));\r\n      this.getVersionsOfMismatch(dependency)!.forEach((version: string) => {\r\n        console.log(`  ${version}`);\r\n        this.getConsumersOfMismatch(dependency, version)!.forEach((project: string) => {\r\n          console.log(`   - ${project}`);\r\n        });\r\n      });\r\n      console.log();\r\n    });\r\n  }\r\n\r\n  private _analyze(): void {\r\n    this._projects.forEach((project: IVersionMismatchFinderProject) => {\r\n      if (!project.skipRushCheck) {\r\n        // NOTE: We do not consider peer dependencies here.  The purpose of \"rush check\" is\r\n        // mainly to avoid side-by-side duplicates in the node_modules folder, whereas\r\n        // peer dependencies are just a compatibility statement that will be satisfied by a\r\n        // regular dependency.  (It might be useful for Rush to help people keep their peer dependency\r\n        // patterns consistent, but on the other hand different projects may have different\r\n        // levels of compatibility -- we should wait for someone to actually request this feature\r\n        // before we get into that.)\r\n        const dependencies: Array<PackageJsonDependency> = [\r\n          ...project.packageJsonEditor.dependencyList,\r\n          ...project.packageJsonEditor.devDependencyList\r\n        ];\r\n\r\n        dependencies.forEach((dependency: PackageJsonDependency) => {\r\n          if (dependency.dependencyType !== DependencyType.Peer) {\r\n            const version: string = dependency.version!;\r\n\r\n            const isCyclic: boolean = project.cyclicDependencyProjects.has(dependency.name);\r\n\r\n            if (this._isVersionAllowedAlternative(dependency.name, version)) {\r\n              return;\r\n            }\r\n\r\n            const name: string = dependency.name + (isCyclic ? ' (cyclic)' : '');\r\n\r\n            if (!this._mismatches.has(name)) {\r\n              this._mismatches.set(name, new Map<string, string[]>());\r\n            }\r\n\r\n            const dependencyVersions: Map<string, string[]> = this._mismatches.get(name)!;\r\n\r\n            if (!dependencyVersions.has(version)) {\r\n              dependencyVersions.set(version, []);\r\n            }\r\n            dependencyVersions.get(version)!.push(project.packageName);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    this._mismatches.forEach((mismatches: Map<string, string[]>, project: string) => {\r\n      if (mismatches.size <= 1) {\r\n        this._mismatches.delete(project);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _isVersionAllowedAlternative(\r\n    dependency: string,\r\n    version: string): boolean {\r\n\r\n    const allowedAlternatives: ReadonlyArray<string> | undefined = this._allowedAlternativeVersion.get(dependency);\r\n    return Boolean(allowedAlternatives && allowedAlternatives.indexOf(version) > -1);\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private _getKeys(iterable: Map<string, any> | undefined): string[] {\r\n    const keys: string[] = [];\r\n    if (iterable) {\r\n      // tslint:disable-next-line:no-any\r\n      iterable.forEach((value: any, key: string) => {\r\n        keys.push(key);\r\n      });\r\n    }\r\n    return keys;\r\n  }\r\n}\r\n"]}