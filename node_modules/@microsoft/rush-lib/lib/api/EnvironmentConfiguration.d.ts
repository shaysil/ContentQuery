/**
 * Names of environment variables used by Rush.
 * @public
 */
export declare const enum EnvironmentVariableNames {
    /**
     * This variable overrides the temporary folder used by Rush.
     * The default value is "common/temp" under the repository root.
     */
    RUSH_TEMP_FOLDER = "RUSH_TEMP_FOLDER",
    /**
     * This variable overrides the version of Rush that will be installed by
     * the version selector.  The default value is determined by the "rushVersion"
     * field from rush.json.
     */
    RUSH_PREVIEW_VERSION = "RUSH_PREVIEW_VERSION",
    /**
     * This variable selects a specific installation variant for Rush to use when installing
     * and linking package dependencies.  For more information, see this article:
     * https://rushjs.io/pages/advanced/installation_variants/
     */
    RUSH_VARIANT = "RUSH_VARIANT",
    /**
     * If this variable is set to "true", Rush will create symlinks with absolute paths instead
     * of relative paths. This can be necessary when a repository is moved during a build or
     * if parts of a repository are moved into a sandbox.
     */
    RUSH_ABSOLUTE_SYMLINKS = "RUSH_ABSOLUTE_SYMLINKS"
}
/**
 * Provides Rush-specific environment variable data. All Rush environment variables must start with "RUSH_". This class
 * is designed to be used by RushConfiguration.
 *
 * @remarks
 * Initialize will throw if any unknown parameters are present.
 */
export declare class EnvironmentConfiguration {
    private static _hasBeenInitialized;
    private static _rushTempFolderOverride;
    private static _absoluteSymlinks;
    /**
     * An override for the common/temp folder path.
     */
    static readonly rushTempFolderOverride: string | undefined;
    /**
     * If "true", create symlinks with absolute paths instead of relative paths.
     * See {@link EnvironmentVariableNames.RUSH_ABSOLUTE_SYMLINKS}
     */
    static readonly absoluteSymlinks: boolean;
    /**
     * Reads and validates environment variables. If any are invalid, this function will throw.
     */
    static initialize(): void;
    /**
     * Resets EnvironmentConfiguration into an un-initialized state.
     */
    static reset(): void;
    private static _ensureInitialized;
}
