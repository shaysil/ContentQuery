{"version":3,"file":"RushCommandLineParser.js","sourceRoot":"","sources":["../../src/cli/RushCommandLineParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\nimport { CommandLineParser, CommandLineFlagParameter, CommandLineAction } from '@microsoft/ts-command-line';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { RushConstants } from '../logic/RushConstants';\r\nimport { CommandLineConfiguration } from '../api/CommandLineConfiguration';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { BaseScriptAction } from '../cli/scriptActions/BaseScriptAction';\r\n\r\nimport { AddAction } from './actions/AddAction';\r\nimport { ChangeAction } from './actions/ChangeAction';\r\nimport { CheckAction } from './actions/CheckAction';\r\nimport { UpdateAction } from './actions/UpdateAction';\r\nimport { InstallAction } from './actions/InstallAction';\r\nimport { InitAction } from './actions/InitAction';\r\nimport { LinkAction } from './actions/LinkAction';\r\nimport { PublishAction } from './actions/PublishAction';\r\nimport { PurgeAction } from './actions/PurgeAction';\r\nimport { UnlinkAction } from './actions/UnlinkAction';\r\nimport { ScanAction } from './actions/ScanAction';\r\nimport { VersionAction } from './actions/VersionAction';\r\n\r\nimport { BulkScriptAction } from './scriptActions/BulkScriptAction';\r\nimport { GlobalScriptAction } from './scriptActions/GlobalScriptAction';\r\n\r\nimport { Telemetry } from '../logic/Telemetry';\r\nimport { AlreadyReportedError } from '../utilities/AlreadyReportedError';\r\nimport { RushGlobalFolder } from '../api/RushGlobalFolder';\r\n\r\nexport class RushCommandLineParser extends CommandLineParser {\r\n  public telemetry: Telemetry | undefined;\r\n  public rushConfiguration: RushConfiguration;\r\n  public rushGlobalFolder: RushGlobalFolder;\r\n\r\n  private _debugParameter: CommandLineFlagParameter;\r\n\r\n  constructor() {\r\n    super({\r\n      toolFilename: 'rush',\r\n      toolDescription: 'Rush makes life easier for JavaScript developers who develop, build, and publish'\r\n        + ' many packages from a central Git repo.  It is designed to handle very large repositories'\r\n        + ' supporting many projects and people.  Rush provides policies, protections, and customizations'\r\n        + ' that help coordinate teams and safely onboard new contributors.  Rush also generates change logs'\r\n        + ' and automates package publishing.  It can manage decoupled subsets of projects with different'\r\n        + ' release and versioning strategies.  A full API is included to facilitate integration with other'\r\n        + ' automation tools.  If you are looking for a proven turnkey solution for monorepo management,'\r\n        + ' Rush is for you.'\r\n    });\r\n    this._populateActions();\r\n  }\r\n\r\n  public get isDebug(): boolean {\r\n    return this._debugParameter.value;\r\n  }\r\n\r\n  public flushTelemetry(): void {\r\n    if (this.telemetry) {\r\n      this.telemetry.flush();\r\n    }\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._debugParameter = this.defineFlagParameter({\r\n      parameterLongName: '--debug',\r\n      parameterShortName: '-d',\r\n      description: 'Show the full call stack if an error occurs while executing the tool'\r\n    });\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    // Defensively set the exit code to 1 so if Rush crashes for whatever reason, we'll have a nonzero exit code.\r\n    // For example, NodeJS currently has the inexcusable design of terminating with zero exit code when\r\n    // there is an uncaught promise exception.  This will supposedly be fixed in NodeJS 9.\r\n    // Ideally we should do this for all the Rush actions, but \"rush build\" is the most critical one\r\n    // -- if it falsely appears to succeed, we could merge bad PRs, publish empty packages, etc.\r\n    process.exitCode = 1;\r\n\r\n    return this._wrapOnExecute().catch((error: Error) => {\r\n      this._reportErrorAndSetExitCode(error);\r\n    }).then(() => {\r\n      // If we make it here, everything went fine, so reset the exit code back to 0\r\n      process.exitCode = 0;\r\n    });\r\n  }\r\n\r\n  private _wrapOnExecute(): Promise<void> {\r\n    try {\r\n      if (this.rushConfiguration) {\r\n        this.telemetry = new Telemetry(this.rushConfiguration);\r\n      }\r\n      return super.onExecute().then(() => {\r\n        if (this.telemetry) {\r\n          this.flushTelemetry();\r\n        }\r\n      });\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n\r\n  private _populateActions(): void {\r\n    try {\r\n      const rushJsonFilename: string | undefined = RushConfiguration.tryFindRushJsonLocation();\r\n      if (rushJsonFilename) {\r\n        this.rushConfiguration = RushConfiguration.loadFromConfigurationFile(rushJsonFilename);\r\n      }\r\n\r\n      this.rushGlobalFolder = new RushGlobalFolder();\r\n\r\n      this.addAction(new AddAction(this));\r\n      this.addAction(new ChangeAction(this));\r\n      this.addAction(new CheckAction(this));\r\n      this.addAction(new InstallAction(this));\r\n      this.addAction(new InitAction(this));\r\n      this.addAction(new LinkAction(this));\r\n      this.addAction(new PublishAction(this));\r\n      this.addAction(new PurgeAction(this));\r\n      this.addAction(new ScanAction(this));\r\n      this.addAction(new UpdateAction(this));\r\n      this.addAction(new UnlinkAction(this));\r\n      this.addAction(new VersionAction(this));\r\n\r\n      this._populateScriptActions();\r\n\r\n    } catch (error) {\r\n      this._reportErrorAndSetExitCode(error);\r\n    }\r\n  }\r\n\r\n  private _populateScriptActions(): void {\r\n    let commandLineConfiguration: CommandLineConfiguration | undefined = undefined;\r\n\r\n    // If there is not a rush.json file, we still want \"build\" and \"rebuild\" to appear in the\r\n    // command-line help\r\n    if (this.rushConfiguration) {\r\n      const commandLineConfigFile: string = path.join(\r\n        this.rushConfiguration.commonRushConfigFolder, RushConstants.commandLineFilename\r\n      );\r\n\r\n      commandLineConfiguration = CommandLineConfiguration.loadFromFileOrDefault(commandLineConfigFile);\r\n    }\r\n\r\n    // always create a build and a rebuild command\r\n    this.addAction(new BulkScriptAction({\r\n      actionName: 'build',\r\n      summary: '(EXPERIMENTAL) Build all projects that haven\\'t been built, or have changed since they were last '\r\n        + 'built.',\r\n      documentation: 'This command is similar to \"rush rebuild\", except that \"rush build\" performs'\r\n        + ' an incremental build. In other words, it only builds projects whose source files have'\r\n        + ' changed since the last successful build. The analysis requires a Git working tree, and'\r\n        + ' only considers source files that are tracked by Git and whose path is under the project folder.'\r\n        + ' (For more details about this algorithm, see the documentation for the \"package-deps-hash\"'\r\n        + ' NPM package.) The incremental build state is tracked in a file \"package-deps.json\" which should'\r\n        + ' NOT be added to Git.  The build command is tracked by the \"arguments\" field in this JSON file;'\r\n        + ' a full rebuild is forced whenever the command has changed (e.g. \"--production\" or not).',\r\n      parser: this,\r\n      commandLineConfiguration: commandLineConfiguration,\r\n\r\n      enableParallelism: true,\r\n      ignoreMissingScript: false\r\n    }));\r\n\r\n    this.addAction(new BulkScriptAction({\r\n      actionName: 'rebuild',\r\n      summary: 'Clean and rebuild the entire set of projects',\r\n      documentation: 'This command assumes that the package.json file for each project contains'\r\n        + ' a \"scripts\" entry for \"npm run build\" that performs a full clean build.'\r\n        + ' Rush invokes this script to build each project that is registered in rush.json.'\r\n        + ' Projects are built in parallel where possible, but always respecting the dependency'\r\n        + ' graph for locally linked projects.  The number of simultaneous processes will be'\r\n        + ' based on the number of machine cores unless overridden by the --parallelism flag.'\r\n        + ' (For an incremental build, see \"rush build\" instead of \"rush rebuild\".)',\r\n      parser: this,\r\n      commandLineConfiguration: commandLineConfiguration,\r\n\r\n      enableParallelism: true,\r\n      ignoreMissingScript: false\r\n    }));\r\n\r\n    if (!commandLineConfiguration) {\r\n      // If there is not a rush.json file, so don't attempt to define custom commands/parameters\r\n      return;\r\n    }\r\n\r\n    // Register each custom command\r\n    for (const command of commandLineConfiguration.commands) {\r\n      if (this.tryGetAction(command.name)) {\r\n        throw new Error(`${RushConstants.commandLineFilename} defines a command \"${command.name}\"`\r\n          + ` using a name that already exists`);\r\n      }\r\n\r\n      switch (command.commandKind) {\r\n        case 'bulk':\r\n          this.addAction(new BulkScriptAction({\r\n            actionName: command.name,\r\n            summary: command.summary,\r\n            documentation: command.description || command.summary,\r\n            safeForSimultaneousRushProcesses: command.safeForSimultaneousRushProcesses,\r\n\r\n            parser: this,\r\n            commandLineConfiguration: commandLineConfiguration,\r\n\r\n            enableParallelism: command.enableParallelism,\r\n            ignoreMissingScript: command.ignoreMissingScript || false\r\n          }));\r\n          break;\r\n        case 'global':\r\n          this.addAction(new GlobalScriptAction({\r\n            actionName: command.name,\r\n            summary: command.summary,\r\n            documentation: command.description || command.summary,\r\n            safeForSimultaneousRushProcesses: command.safeForSimultaneousRushProcesses,\r\n\r\n            parser: this,\r\n            commandLineConfiguration: commandLineConfiguration,\r\n\r\n            shellCommand: command.shellCommand\r\n          }));\r\n          break;\r\n        default:\r\n          throw new Error(`${RushConstants.commandLineFilename} defines a command \"${command!.name}\"`\r\n            + ` using an unsupported command kind \"${command!.commandKind}\"`);\r\n      }\r\n    }\r\n\r\n    // Check for any invalid associations\r\n    for (const parameter of commandLineConfiguration.parameters) {\r\n      for (const associatedCommand of parameter.associatedCommands) {\r\n        const action: CommandLineAction | undefined = this.tryGetAction(associatedCommand);\r\n        if (!action) {\r\n          throw new Error(`${RushConstants.commandLineFilename} defines a parameter \"${parameter.longName}\"`\r\n            + ` that is associated with a nonexistent command \"${associatedCommand}\"`);\r\n        }\r\n        if (!(action instanceof BaseScriptAction)) {\r\n          throw new Error(`${RushConstants.commandLineFilename} defines a parameter \"${parameter.longName}\"`\r\n            + ` that is associated with a command \"${associatedCommand}\", but that command does not`\r\n            + ` support custom parameters`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _reportErrorAndSetExitCode(error: Error): void {\r\n    if (!(error instanceof AlreadyReportedError)) {\r\n      const prefix: string = 'ERROR: ';\r\n      console.error(os.EOL + colors.red(Utilities.wrapWords(prefix + error.message)));\r\n    }\r\n\r\n    if (this._debugParameter.value) {\r\n      // If catchSyncErrors() called this, then show a call stack similar to what NodeJS\r\n      // would show for an uncaught error\r\n      console.error(os.EOL + error.stack);\r\n    }\r\n\r\n    this.flushTelemetry();\r\n\r\n    // Ideally we want to eliminate all calls to process.exit() from our code, and replace them\r\n    // with normal control flow that properly cleans up its data structures.\r\n    // For this particular call, we have a problem that the RushCommandLineParser constructor\r\n    // performs nontrivial work that can throw an exception.  Either the Rush class would need\r\n    // to handle reporting for those exceptions, or else _populateActions() should be moved\r\n    // to a RushCommandLineParser lifecycle stage that can handle it.\r\n    if (process.exitCode > 0) {\r\n      process.exit(process.exitCode);\r\n    } else {\r\n      process.exit(1);\r\n    }\r\n  }\r\n}\r\n"]}