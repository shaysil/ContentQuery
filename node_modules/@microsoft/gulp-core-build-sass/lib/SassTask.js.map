{"version":3,"file":"SassTask.js","sourceRoot":"","sources":["../src/SassTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as Gulp from 'gulp';\r\nimport { EOL } from 'os';\r\n\r\nimport { GulpTask } from '@microsoft/gulp-core-build';\r\nimport { splitStyles } from '@microsoft/load-themed-styles';\r\nimport {\r\n  FileSystem,\r\n  JsonFile,\r\n  LegacyAdapters\r\n} from '@microsoft/node-core-library';\r\nimport * as glob from 'glob';\r\nimport * as nodeSass from 'node-sass';\r\nimport * as postcss from 'postcss';\r\nimport * as CleanCss from 'clean-css';\r\nimport * as autoprefixer from 'autoprefixer';\r\nimport * as cssModules from 'postcss-modules';\r\nimport * as crypto from 'crypto';\r\n\r\nexport interface ISassTaskConfig {\r\n  /**\r\n   * An optional parameter for text to include in the generated TypeScript file.\r\n   */\r\n  preamble?: string;\r\n\r\n  /**\r\n   * An optional parameter for text to include at the end of the generated TypeScript file.\r\n   */\r\n  postamble?: string;\r\n\r\n  /**\r\n   * An array of glob patterns for locating files.\r\n   */\r\n  sassMatch?: string[];\r\n\r\n  /**\r\n   * If this option is specified, ALL files will be treated as module.sass or module.scss and will\r\n   * automatically generate a corresponding TypeScript file. All classes will be\r\n   * appended with a hash to help ensure uniqueness on a page. This file can be\r\n   * imported directly, and will contain an object describing the mangled class names.\r\n   */\r\n  useCSSModules?: boolean;\r\n\r\n  /**\r\n   * If false, we will set the CSS property naming warning to verbose message while the module generates\r\n   * to prevent task exit with exitcode: 1.\r\n   * Default value is true\r\n   */\r\n  warnOnCssInvalidPropertyName?: boolean;\r\n\r\n  /**\r\n   * If true, we will generate a CSS in the lib folder. If false, the CSS is directly embedded\r\n   * into the TypeScript file\r\n   */\r\n  dropCssFiles?: boolean;\r\n\r\n  /**\r\n   * If files are matched by sassMatch which do not end in .module.sass or .module.scss, log a warning.\r\n   */\r\n  warnOnNonCSSModules?: boolean;\r\n\r\n  /**\r\n   * If this option is specified, module CSS will be exported using the name provided. If an\r\n   * empty value is specified, the styles will be exported using 'export =', rather than a\r\n   * named export. By default we use the 'default' export name.\r\n   */\r\n  moduleExportName?: string;\r\n\r\n  /**\r\n   * Allows the override of the options passed to clean-css.  Options such a returnPromise and\r\n   * sourceMap will be ignored.\r\n   */\r\n  cleanCssOptions?: CleanCss.Options;\r\n}\r\n\r\nconst _classMaps: { [file: string]: Object } = {};\r\n\r\nexport class SassTask extends GulpTask<ISassTaskConfig> {\r\n  public cleanMatch: string[] = [\r\n    'src/**/*.sass.ts',\r\n    'src/**/*.scss.ts'\r\n  ];\r\n\r\n  private _postCSSPlugins: postcss.AcceptedPlugin[] = [\r\n    autoprefixer({ browsers: ['> 1%', 'last 2 versions', 'ie >= 10'] })\r\n  ];\r\n\r\n  private _modulePostCssAdditionalPlugins: postcss.AcceptedPlugin[] = [\r\n    cssModules({\r\n      getJSON: this._generateModuleStub.bind(this),\r\n      generateScopedName: this._generateScopedName.bind(this)\r\n    })\r\n  ];\r\n\r\n  constructor() {\r\n    super(\r\n      'sass',\r\n      {\r\n        preamble: '/* tslint:disable */',\r\n        postamble: '/* tslint:enable */',\r\n        sassMatch: [\r\n          'src/**/*.scss',\r\n          'src/**/*.sass'\r\n        ],\r\n        useCSSModules: false,\r\n        warnOnCssInvalidPropertyName: true,\r\n        dropCssFiles: false,\r\n        warnOnNonCSSModules: false\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return JsonFile.load(path.join(__dirname, 'sass.schema.json'));\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp): Promise<void> | undefined {\r\n    if (!this.taskConfig.sassMatch) {\r\n      return Promise.reject(new Error('taskConfig.sassMatch must be defined'));\r\n    }\r\n\r\n    return this._globAll(...this.taskConfig.sassMatch).then((matches: string[]) => {\r\n      return Promise.all(matches.map((match) => this._processFile(match)));\r\n    }).then(() => { /* collapse void[] to void */ });\r\n  }\r\n\r\n  private _generateModuleStub(cssFileName: string, json: Object): void {\r\n    _classMaps[cssFileName] = json;\r\n  }\r\n\r\n  private _generateScopedName(name: string, fileName: string, css: string): string {\r\n    return name + '_' + crypto.createHmac('sha1', fileName).update(css).digest('hex').substring(0, 8);\r\n  }\r\n\r\n  private _processFile(filePath: string): Promise<void> {\r\n    // Ignore files that start with underscores\r\n    if (path.basename(filePath).match(/^\\_/)) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const isFileModuleCss: boolean = !!filePath.match(/\\.module\\.s(a|c)ss/);\r\n    const processAsModuleCss: boolean = isFileModuleCss || !!this.taskConfig.useCSSModules;\r\n\r\n    if (!isFileModuleCss && !this.taskConfig.useCSSModules && this.taskConfig.warnOnNonCSSModules) {\r\n      // If the file doesn't end with .module.scss and we don't treat all files as module-scss, warn\r\n      const relativeFilePath: string = path.relative(this.buildConfig.rootPath, filePath);\r\n      this.logWarning(`${relativeFilePath}: filename should end with module.sass or module.scss`);\r\n    }\r\n\r\n    let cssOutputPath: string | undefined = undefined;\r\n    let cssOutputPathAbsolute: string | undefined = undefined;\r\n    if (this.taskConfig.dropCssFiles) {\r\n      const srcRelativePath: string = path.relative(\r\n        path.join(this.buildConfig.rootPath, this.buildConfig.srcFolder),\r\n        filePath\r\n      );\r\n      cssOutputPath = path.join(this.buildConfig.libFolder, srcRelativePath);\r\n      cssOutputPath = cssOutputPath.replace(/\\.s(c|a)ss$/, '.css');\r\n      cssOutputPathAbsolute = path.join(this.buildConfig.rootPath, cssOutputPath);\r\n    }\r\n\r\n    return LegacyAdapters.convertCallbackToPromise(\r\n      nodeSass.render,\r\n      {\r\n        file: filePath,\r\n        importer: (url: string) => ({ file: this._patchSassUrl(url) }),\r\n        sourceMap: this.taskConfig.dropCssFiles,\r\n        sourceMapContents: true,\r\n        omitSourceMapUrl: true,\r\n        outFile: cssOutputPath\r\n      }\r\n    ).catch((error: nodeSass.SassError) => {\r\n      this.fileError(filePath, error.line, error.column, error.name, error.message);\r\n      throw new Error(error.message);\r\n    }).then((result: nodeSass.Result) => {\r\n      const options: postcss.ProcessOptions = {\r\n        from: filePath\r\n      };\r\n      if (result.map && !this.buildConfig.production) {\r\n        options.map = {\r\n          prev: result.map.toString() // Pass the source map through to postcss\r\n        };\r\n      }\r\n\r\n      const plugins: postcss.AcceptedPlugin[] = [\r\n        ...this._postCSSPlugins,\r\n        ...(processAsModuleCss ? this._modulePostCssAdditionalPlugins : [])\r\n      ];\r\n      return postcss(plugins).process(result.css.toString(), options) as PromiseLike<postcss.Result>;\r\n    }).then((result: postcss.Result) => {\r\n      let cleanCssOptions: CleanCss.Options = { level: 1, returnPromise: true };\r\n      if (!!this.taskConfig.cleanCssOptions) {\r\n        cleanCssOptions = { ...this.taskConfig.cleanCssOptions, returnPromise: true };\r\n      }\r\n      cleanCssOptions.sourceMap = !!result.map;\r\n\r\n      const cleanCss: CleanCss.MinifierPromise = new CleanCss(cleanCssOptions);\r\n      return cleanCss.minify(result.css.toString(), result.map ? result.map.toString() : undefined);\r\n    }).then((result: CleanCss.Output) => {\r\n      if (cssOutputPathAbsolute) {\r\n        const generatedFileLines: string[] = [\r\n          result.styles.toString()\r\n        ];\r\n        if (result.sourceMap && !this.buildConfig.production) {\r\n          const encodedSourceMap: string = Buffer.from(result.sourceMap.toString()).toString('base64');\r\n          generatedFileLines.push(...[\r\n            `/*# sourceMappingURL=data:application/json;base64,${encodedSourceMap} */`\r\n          ]);\r\n        }\r\n\r\n        FileSystem.writeFile(cssOutputPathAbsolute, generatedFileLines.join(EOL), { ensureFolderExists: true });\r\n      }\r\n\r\n      const scssTsOutputPath: string = `${filePath}.ts`;\r\n      const classNames: Object = _classMaps[filePath];\r\n      let exportClassNames: string = '';\r\n      const content: string | undefined = result.styles;\r\n\r\n      if (classNames) {\r\n        const classNamesLines: string[] = [\r\n          'const styles = {'\r\n        ];\r\n\r\n        const classKeys: string[] = Object.keys(classNames);\r\n        classKeys.forEach((key: string, index: number) => {\r\n          const value: string = classNames[key];\r\n          let line: string = '';\r\n          if (key.indexOf('-') !== -1) {\r\n            const message: string = `The local CSS class '${key}' is not camelCase and will not be type-safe.`;\r\n            this.taskConfig.warnOnCssInvalidPropertyName ?\r\n              this.logWarning(message) :\r\n              this.logVerbose(message);\r\n            line = `  '${key}': '${value}'`;\r\n          } else {\r\n            line = `  ${key}: '${value}'`;\r\n          }\r\n\r\n          if ((index + 1) <= classKeys.length) {\r\n            line += ',';\r\n          }\r\n\r\n          classNamesLines.push(line);\r\n        });\r\n\r\n        let exportString: string = 'export default styles;';\r\n\r\n        if (this.taskConfig.moduleExportName === '') {\r\n          exportString = 'export = styles;';\r\n        } else if (!!this.taskConfig.moduleExportName) {\r\n          // exportString = `export const ${this.taskConfig.moduleExportName} = styles;`;\r\n        }\r\n\r\n        classNamesLines.push(\r\n          '};',\r\n          '',\r\n          exportString\r\n        );\r\n\r\n        exportClassNames = classNamesLines.join(EOL);\r\n      }\r\n\r\n      let lines: string[] = [];\r\n\r\n      lines.push(this.taskConfig.preamble || '');\r\n\r\n      if (cssOutputPathAbsolute) {\r\n        lines = lines.concat([\r\n          `require(${JSON.stringify(`./${path.basename(cssOutputPathAbsolute)}`)});`,\r\n          exportClassNames\r\n        ]);\r\n      } else if (!!content) {\r\n        lines = lines.concat([\r\n          'import { loadStyles } from \\'@microsoft/load-themed-styles\\';',\r\n          '',\r\n          exportClassNames,\r\n          '',\r\n          `loadStyles(${JSON.stringify(splitStyles(content))});`\r\n        ]);\r\n      }\r\n\r\n      lines.push(this.taskConfig.postamble || '');\r\n\r\n      const generatedTsFile: string = (\r\n        lines\r\n          .join(EOL)\r\n          .replace(new RegExp(`(${EOL}){3,}`, 'g'), `${EOL}${EOL}`)\r\n          .replace(new RegExp(`(${EOL})+$`, 'm'), EOL)\r\n      );\r\n\r\n      FileSystem.writeFile(scssTsOutputPath, generatedTsFile);\r\n    });\r\n  }\r\n\r\n  private _globAll(...patterns: string[]): Promise<string[]> {\r\n    return Promise.all(patterns.map((pattern) =>\r\n      LegacyAdapters.convertCallbackToPromise(\r\n        glob,\r\n        path.isAbsolute(pattern) ? pattern : path.join(this.buildConfig.rootPath, pattern)\r\n      )\r\n    )).then((matchSets: string[][]) => {\r\n      const result: { [path: string]: boolean } = {};\r\n      for (const matchSet of matchSets) {\r\n        for (const match of matchSet) {\r\n          const normalizedMatch: string = path.resolve(match);\r\n          result[normalizedMatch] = true;\r\n        }\r\n      }\r\n\r\n      return Object.keys(result);\r\n    });\r\n  }\r\n\r\n  private _patchSassUrl(url: string): string {\r\n    if (url[0] === '~') {\r\n      url = 'node_modules/' + url.substr(1);\r\n    } else if (url === 'stdin') {\r\n      url = '';\r\n    }\r\n\r\n    return url;\r\n  }\r\n}\r\n"]}