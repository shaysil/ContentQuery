import { ServiceKey, Validate } from '@microsoft/sp-core-library';
import { _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _PageContextDataSource } from '@microsoft/sp-dynamic-data';
import AzureActiveDirectoryInfo from './AzureActiveDirectoryInfo';
import CultureInfo from './CultureInfo';
import SPList from './SPList';
import SPListItem from './SPListItem';
import SPSite from './SPSite';
import SPUser from './SPUser';
import SPWeb from './SPWeb';
import strings from './loc/Strings.resx';
var PageContext =  (function () {
    function PageContext(serviceScope) {
        var _this = this;
        this._urlParser = document.createElement('a');
        this._isInitialized = false;
        this._serviceScope = serviceScope;
        this._serviceScope.whenFinished(function () {
            _this._pageContextDataSource = new _PageContextDataSource(serviceScope);
            _this._pageContextDataSource.addPropertyHandler({
                id: PageContext._pageContextInfoId,
                dynamicDataFunctions: {
                    getPropertyDefinitions: function () { return [
                        {
                            id: PageContext._pageContextSiteDataDynamicProperty,
                            title: strings.ddpSiteDataTitle
                        },
                        {
                            id: PageContext._pageContextUserDynamicProperty,
                            title: strings.ddpUserDataTitle
                        },
                        {
                            id: PageContext._pageContextUrlDataDynamicProperty,
                            title: strings.ddpUrlDataTitle
                        }
                    ]; },
                    getPropertyValue: _this._getPropertyValue.bind(_this),
                    getAnnotatedPropertyValue: _this._getAnnotatedPropertyValue.bind(_this),
                    allowedEvents: function () { return []; }
                }
            });
        });
        this._getPropertyValue = this._getPropertyValue.bind(this);
    }
    PageContext.prototype.initialize = function (options, legacyPageContext) {
        var _this = this;
        Validate.isNotNullOrUndefined(options, 'options');
        try {
            this._aadInfo = options.aadInfo ? new AzureActiveDirectoryInfo(options.aadInfo) : undefined;
            this._cultureInfo = new CultureInfo(options.cultureInfo);
            this._list = options.list ? new SPList(options.list) : undefined;
            this._listItem = options.listItem ? new SPListItem(options.listItem) : undefined;
            this._site = new SPSite(options.site);
            this._user = new SPUser(options.user);
            this._web = new SPWeb(options.web);
            this._legacyPageContext = legacyPageContext;
        }
        catch (e) {
            _TraceLogger.logError(PageContext._logSource, e, 'initialize');
            throw e;
        }
        this._serviceScope.whenFinished(function () {
            _this._pageContextDataSource.notifyPropertyChanged(PageContext._pageContextUserDynamicProperty);
            _this._pageContextDataSource.notifyPropertyChanged(PageContext._pageContextSiteDataDynamicProperty);
            _this._pageContextDataSource.notifyPropertyChanged(PageContext._pageContextUserDynamicProperty);
        });
        this._isInitialized = true;
    };
    PageContext.prototype._serialize = function () {
        return {
            aadInfo: this.aadInfo ? this.aadInfo._serialize() : undefined,
            cultureInfo: this.cultureInfo._serialize(),
            list: this.list ? this.list._serialize() : undefined,
            listItem: this.listItem ? this.listItem._serialize() : undefined,
            site: this.site._serialize(),
            user: this.user._serialize(),
            web: this.web._serialize()
        };
    };
    Object.defineProperty(PageContext.prototype, "aadInfo", {
        get: function () {
            return this._aadInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "cultureInfo", {
        get: function () {
            return this._cultureInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "list", {
        get: function () {
            return this._list;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "listItem", {
        get: function () {
            return this._listItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "page", {
        get: function () {
            return this._page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "site", {
        get: function () {
            return this._site;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "user", {
        get: function () {
            return this._user;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "web", {
        get: function () {
            return this._web;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "legacyPageContext", {
        get: function () {
            return this._legacyPageContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "isInitialized", {
        get: function () {
            return this._isInitialized;
        },
        enumerable: true,
        configurable: true
    });
    PageContext.prototype._getPropertyValue = function (propertyId) {
        switch (propertyId) {
            case PageContext._pageContextUserDynamicProperty:
                return {
                    userName: this.user.displayName,
                    userEmail: this.user.email,
                    userLogin: this.user.loginName
                };
            case PageContext._pageContextSiteDataDynamicProperty:
                return {
                    siteUrl: this.web.absoluteUrl,
                    siteCollectionUrl: this.site.absoluteUrl,
                    listUrl: document && document.location && this.list && document.location.origin + this.list.serverRelativeUrl,
                    itemId: this.listItem && this.listItem.id,
                    siteClassification: this.site.classification,
                    siteTitle: this.web.title,
                    siteDescription: this.web.description,
                    siteLogoUrl: document && document.location && document.location.origin + this.web.logoUrl
                };
            case PageContext._pageContextUrlDataDynamicProperty:
                return {
                    queryParameters: this._getUrlQueryParameterCollection(),
                    fragment: this._getUrlFragmentIdentifier()
                };
            default:
                return undefined;
        }
    };
    PageContext.prototype._getAnnotatedPropertyValue = function (propertyId) {
        var propMetadata = {};
        switch (propertyId) {
            case PageContext._pageContextUserDynamicProperty:
                propMetadata = {
                    userName: {
                        title: strings.ddvUserName,
                        description: strings.ddvUserNameDesc
                    },
                    userEmail: {
                        title: strings.ddvUserEmail,
                        description: strings.ddvUserEmailDesc
                    },
                    userLogin: {
                        title: strings.ddvUserLogin,
                        description: strings.ddvUserLoginDesc
                    }
                };
                break;
            case PageContext._pageContextSiteDataDynamicProperty:
                propMetadata = {
                    siteUrl: {
                        title: strings.ddvSiteUrl,
                        description: strings.ddvSiteUrlDesc
                    },
                    siteCollectionUrl: {
                        title: strings.ddvSiteCollectionUrl,
                        description: strings.ddvSiteCollectionUrlDesc
                    },
                    listUrl: {
                        title: strings.ddvListUrl,
                        description: strings.ddvListUrlDesc
                    },
                    itemId: {
                        title: strings.ddvItemId,
                        description: strings.ddvItemIdDesc
                    },
                    siteClassification: {
                        title: strings.ddvSiteClassification,
                        description: strings.ddvSiteClassificationDesc
                    },
                    siteTitle: {
                        title: strings.ddvSiteTitle,
                        description: strings.ddvSiteTitleDesc
                    },
                    siteDescription: {
                        title: strings.ddvSiteDescription,
                        description: strings.ddvSiteDescriptionDesc
                    },
                    siteLogoUrl: {
                        title: strings.ddvSiteLogoUrl,
                        description: strings.ddvSiteLogoUrlDesc
                    }
                };
                break;
            case PageContext._pageContextUrlDataDynamicProperty:
                propMetadata = {
                    queryParameters: {
                        title: strings.ddvQueryParameters,
                        description: strings.ddvQueryParametersDesc
                    },
                    fragment: {
                        title: strings.ddvFragment,
                        description: strings.ddvFragmentDesc
                    }
                };
                break;
        }
        return {
            sampleValue: this._getPropertyValue(propertyId),
            metadata: propMetadata
        };
    };
    PageContext.prototype._getUrlQueryParameterCollection = function () {
        this._urlParser.href = window.location.href;
        var queryParams = this._urlParser.search.substring(1).split('&');
        var queryParamCollection = {};
        for (var _i = 0, queryParams_1 = queryParams; _i < queryParams_1.length; _i++) {
            var queryParam = queryParams_1[_i];
            if (queryParam !== '') {
                var params = queryParam.split('=');
                queryParamCollection[decodeURIComponent(params[0])] = decodeURIComponent(params[1] || '');
            }
        }
        return queryParamCollection;
    };
    PageContext.prototype._getUrlFragmentIdentifier = function () {
        this._urlParser.href = window.location.href;
        return this._urlParser.hash.substring(1); 
    };
    PageContext.serviceKey = ServiceKey.create('sp-page-context:PageContext', PageContext);
    PageContext._logSource = _LogSource.create('PageContext');
    PageContext._pageContextInfoId = 'PageContextInfoProperties';
    PageContext._pageContextUserDynamicProperty = 'UserData';
    PageContext._pageContextSiteDataDynamicProperty = 'SiteData';
    PageContext._pageContextUrlDataDynamicProperty = 'UrlData';
    return PageContext;
}());
export default PageContext;
