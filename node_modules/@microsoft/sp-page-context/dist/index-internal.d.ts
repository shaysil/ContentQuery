/**
 * Page context services for the SharePoint Framework
 *
 * @remarks
 * The page context allows an application and its web parts to share common
 * data about the current page, such as its contents, URL, list, user, permissions,
 * navigation menu, etc.
 *
 * @packagedocumentation
 */

import { Guid } from '@microsoft/sp-core-library';
import { IODataBasePermission } from '@microsoft/sp-odata-types';
import { _IODataPageContextInfo } from '@microsoft/sp-odata-types';
import { ServiceKey } from '@microsoft/sp-core-library';
import { ServiceScope } from '@microsoft/sp-core-library';

/**
  * This class is primarily used with the `PageContext` class. It provides information
  * useful for communicating with Azure Active Directory.
  *
  * @alpha
  */
export declare class AzureActiveDirectoryInfo {
    private _instanceUrl;
    private _tenantId;
    private _userId;
    /**
      * @internal
      */
    constructor(data: _IAzureActiveDirectoryInfoParameters);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): IAzureActiveDirectoryInfo;
    /**
     * This string returns the URL of the sign in page used to authenticate with Azure Active Directory.
     */
    readonly instanceUrl: string;
    /**
     * This Guid contains the Azure Active Directory's tenant id.
     */
    readonly tenantId: Guid;
    /**
     * This Guid contains the Azure Active Directory's user id.
     */
    readonly userId: Guid;
    /**
     * Function that throws an exception if an IAzureActiveDirectoryInfoParameters object or its parameters are
     * null, undefined, or an invalid guid.
     *
     * @param data - Data used to construct an IAzureActiveDirectoryInfoParameters object
     */
    private _validate;
}

/**
  * This class is primarily used with the `PageContext` class.  It provides culture info
  * for the current user of the application.
  *
  * @public
  */
export declare class CultureInfo {
    private _currentCultureName;
    private _currentUICultureName;
    private _isRightToLeft;
    /**
      * @internal
      */
    constructor(data: _ICultureInfoData);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): ICultureInfo;
    /**
     * This string determines the language default format for dates, times, numbers, currency values,
     * the sorting order of text, casing conventions, and string comparisons.
     *
     * @remarks
     *
     * This property may be an empty string, but it will never be undefined.
     *
     * Example: If the currentCultureName is `"en-AU"` then the application could use this information
     * to display the date as 1/8 instead of 8/1.
     */
    readonly currentCultureName: string;
    /**
     * This string determines the default user interface language. This used for localization and
     * translation of text.
     *
     * @remarks
     * This property may have an empty string, but will never be undefined.
     *
     * Example: If the currentUICultureName is `"es-MX"`, then the application could use this
     * information to translate the word "hello" to "hola".
     */
    readonly currentUICultureName: string;
    /**
     * This boolean represents the dominant direction of written text for the default user
     * interface language.
     */
    readonly isRightToLeft: boolean;
    /**
     * Function that throws an exception if an ICultureInfoData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an ICultureInfoData object
     */
    private _validate;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface IAzureActiveDirectoryInfo {
    readonly instanceUrl: string;
    readonly tenantId: string;
    readonly userId: string;
}

/**
 * Object that represents the data necessary to build an `AzureActiveDirectoryInfo` object.
 * @internal
 */
export declare interface _IAzureActiveDirectoryInfoParameters {
    instanceUrl: string;
    tenantId: string;
    userId: string;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface ICultureInfo {
    readonly currentCultureName: string;
    readonly currentUICultureName: string;
    readonly isRightToLeft: boolean;
}

/**
 * Object that represents the data necessary to build an CultureInfo object.
 * @internal
 */
export declare interface _ICultureInfoData {
    currentCultureName: string;
    currentUICultureName: string;
    isRightToLeft: boolean;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface IO365GroupAssociation {
    readonly id: string;
    readonly type: O365GroupAssociationType;
}

/**
 * Object that represents the data necessary to build an `O365GroupAssociation` object.
 *
 * @internal
 */
export declare interface _IO365GroupAssociationData {
    /**
     * {@inheritDoc  O365GroupAssociation.id}
     */
    id: string;
    /**
     * {@inheritDoc  O365GroupAssociation."type"}
     */
    type: string;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface IPageContext {
    readonly aadInfo: IAzureActiveDirectoryInfo | undefined;
    readonly cultureInfo: ICultureInfo;
    readonly list: ISPList | undefined;
    readonly listItem: ISPListItem | undefined;
    readonly site: ISPSite;
    readonly user: ISPUser;
    readonly web: ISPWeb;
}

/**
 * Interface for properties necessary for building a `PageContext` object.
 * @internal
 */
export declare interface IPageContextData {
    aadInfo?: _IAzureActiveDirectoryInfoParameters;
    cultureInfo: _ICultureInfoData;
    list?: ISPListData;
    listItem?: ISPListItemData;
    page: _IPageData;
    site: ISPSiteData;
    user: ISPUserData;
    web: ISPWebData;
}

/**
 * Object that represents the data necessary to build a `Page` object.
 *
 * @internal
 */
export declare interface _IPageData {
    socialBarEnabled?: boolean;
}

/**
 * @internal
 */
export declare interface _ISPFieldData {
    id: string;
    internalName: string;
    fieldType: string;
    isRequired: boolean;
    displayName: string;
    clientSideComponentId: string;
    clientSideComponentProperties: string;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface ISPList {
    readonly id: string;
    readonly permissions: ISPPermission;
    readonly serverRelativeUrl: string;
    readonly title: string;
}

/**
 * Object that represents the data necessary to build an `SPList` object.
 *
 * @internal
 */
export declare interface ISPListData {
    /**
     * @alpha
     */
    baseTemplate: number;
    id: string;
    permissions: IODataBasePermission;
    serverRelativeUrl: string;
    title: string;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface ISPListItem {
    readonly id: number;
}

/**
 * Object that represents the data necessary to build an `SPListItem` object.
 *
 * @internal
 */
export declare interface ISPListItemData {
    id: number;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface ISPPermission {
    readonly value: IODataBasePermission;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface ISPSite {
    readonly absoluteUrl: string;
    readonly cdnPrefix: string;
    readonly classification: string;
    readonly correlationId: string;
    readonly group: IO365GroupAssociation | undefined;
    readonly id: string;
    readonly isNoScriptEnabled: boolean;
    readonly recycleBinItemCount: number;
    readonly serverRelativeUrl: string;
    readonly serverRequestPath: string;
    readonly sitePagesEnabled: boolean;
}

/**
 * Object that represents the data necessary to build an SPSite object.
 *
 * @internal
 */
export declare interface ISPSiteData {
    absoluteUrl: string;
    cdnPrefix: string;
    classification: string;
    correlationId: string;
    group?: _IO365GroupAssociationData;
    id: string;
    isNoScriptEnabled: boolean;
    recycleBinItemCount: number;
    serverRelativeUrl: string;
    serverRequestPath: string;
    sitePagesEnabled: boolean;
    sitePagesFeatureVersion?: number;
}

/**
 * Interface that represents a `SPSystemTime` structure.
 * @beta
 */
export declare interface ISPSystemTime {
    Day: number;
    DayOfWeek: number;
    Hour: number;
    Milliseconds: number;
    Minute: number;
    Month: number;
    Second: number;
    Year: number;
}

/**
 * Interface that represents the data necessary to build an `TimeZone` object.
 * @beta
 */
export declare interface ISPTimeZoneData {
    daylightDate: ISPSystemTime;
    daylightOffset: number;
    description: string;
    id: number;
    offset: number;
    standardDate: ISPSystemTime;
    standardOffset: number;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface ISPUser {
    readonly displayName: string;
    readonly email: string;
    readonly firstDayOfWeek: SPDayOfWeek | undefined;
    readonly isAnonymousGuestUser: boolean;
    readonly isExternalGuestUser: boolean;
    readonly loginName: string;
    readonly preferUserTimeZone: boolean;
}

/**
 * Object that represents the data necessary to build an `SPUser` object.
 *
 * @internal
 */
export declare interface ISPUserData {
    displayName: string;
    email: string;
    isAnonymousGuestUser: boolean;
    isExternalGuestUser: boolean;
    loginName: string;
    preferUserTimeZone: boolean;
    timeZoneInfo?: ISPTimeZoneData;
    firstDayOfWeek?: SPDayOfWeek;
}

/**
 * JSON serializable object.
 * @alpha
 */
export declare interface ISPWeb {
    readonly absoluteUrl: string;
    readonly description: string;
    readonly id: string;
    readonly isAppWeb: boolean;
    readonly language: number;
    readonly logoUrl: string;
    readonly permissions: ISPPermission;
    readonly serverRelativeUrl: string;
    readonly templateName: string;
    readonly title: string;
}

/**
 * Object that represents the data necessary to build an `SPWeb` object.
 * @internal
 */
export declare interface ISPWebData {
    absoluteUrl: string;
    id: string;
    isAppWeb: boolean;
    language: number;
    logoUrl: string;
    permissions: IODataBasePermission;
    timeZoneInfo?: ISPTimeZoneData;
    firstDayOfWeek?: SPDayOfWeek;
    serverRelativeUrl: string;
    templateName: string;
    title: string;
    description: string;
}

/**
  * This class is primarily used with the `PageContext` class. If the site is associated with an O365
  * group, this object provides contextual information about the group.
  *
  * @alpha
  */
export declare class O365GroupAssociation {
    private _id;
    private _type;
    /**
     * @internal
     */
    constructor(data: _IO365GroupAssociationData);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): IO365GroupAssociation;
    /**
     * The GUID associated with the site's O365 Group.
     */
    readonly id: Guid;
    /**
     * This enum identifies if the associated O365 Group private or public or unknown.
     */
    readonly type: O365GroupAssociationType;
    /**
     * Function that throws an exception if an IO365GroupAssociationData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an IO365GroupAssociationData object
     */
    private _validate;
}

/**
 * {@inheritDoc  O365GroupAssociation."type"}
 * @alpha
 */
export declare enum O365GroupAssociationType {
    Unknown = 0,
    Private = 1,
    Public = 2
}

/**
 * Exposes information that is associated with the SharePoint web page that is currently being displayed.
 *
 * @remarks
 * The Page object provides access to information that is scoped to the current SharePoint web page, but not
 * stored with the underlying SPListItem. Note that the {@link PageContext.listItem} may be undefined for
 * pages that are not based on a SharePoint list, whereas the PageContext.page will never be undefined.
 *
 * The concept of a "page" is subjective and defined by the router for a particular client-side application.
 *
 * @alpha
 */
export declare class Page {
    private _socialBarEnabled;
    /**
     * @internal
     */
    constructor(data: _IPageData);
    /**
     * Returns true if the Social Bar is enabled.
     *
     * @remarks
     * The Social Bar will appear on all modern SharePoint pages with the exception of the home page of a site.
     * It will give users the ability to like a page, see the number of views, likes, and comments on a page,
     * and see the people who have liked a page.
     */
    readonly socialBarEnabled: boolean;
    /**
     * Function that throws an exception if an IPageData object or its required
     * parameters are null or undefined.
     *
     * @param data - Data used to construct a IPageData object
     */
    private _validate;
}

/**
 * The SharePoint page context object.
 *
 * @remarks
 * The page context provides standard definitions for common SharePoint objects
 * that need to be shared between the client-side application, web parts, and other
 * components.  Typically the data is fetched via REST queries when navigating to a
 * new page, but it can also be preloaded by the web server, or filled from a custom
 * application cache.

 * @public
 */
export declare class PageContext {
    /**
     * The service key for PageContext.
     */
    static readonly serviceKey: ServiceKey<PageContext>;
    private static _logSource;
    private static _pageContextInfoId;
    private static _pageContextUserDynamicProperty;
    private static _pageContextSiteDataDynamicProperty;
    private static _pageContextUrlDataDynamicProperty;
    private _aadInfo;
    private _cultureInfo;
    private _list;
    private _listItem;
    private _page;
    private _site;
    private _user;
    private _web;
    private _legacyPageContext;
    private _isInitialized;
    private _serviceScope;
    private _urlParser;
    private _pageContextDataSource;
    constructor(serviceScope: ServiceScope);
    /**
     * Initializes the Page Context.
     * @internal
     */
    initialize(options: IPageContextData, legacyPageContext?: any): void;
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): IPageContext;
    /**
     * Contextual information for communicating with Azure Active Directory.
     * If the current page doesn't have an associated Azure Active Directory tenant, this
     * property will be undefined.
     */
    readonly aadInfo: AzureActiveDirectoryInfo | undefined;
    /**
     * It provides culture info for the current user of the application.
     * This class is primarily used with the `PageContext` class.
     */
    readonly cultureInfo: CultureInfo;
    /**
     * Contextual information for the SharePoint list that is hosting the page.
     * If there is no list associated to the current page, this property will be undefined.
     */
    readonly list: SPList | undefined;
    /**
     * Contextual information for the SharePoint list item that is hosting the page.
     * If there is no list item associated to the current page, this property will be undefined.
     */
    readonly listItem: SPListItem | undefined;
    /**
     * Exposes information that is associated with the SharePoint web page that is currently being displayed.
     * @alpha
     */
    readonly page: Page;
    /**
     * Contextual information for the SharePoint site collection ("SPSite") that is hosting the page.
     */
    readonly site: SPSite;
    /**
     * It provides contextual information for the SharePoint user that is accessing the page.
     * This class is primarily used with the `PageContext` class.
     */
    readonly user: SPUser;
    /**
     * Contextual information for the SharePoint site ("SPWeb") that is hosting the page.
     */
    readonly web: SPWeb;
    /**
     * An object providing classic SharePoint properties that may be required by certain legacy scripts.
     *
     * @remarks
     * This property is provided to facilitate migration of legacy code. It returns a JavaScript
     * object whose contents are similar to the `_spPageContextInfo` window variable from classic pages.
     * The contents of this variable may change in future releases of SharePoint.  For this reason,
     * new projects are encouraged to use the SharePoint Framework TypeScript APIs instead, since they
     * are fully documented and provide reliable backwards compatibility guarantees.
     *
     * NOTE: If certain functionality is exposed in the `legacyPageContext` but does not seem to have
     * a proper TypeScript API, please file an issue on GitHub.  The intention is that no modern application
     * should need to rely on the `legacyPageContext` object.
     */
    readonly legacyPageContext: any;
    /**
     * Returns whether the `PageContext` has been initialized.
     */
    readonly isInitialized: boolean;
    private _getPropertyValue;
    private _getAnnotatedPropertyValue;
    /**
     * Returns decoded key-value pair collection for the current page's query parameters.
     *
     * @remarks
     * If the key or value doesn't exist, it adds an empty string instead.
     */
    private _getUrlQueryParameterCollection;
    /**
     * Returns the fragment identifier for the current page's url.
     */
    private _getUrlFragmentIdentifier;
}

/**
  * The page context represents contextual information about the SharePoint page that
  * is currently being viewed, such as its site URL, the client-side application ID,
  * the current user, etc.  The page context objects themselves represent key information
  * that is needed e.g. to identify the site/web/list/listitem in a REST service call,
  * but it is not a full cache with invalidation and change notifications.

  * @alpha
  */
export declare class SharePointPageContextDataProvider {
    /**
     * Populates the webPart pageContext using the data from the app Page Context. AppPageContext
     * must be populated already.
     * @internal
     */
    static _createPageContextData(spPageContextInfo: _IODataPageContextInfo): IPageContextData;
}

/**
 * The enum members represent the seven days of a week.
 *
 * @beta
 */
export declare const enum SPDayOfWeek {
    Sunday = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 3,
    Thursday = 4,
    Friday = 5,
    Saturday = 6
}

/**
 * A field represents the data model for a column in SharePoint list view.
 * @remarks
 *
 * This is the client-side equivalent for SharePoint `SPField` class. It is used with the
 * `@microsoft/sp-listview-extensibility` package.
 *
 * @public
 */
export declare class SPField {
    private _id;
    private _internalName;
    private _fieldType;
    private _required;
    private _displayName;
    private _clientSideComponentId;
    private _clientSideComponentProperties;
    /**
     * @internal
     */
    constructor(data: _ISPFieldData);
    /**
     * The GUID identifier for this field.
     */
    readonly id: Guid;
    /**
     * The internal name of the field. This name is usually used to find the field.
     */
    readonly internalName: string;
    /**
     * The type of the field represented as a string
     */
    readonly fieldType: string;
    /**
     * Whether the field is required for each list item in the list
     */
    readonly isRequired: boolean;
    /**
     * The display name of the field. This name is shown as column name in UI.
     */
    readonly displayName: string;
    /**
     * The unique identifier of the client-side component associated with the field.
     */
    readonly clientSideComponentId: Guid | undefined;
    /**
     * This property is only used when a `ClientSideComponentId` is specified.  It is optional.
     *
     * @remarks
     * If non-empty, the string must contain a JSON object with custom initialization properties
     * whose format and meaning are defined by the client-side component.
     */
    readonly clientSideComponentProperties: string;
    private _validate;
}

/**
  * This class is primarily used with the `PageContext` class.  It provides contextual
  * information for the SharePoint list that hosts the page.
  *
  * @public
  */
export declare class SPList {
    private _id;
    private _permissions;
    private _serverRelativeUrl;
    private _title;
    /**
     * @internal
     */
    constructor(data: ISPListData);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): ISPList;
    /**
     * The GUID that identifies the SPList on the server. This property could be undefined
     * if the information isn't available.
     */
    readonly id: Guid;
    /**
     * Return the SPPermission object that represents the set of permissions that the
     * current user has for interacting with the list.
     */
    readonly permissions: SPPermission;
    /**
     * Returns the server-relative URL for this `SPList`.
     *
     * @remarks
     * Example: "/sites/PubSite"
     */
    readonly serverRelativeUrl: string;
    /**
     * Returns the title for this `SPList`.
     */
    readonly title: string;
    /**
     * Function that throws an exception if an `ISPListData` object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an `ISPListData` object
     */
    private _validate;
}

/**
  * This class is primarily used with the `PageContext` class.  It provides contextual
  * information for the SharePoint list item that hosts the page.
  *
  * @public
  */
export declare class SPListItem {
    private _id;
    /**
     * @internal
     */
    constructor(data: ISPListItemData);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): ISPListItem;
    /**
     * The number that identifies the `SPListItem` on the server.
     *
     */
    readonly id: number;
    /**
     * Function that throws an exception if an `ISPListItemData` object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an `ISPListItemData` object
     */
    private _validate;
}

/**
 * Used to test whether the current user has a requested set of permissions.
 *
 * @remarks
 *
 * Specifies the built-in permissions available in SharePoint Foundation
 *
 * For more information, see:
 * {@link https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spbasepermissions.aspx}
 *
 * @public
 */
export declare class SPPermission {
    /**
     * Has no permissions on the Web site. Not available through the user interface.
     */
    static readonly emptyMask: SPPermission;
    /**
     * View items in lists, documents in document libraries, and view Web discussion comments.
     */
    static readonly viewListItems: SPPermission;
    /**
     * Add items to lists, add documents to document libraries, and add Web discussion comments.
     */
    static readonly addListItems: SPPermission;
    /**
     * Edit items in lists, edit documents in document libraries, edit Web discussion comments in documents,
     * and customize web part Pages in document libraries.
     */
    static readonly editListItems: SPPermission;
    /**
     * Delete items from a list, documents from a document library, and Web discussion comments in documents.
     */
    static readonly deleteListItems: SPPermission;
    /**
     * Approve a minor version of a list item or document.
     */
    static readonly approveItems: SPPermission;
    /**
     * View the source of documents with server-side file handlers.
     */
    static readonly openItems: SPPermission;
    /**
     * View past versions of a list item or document.
     */
    static readonly viewVersions: SPPermission;
    /**
     * Delete past versions of a list item or document.
     */
    static readonly deleteVersions: SPPermission;
    /**
     * Discard or check in a document which is checked out to another user.
     */
    static readonly cancelCheckout: SPPermission;
    /**
     * Create, change, and delete personal views of lists.
     */
    static readonly managePersonalViews: SPPermission;
    /**
     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.
     */
    static readonly manageLists: SPPermission;
    /**
     * View forms, views, and application pages, and enumerate lists.
     */
    static readonly viewFormPages: SPPermission;
    /**
     * Allow users to open a Web site, list, or folder to access items inside that container.
     */
    static readonly open: SPPermission;
    /**
     * View pages in a Web site.
     */
    static readonly viewPages: SPPermission;
    /**
     * View the layouts page?
     */
    static readonly layoutsPage: SPPermission;
    /**
     * Add, change, or delete HTML pages or web part Pages, and edit the Web site using a SharePoint
     * Foundation–compatible editor.
     */
    static readonly addAndCustomizePages: SPPermission;
    /**
     * Apply a theme or borders to the entire Web site.
     */
    static readonly applyThemeAndBorder: SPPermission;
    /**
     * Apply a style sheet (.css file) to the Web site.
     */
    static readonly applyStyleSheets: SPPermission;
    /**
     * View reports on Web site usage.
     */
    static readonly viewUsageData: SPPermission;
    /**
     * Create a Web site using Self-Service Site Creation.
     */
    static readonly createSSCSite: SPPermission;
    /**
     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.
     */
    static readonly manageSubwebs: SPPermission;
    /**
     * Create a group of users that can be used anywhere within the site collection.
     */
    static readonly createGroups: SPPermission;
    /**
     * Create and change permission levels on the Web site and assign permissions to users and groups.
     */
    static readonly managePermissions: SPPermission;
    /**
     * Enumerate files and folders in a Web site using Microsoft Office SharePoint Designer 2007 and WebDAV interfaces.
     */
    static readonly browseDirectories: SPPermission;
    /**
     * View information about users of the Web site.
     */
    static readonly browserUserInfo: SPPermission;
    /**
     * Add or remove personal web parts on a web part Page.
     */
    static readonly addDelPrivateWebParts: SPPermission;
    /**
     * Update web parts to display personalized information.
     */
    static readonly updatePersonalWebParts: SPPermission;
    /**
     * Grant the ability to perform all administration tasks for the Web site as well as manage content.
     *
     * @remarks
     * Activate, deactivate, or edit properties of Web site scoped Features through the object model or
     * through the user interface (UI). When granted on the root Web site of a site collection, activate,
     * deactivate, or edit properties of site collection scoped Features through the object model. To
     * browse to the Site Collection Features page and activate or deactivate site collection scoped
     * Features through the UI, you must be a site collection administrator.
     */
    static readonly manageWeb: SPPermission;
    /**
     * Use features that launch client applications; otherwise, users must work on documents locally and upload changes.
     */
    static readonly useClientIntegration: SPPermission;
    /**
     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer 2007 interfaces to access the Web site.
     */
    static readonly useRemoteAPIs: SPPermission;
    /**
     * Manage alerts for all users of the Web site.
     */
    static readonly manageAlerts: SPPermission;
    /**
     * Create e-mail alerts.
     */
    static readonly createAlerts: SPPermission;
    /**
     * Allows a user to change his or her user information, such as adding a picture.
     */
    static readonly editMyUserInfo: SPPermission;
    /**
     * Enumerate permissions on the Web site, list, folder, document, or list item.
     */
    static readonly enumeratePermissions: SPPermission;
    /**
     * Has all permissions on the Web site. Not available through the user interface.
     */
    static readonly fullMask: SPPermission;
    private _value;
    constructor(value: IODataBasePermission);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): ISPPermission;
    /**
     * Returns the value of this SPPermission object
     */
    readonly value: IODataBasePermission;
    /**
     * Function for testing whether a given permission mask has any of the requested permissions.
     * @param requestedPerms - Any number of SPPermission objects to be compared against the original
     */
    hasAnyPermissions(...requestedPerms: SPPermission[]): boolean;
    /**
     * Function for testing whether a given permission mask has all of the requested permissions.
     * @param requestedPerms - Any number of SPPermission objects to be compared against the original
     */
    hasAllPermissions(...requestedPerms: SPPermission[]): boolean;
    /**
     * Function for testing whether a given permission mask has the requested permission.
     * @param requestedPerm - The SPPermission object to be compared against the original
     */
    hasPermission(requestedPerm: SPPermission): boolean;
}

/**
  * This class is primarily used with the `PageContext` class.  It provides contextual
  * information for the SharePoint site collection ("SPSite") that hosts the page.
  *
  * @public
  */
export declare class SPSite {
    private _absoluteUrl;
    private _cdnPrefix;
    private _classification;
    private _correlationId;
    private _group;
    private _id;
    private _isNoScriptEnabled;
    private _recycleBinItemCount;
    private _serverRelativeUrl;
    private _serverRequestPath;
    private _sitePagesEnabled;
    private _sitePagesFeatureVersion;
    /**
     * @internal
     */
    constructor(data: ISPSiteData);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): ISPSite;
    /**
     * Returns the absolute URL for this SPSite.
     *
     * @remarks
     * Example: "https://example.com/sites/PubSite"
     */
    readonly absoluteUrl: string;
    /**
     * Returns the prefix of the application's specified cdn or an empty string if there isn't one.
     */
    readonly cdnPrefix: string;
    /**
     * Returns the classification of the site.
     */
    readonly classification: string;
    /**
     * Returns the correlation id to the current server request.
     */
    readonly correlationId: Guid;
    /**
     * Contextual information about the O365 Group associated with this site.
     * If there is no O365Group associated with the current site, this property will be undefined.
     */
    readonly group: O365GroupAssociation | undefined;
    /**
     * The GUID that identifies the SPSite on the server.
     */
    readonly id: Guid;
    /**
     * Returns true if isNoScript has been enabled on the SPSite.
     */
    readonly isNoScriptEnabled: boolean;
    /**
     * The amount of items in the recycle bin.
     */
    readonly recycleBinItemCount: number;
    /**
     * Returns the server-relative URL for this SPSite.
     *
     * @remarks
     * Example: "/sites/PubSite"
     */
    readonly serverRelativeUrl: string;
    /**
     * Returns serverRelativeUrl of the original request.
     *
     * @remarks
     * Example: "/teams/SPClientTest/SitePages/Home.aspx"
     */
    readonly serverRequestPath: string;
    /**
     * Returns true if SitePages are enabled on this SPSite.
     */
    readonly sitePagesEnabled: boolean;
    /**
     * Returns site pages feature version number if defined on this SPSite.
     * Example, for version 16.0.4.0 this would return 4.
     *
     * @alpha
     */
    readonly sitePagesFeatureVersion: number;
    /**
     * Function that throws an exception if an ISPSiteData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an ISPSiteData object
     */
    private _validate;
}

/**
  * It provides timezone information from SharePoint. A conversion from UTC to local
  * time can be calculated by using the following formula.
  *
  * @remarks
  *
  * ```
  * isDaylightSavingsTime = isCurrentDate after DaylightSavingsDate but before the StandardDate
  * LocalTime = UTCTime - Offset - (isDaylightSavingsTime ? daylightOffset : standardOffset)
  * June 11, 2 A.M. PST = June 11, 9 A.M. - (480 minutes) - (-60  minutes)
  * ```
  *
  * @beta
  */
export declare class SPTimeZone {
    private _daylightDate;
    private _daylightOffset;
    private _description;
    private _id;
    private _offset;
    private _standardDate;
    private _standardOffset;
    /**
     * @internal
     */
    constructor(data: ISPTimeZoneData);
    /**
     * Gets the date on which daylight time begins for the time zone.
     */
    readonly daylightDate: ISPSystemTime;
    /**
     * Gets the offset in the number of minutes that daylight time for the time zone differs
     * from Coordinated Universal Time (UTC).
     */
    readonly daylightOffset: number;
    /**
     * Gets the description for the time zone.
     */
    readonly description: string;
    /**
     * Gets the ID of the time zone.
     */
    readonly id: number;
    /**
     * Gets the offset in the number of minutes that the time zone differs from Coordinated
     * Universal Time (UTC).
     */
    readonly offset: number;
    /**
     * Gets the date on which standard time begins for the time zone.
     */
    readonly standardDate: ISPSystemTime;
    /**
     * Gets the offset in the number of minutes that standard time for the time zone differs
     * from coordinated universal time (UTC).
     */
    readonly standardOffset: number;
    /**
     * Function that throws an exception if an ISPTimeZoneData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an ISPTimeZoneData object
     */
    private _validate;
}

/**
  * This class is primarily used with the `PageContext` class.  It provides contextual information
  * for the SharePoint user that is accessing the page.
  *
  * @public
  */
export declare class SPUser {
    private _displayName;
    private _email;
    private _isAnonymousGuestUser;
    private _isExternalGuestUser;
    private _loginName;
    private _preferUserTimeZone;
    private _timeZone;
    private _firstDayOfWeek;
    /**
     * @internal
     */
    constructor(data: ISPUserData);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): ISPUser;
    /**
     * The display name for the current user.
     *
     * @remarks
     * Example: `"John Doe"`
     */
    readonly displayName: string;
    /**
     * The email address for the current user.
     *
     * @remarks
     * Example: `"example@contoso.com"`
     */
    readonly email: string;
    /**
     * Returns if the current user is an anonymous guest.
     */
    readonly isAnonymousGuestUser: boolean;
    /**
     * Returns true if the current user is an external guest.
     */
    readonly isExternalGuestUser: boolean;
    /**
     * The login name for current user.
     *
     * @remarks
     * Example: on-premise user: `"domain\user"`, online user: `"user@domain.com"`
     */
    readonly loginName: string;
    /**
     * This boolean represents if a the user or web's time zone settings should be used
     * to display the current time.
     */
    readonly preferUserTimeZone: boolean;
    /**
     * Returns the user's regional timezone settings or undefined if they haven't been set.
     *
     * @beta
     */
    readonly timeZoneInfo: SPTimeZone | undefined;
    /**
     * Returns the user's regional first day of week setting or undefined if it hasn't been set.
     *
     * @beta
     */
    readonly firstDayOfWeek: SPDayOfWeek | undefined;
    /**
     * Function that throws an exception if an ISPUserData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an ISPUserData object
     */
    private _validate;
}

/**
  * This class is primarily used with the `PageContext` class. It provides contextual
  * information for the SharePoint site ("SPWeb") that hosts the page.
  *
  * @public
  */
export declare class SPWeb {
    private _absoluteUrl;
    private _id;
    private _isAppWeb;
    private _language;
    private _logoUrl;
    private _permissions;
    private _serverRelativeUrl;
    private _templateName;
    private _timeZone;
    private _firstDayOfWeek;
    private _title;
    private _description;
    /**
     * @internal
     */
    constructor(data: ISPWebData);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): ISPWeb;
    /**
     * Returns the absolute URL for this SPWeb.
     * Example: `"https://example.com/sites/PubSite/SubWeb"`
     */
    readonly absoluteUrl: string;
    /**
     * The GUID that identifies the SPWeb on the server.
     */
    readonly id: Guid;
    /**
     * Returns true if this `SPWeb` the container web for an `SPApp`.
     */
    readonly isAppWeb: boolean;
    /**
     * Returns the locale identifier (LCID) for the default language of the website.
     *
     * @remarks
     * Example: 1033 represents the locale identifier for en-US.
     */
    readonly language: number;
    /**
     * Returns the absolute URL of the website logo.
     *
     * @remarks
     * Example:` https://example.com/sites/PubSite/SubWeb/logo.jpg`
     */
    readonly logoUrl: string;
    /**
     * Return the SPPermission object that represents the set of permissions that the
     * current user has for interacting with the web.
     */
    readonly permissions: SPPermission;
    /**
     * Returns the web's regional timezone settings or undefined if they haven't been set.
     *
     * @beta
     */
    readonly timeZoneInfo: SPTimeZone | undefined;
    /**
     * Returns the web's regional first day of week setting or undefined if it hasn't been set.
     *
     * @beta
     */
    readonly firstDayOfWeek: SPDayOfWeek | undefined;
    /**
     * Returns the server-relative URL for this SPWeb.
     *
     * @remarks
     * Example: `"/sites/PubSite/SubWeb"`
     */
    readonly serverRelativeUrl: string;
    /**
     * Returns the string representing the numeric identifier for the site definition or
     * site template that was used to create the site.
     *
     * @remarks
     * Example: `"1"` represents the team site template when creating a new site on SharePoint.
     */
    readonly templateName: string;
    /**
     * Returns the title of the current SPWeb.
     */
    readonly title: string;
    /**
     * Returns the description of the current SPWeb.
     */
    readonly description: string;
    /**
     * Function that throws an exception if an ISPWebData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an ISPWebData object
     */
    private _validate;
}

export { }
