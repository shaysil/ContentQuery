{"version":3,"file":"classNamesFunction.js","sourceRoot":"../src/","sources":["classNamesFunction.ts"],"names":[],"mappings":";;;IAWA;;;OAGG;IACH,4BACE,OAAwC;QAExC,iBAAiB;QAFjB,wBAAA,EAAA,YAAwC;QAIxC,IAAM,aAAa,GAAG,UACpB,qBAAiF,EACjF,UAA2C;YAA3C,2BAAA,EAAA,aAA0B,EAAiB;YAE3C,gGAAgG;YAChG,4DAA4D;YAC5D,sGAAsG;YACtG,0GAA0G;YAC1G,IAAI,qBAAqB,KAAK,SAAS,EAAE;gBACvC,OAAO,EAAmC,CAAC;aAC5C;YAED,IAAM,QAAQ,GACZ,qBAAqB,IAAI,CAAC,OAAO,qBAAqB,KAAK,UAAU,CAAC,CAAC,CAAC,qBAAqB,CAAC,UAAW,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC;YAEtI,OAAO,6BAAc,CAAC,QAAqB,CAAC,CAAC;QAC/C,CAAC,CAAC;QAEF,OAAO,aAAa,CAAC;IACvB,CAAC;IAxBD,gDAwBC","sourcesContent":["import { mergeStyleSets, IStyle, IStyleSet, IProcessedStyleSet } from '@uifabric/merge-styles';\nimport { IStyleFunctionOrObject } from '@uifabric/merge-styles';\n\n// TODO: deprecate disableCaching option if not used by classNamesFunction for optimization.\nexport interface IClassNamesFunctionOptions {\n  /**\n   * Disables class caching for scenarios where styleProp parts mutate frequently.\n   */\n  disableCaching?: boolean;\n}\n\n/**\n * Creates a getClassNames function which calls getStyles given the props, and injects them\n * into mergeStyleSets.\n */\nexport function classNamesFunction<TStyleProps extends {}, TStyleSet extends IStyleSet<TStyleSet>>(\n  options: IClassNamesFunctionOptions = {}\n): (getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined, styleProps?: TStyleProps) => IProcessedStyleSet<TStyleSet> {\n  // TODO: memoize.\n\n  const getClassNames = (\n    styleFunctionOrObject: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined,\n    styleProps: TStyleProps = {} as TStyleProps\n  ): IProcessedStyleSet<TStyleSet> => {\n    // styleSet might be undefined if styleFunctionOrObject is undefined, but getStyles should never\n    // ordinarily be undefined (it would hardly make any sense).\n    // However, because we usually use `props.styles` as the argument to an invocation of this method, and\n    // `props.styles` itself is defined as optional, this avoids the need to use `!` at all invocation points.\n    if (styleFunctionOrObject === undefined) {\n      return {} as IProcessedStyleSet<TStyleSet>;\n    }\n\n    const styleSet =\n      styleFunctionOrObject && (typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps!) : styleFunctionOrObject);\n\n    return mergeStyleSets(styleSet as TStyleSet);\n  };\n\n  return getClassNames;\n}\n"]}